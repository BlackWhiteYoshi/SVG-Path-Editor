/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Decimal/Decimal.js":
/*!****************************!*\
  !*** ./Decimal/Decimal.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;(function (globalScope) {\n    'use strict';\n\n\n    /*\n     *  decimal.js-light v2.5.1\n     *  An arbitrary-precision Decimal type for JavaScript.\n     *  https://github.com/MikeMcl/decimal.js-light\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\n     *  MIT Expat Licence\n     */\n\n\n    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toDecimalPlaces`.\n    var MAX_DIGITS = 1e9,                        // 0 to 1e9\n\n\n        // The initial configuration properties of the Decimal constructor.\n        Decimal = {\n\n            // These values must be integers within the stated ranges (inclusive).\n            // Most of these values can be changed during run-time using `Decimal.config`.\n\n            // The maximum number of significant digits of the result of a calculation or base conversion.\n            // E.g. `Decimal.config({ precision: 20 });`\n            precision: 20,                         // 1 to MAX_DIGITS\n\n            // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\n            // `toFixed`, `toPrecision` and `toDecimalPlaces`.\n            //\n            // ROUND_UP         0 Away from zero.\n            // ROUND_DOWN       1 Towards zero.\n            // ROUND_CEIL       2 Towards +Infinity.\n            // ROUND_FLOOR      3 Towards -Infinity.\n            // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            //\n            // E.g.\n            // `Decimal.rounding = 4;`\n            // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n            rounding: 4,                           // 0 to 8\n\n            // The exponent value at and beneath which `toString` returns exponential notation.\n            // JavaScript numbers: -7\n            toExpNeg: -7,                          // 0 to -MAX_E\n\n            // The exponent value at and above which `toString` returns exponential notation.\n            // JavaScript numbers: 21\n            toExpPos: 21,                         // 0 to MAX_E\n\n            // The natural logarithm of 10.\n            // 115 digits\n            LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\n        },\n\n\n        // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n\n        external = true,\n\n        decimalError = '[DecimalError] ',\n        invalidArgument = decimalError + 'Invalid argument: ',\n        exponentOutOfRange = decimalError + 'Exponent out of range: ',\n\n        mathfloor = Math.floor,\n        mathpow = Math.pow,\n\n        isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n\n        ONE,\n        BASE = 1e7,\n        LOG_BASE = 7,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\n\n        // Decimal.prototype object\n        P = {};\n\n\n    // Decimal prototype methods\n\n\n    /*\n     *  absoluteValue                       abs\n     *  comparedTo                          cmp\n     *  decimalPlaces                       dp\n     *  dividedBy                           div\n     *  dividedToIntegerBy                  idiv\n     *  equals                              eq\n     *  exponent\n     *  greaterThan                         gt\n     *  greaterThanOrEqualTo                gte\n     *  isInteger                           isint\n     *  isNegative                          isneg\n     *  isPositive                          ispos\n     *  isZero\n     *  lessThan                            lt\n     *  lessThanOrEqualTo                   lte\n     *  logarithm                           log\n     *  minus                               sub\n     *  modulo                              mod\n     *  naturalExponential                  exp\n     *  naturalLogarithm                    ln\n     *  negated                             neg\n     *  plus                                add\n     *  precision                           sd\n     *  squareRoot                          sqrt\n     *  times                               mul\n     *  toDecimalPlaces                     todp\n     *  toExponential\n     *  toFixed\n     *  toInteger                           toint\n     *  toNumber\n     *  toPower                             pow\n     *  toPrecision\n     *  toDecimalPlaces                 tosd\n     *  toString\n     *  valueOf                             val\n     */\n\n\n    /*\n     * Return a new Decimal whose value is the absolute value of this Decimal.\n     *\n     */\n    P.absoluteValue = P.abs = function () {\n        var x = new this.constructor(this);\n        if (x.s) x.s = 1;\n        return x;\n    };\n\n\n    /*\n     * Return\n     *   1    if the value of this Decimal is greater than the value of `y`,\n     *  -1    if the value of this Decimal is less than the value of `y`,\n     *   0    if they have the same value\n     *\n     */\n    P.comparedTo = P.cmp = function (y) {\n        var i, j, xdL, ydL,\n            x = this;\n\n        y = new x.constructor(y);\n\n        // Signs differ?\n        if (x.s !== y.s) return x.s || -y.s;\n\n        // Compare exponents.\n        if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\n\n        xdL = x.d.length;\n        ydL = y.d.length;\n\n        // Compare digit by digit.\n        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n            if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\n        }\n\n        // Compare lengths.\n        return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\n    };\n\n\n    /*\n     * Return the number of decimal places of the value of this Decimal.\n     *\n     */\n    P.decimalPlaces = P.dp = function () {\n        var x = this,\n            w = x.d.length - 1,\n            dp = (w - x.e) * LOG_BASE;\n\n        // Subtract the number of trailing zeros of the last word.\n        w = x.d[w];\n        if (w) for (; w % 10 == 0; w /= 10) dp--;\n\n        return dp < 0 ? 0 : dp;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.dividedBy = P.div = function (y) {\n        return divide(this, new this.constructor(y));\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\n     * by the value of `y`, truncated to `precision` significant digits.\n     *\n     */\n    P.dividedToIntegerBy = P.idiv = function (y) {\n        var x = this,\n            Ctor = x.constructor;\n        return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\n     *\n     */\n    P.equals = P.eq = function (y) {\n        return !this.cmp(y);\n    };\n\n\n    /*\n     * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\n     *\n     */\n    P.exponent = function () {\n        return getBase10Exponent(this);\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\n     * false.\n     *\n     */\n    P.greaterThan = P.gt = function (y) {\n        return this.cmp(y) > 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is greater than or equal to the value of `y`,\n     * otherwise return false.\n     *\n     */\n    P.greaterThanOrEqualTo = P.gte = function (y) {\n        return this.cmp(y) >= 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is an integer, otherwise return false.\n     *\n     */\n    P.isInteger = P.isint = function () {\n        return this.e > this.d.length - 2;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is negative, otherwise return false.\n     *\n     */\n    P.isNegative = P.isneg = function () {\n        return this.s < 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is positive, otherwise return false.\n     *\n     */\n    P.isPositive = P.ispos = function () {\n        return this.s > 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is 0, otherwise return false.\n     *\n     */\n    P.isZero = function () {\n        return this.s === 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is less than `y`, otherwise return false.\n     *\n     */\n    P.lessThan = P.lt = function (y) {\n        return this.cmp(y) < 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\n     *\n     */\n    P.lessThanOrEqualTo = P.lte = function (y) {\n        return this.cmp(y) < 1;\n    };\n\n\n    /*\n     * Return the logarithm of the value of this Decimal to the specified base, truncated to\n     * `precision` significant digits.\n     *\n     * If no base is specified, return log[10](x).\n     *\n     * log[base](x) = ln(x) / ln(base)\n     *\n     * The maximum error of the result is 1 ulp (unit in the last place).\n     *\n     * [base] {number|string|Decimal} The base of the logarithm.\n     *\n     */\n    P.logarithm = P.log = function (base) {\n        var r,\n            x = this,\n            Ctor = x.constructor,\n            pr = Ctor.precision,\n            wpr = pr + 5;\n\n        // Default base is 10.\n        if (base === void 0) {\n            base = new Ctor(10);\n        } else {\n            base = new Ctor(base);\n\n            // log[-b](x) = NaN\n            // log[0](x)  = NaN\n            // log[1](x)  = NaN\n            if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\n        }\n\n        // log[b](-x) = NaN\n        // log[b](0) = -Infinity\n        if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n        // log[b](1) = 0\n        if (x.eq(ONE)) return new Ctor(0);\n\n        external = false;\n        r = divide(ln(x, wpr), ln(base, wpr), wpr);\n        external = true;\n\n        return round(r, pr);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.minus = P.sub = function (y) {\n        var x = this;\n        y = new x.constructor(y);\n        return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.modulo = P.mod = function (y) {\n        var q,\n            x = this,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        y = new Ctor(y);\n\n        // x % 0 = NaN\n        if (!y.s) throw Error(decimalError + 'NaN');\n\n        // Return x if x is 0.\n        if (!x.s) return round(new Ctor(x), pr);\n\n        // Prevent rounding of intermediate calculations.\n        external = false;\n        q = divide(x, y, 0, 1).times(y);\n        external = true;\n\n        return x.minus(q);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\n     * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\n     * significant digits.\n     *\n     */\n    P.naturalExponential = P.exp = function () {\n        return exp(this);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\n     * truncated to `precision` significant digits.\n     *\n     */\n    P.naturalLogarithm = P.ln = function () {\n        return ln(this);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\n     * -1.\n     *\n     */\n    P.negated = P.neg = function () {\n        var x = new this.constructor(this);\n        x.s = -x.s || 0;\n        return x;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.plus = P.add = function (y) {\n        var x = this;\n        y = new x.constructor(y);\n        return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\n    };\n\n\n    /*\n     * Return the number of significant digits of the value of this Decimal.\n     *\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n     *\n     */\n    P.precision = P.sd = function (z) {\n        var e, sd, w,\n            x = this;\n\n        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n        e = getBase10Exponent(x) + 1;\n        w = x.d.length - 1;\n        sd = w * LOG_BASE + 1;\n        w = x.d[w];\n\n        // If non-zero...\n        if (w) {\n\n            // Subtract the number of trailing zeros of the last word.\n            for (; w % 10 == 0; w /= 10) sd--;\n\n            // Add the number of digits of the first word.\n            for (w = x.d[0]; w >= 10; w /= 10) sd++;\n        }\n\n        return z && e > sd ? e : sd;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\n     * significant digits.\n     *\n     */\n    P.squareRoot = P.sqrt = function () {\n        var e, n, pr, r, s, t, wpr,\n            x = this,\n            Ctor = x.constructor;\n\n        // Negative or zero?\n        if (x.s < 1) {\n            if (!x.s) return new Ctor(0);\n\n            // sqrt(-x) = NaN\n            throw Error(decimalError + 'NaN');\n        }\n\n        e = getBase10Exponent(x);\n        external = false;\n\n        // Initial estimate.\n        s = Math.sqrt(+x);\n\n        // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n        if (s == 0 || s == 1 / 0) {\n            n = digitsToString(x.d);\n            if ((n.length + e) % 2 == 0) n += '0';\n            s = Math.sqrt(n);\n            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n            if (s == 1 / 0) {\n                n = '5e' + e;\n            } else {\n                n = s.toExponential();\n                n = n.slice(0, n.indexOf('e') + 1) + e;\n            }\n\n            r = new Ctor(n);\n        } else {\n            r = new Ctor(s.toString());\n        }\n\n        pr = Ctor.precision;\n        s = wpr = pr + 3;\n\n        // Newton-Raphson iteration.\n        for (; ;) {\n            t = r;\n            r = t.plus(divide(x, t, wpr + 2)).times(0.5);\n\n            if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\n                n = n.slice(wpr - 3, wpr + 1);\n\n                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n                // 4999, i.e. approaching a rounding boundary, continue the iteration.\n                if (s == wpr && n == '4999') {\n\n                    // On the first iteration only, check to see if rounding up gives the exact result as the\n                    // nines may infinitely repeat.\n                    round(t, pr + 1, 0);\n\n                    if (t.times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                } else if (n != '9999') {\n                    break;\n                }\n\n                wpr += 4;\n            }\n        }\n\n        external = true;\n\n        return round(r, pr);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.times = P.mul = function (y) {\n        var carry, e, i, k, r, rL, t, xdL, ydL,\n            x = this,\n            Ctor = x.constructor,\n            xd = x.d,\n            yd = (y = new Ctor(y)).d;\n\n        // Return 0 if either is 0.\n        if (!x.s || !y.s) return new Ctor(0);\n\n        y.s *= x.s;\n        e = x.e + y.e;\n        xdL = xd.length;\n        ydL = yd.length;\n\n        // Ensure xd points to the longer array.\n        if (xdL < ydL) {\n            r = xd;\n            xd = yd;\n            yd = r;\n            rL = xdL;\n            xdL = ydL;\n            ydL = rL;\n        }\n\n        // Initialise the result array with zeros.\n        r = [];\n        rL = xdL + ydL;\n        for (i = rL; i--;) r.push(0);\n\n        // Multiply!\n        for (i = ydL; --i >= 0;) {\n            carry = 0;\n            for (k = xdL + i; k > i;) {\n                t = r[k] + yd[i] * xd[k - i - 1] + carry;\n                r[k--] = t % BASE | 0;\n                carry = t / BASE | 0;\n            }\n\n            r[k] = (r[k] + carry) % BASE | 0;\n        }\n\n        // Remove trailing zeros.\n        for (; !r[--rL];) r.pop();\n\n        if (carry) ++e;\n        else r.shift();\n\n        y.d = r;\n        y.e = e;\n\n        return external ? round(y, Ctor.precision) : y;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\n     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\n     *\n     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toDecimalPlaces = P.todp = function (dp, rm) {\n        var x = this,\n            Ctor = x.constructor;\n\n        x = new Ctor(x);\n        if (dp === void 0) return x;\n\n        checkInt32(dp, 0, MAX_DIGITS);\n\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n\n        return round(x, dp + getBase10Exponent(x) + 1, rm);\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal in exponential notation rounded to\n     * `dp` fixed decimal places using rounding mode `rounding`.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toExponential = function (dp, rm) {\n        var str,\n            x = this,\n            Ctor = x.constructor;\n\n        if (dp === void 0) {\n            str = toString(x, true);\n        } else {\n            checkInt32(dp, 0, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n\n            x = round(new Ctor(x), dp + 1, rm);\n            str = toString(x, true, dp + 1);\n        }\n\n        return str;\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal in normal (fixed-point) notation to\n     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\n     * omitted.\n     *\n     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n     * (-0).toFixed(3) is '0.000'.\n     * (-0.5).toFixed(0) is '-0'.\n     *\n     */\n    P.toFixed = function (dp, rm) {\n        var str, y,\n            x = this,\n            Ctor = x.constructor;\n\n        if (dp === void 0) return toString(x);\n\n        checkInt32(dp, 0, MAX_DIGITS);\n\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n\n        y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\n        str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\n\n        // To determine whether to add the minus sign look at the value before it was rounded,\n        // i.e. look at `x` rather than `y`.\n        return x.isneg() && !x.isZero() ? '-' + str : str;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\n     * rounding mode `rounding`.\n     *\n     */\n    P.toInteger = P.toint = function () {\n        var x = this,\n            Ctor = x.constructor;\n        return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\n    };\n\n\n    /*\n     * Return the value of this Decimal converted to a number primitive.\n     *\n     */\n    P.toNumber = function () {\n        return +this;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\n     * truncated to `precision` significant digits.\n     *\n     * For non-integer or very large exponents pow(x, y) is calculated using\n     *\n     *   x^y = exp(y*ln(x))\n     *\n     * The maximum error is 1 ulp (unit in last place).\n     *\n     * y {number|string|Decimal} The power to which to raise this Decimal.\n     *\n     */\n    P.toPower = P.pow = function (y) {\n        var e, k, pr, r, sign, yIsInt,\n            x = this,\n            Ctor = x.constructor,\n            guard = 12,\n            yn = +(y = new Ctor(y));\n\n        // pow(x, 0) = 1\n        if (!y.s) return new Ctor(ONE);\n\n        x = new Ctor(x);\n\n        // pow(0, y > 0) = 0\n        // pow(0, y < 0) = Infinity\n        if (!x.s) {\n            if (y.s < 1) throw Error(decimalError + 'Infinity');\n            return x;\n        }\n\n        // pow(1, y) = 1\n        if (x.eq(ONE)) return x;\n\n        pr = Ctor.precision;\n\n        // pow(x, 1) = x\n        if (y.eq(ONE)) return round(x, pr);\n\n        e = y.e;\n        k = y.d.length - 1;\n        yIsInt = e >= k;\n        sign = x.s;\n\n        if (!yIsInt) {\n\n            // pow(x < 0, y non-integer) = NaN\n            if (sign < 0) throw Error(decimalError + 'NaN');\n\n            // If y is a small integer use the 'exponentiation by squaring' algorithm.\n        } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n            r = new Ctor(ONE);\n\n            // Max k of 9007199254740991 takes 53 loop iterations.\n            // Maximum digits array length; leaves [28, 34] guard digits.\n            e = Math.ceil(pr / LOG_BASE + 4);\n\n            external = false;\n\n            for (; ;) {\n                if (k % 2) {\n                    r = r.times(x);\n                    truncate(r.d, e);\n                }\n\n                k = mathfloor(k / 2);\n                if (k === 0) break;\n\n                x = x.times(x);\n                truncate(x.d, e);\n            }\n\n            external = true;\n\n            return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\n        }\n\n        // Result is negative if x is negative and the last digit of integer y is odd.\n        sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\n\n        x.s = 1;\n        external = false;\n        r = y.times(ln(x, pr + guard));\n        external = true;\n        r = exp(r);\n        r.s = sign;\n\n        return r;\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal rounded to `sd` significant digits\n     * using rounding mode `rounding`.\n     *\n     * Return exponential notation if `sd` is less than the number of digits necessary to represent\n     * the integer part of the value in normal notation.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toPrecision = function (sd, rm) {\n        var e, str,\n            x = this,\n            Ctor = x.constructor;\n\n        if (sd === void 0) {\n            e = getBase10Exponent(x);\n            str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n\n            x = round(new Ctor(x), sd, rm);\n            e = getBase10Exponent(x);\n            str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\n        }\n\n        return str;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\n     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\n     * omitted.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toDecimalPlaces = P.tosd = function (sd, rm) {\n        var x = this,\n            Ctor = x.constructor;\n\n        if (sd === void 0) {\n            sd = Ctor.precision;\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n        }\n\n        return round(new Ctor(x), sd, rm);\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal.\n     *\n     * Return exponential notation if this Decimal has a positive exponent equal to or greater than\n     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\n     *\n     */\n    P.toString = P.valueOf = P.val = P.toJSON = function () {\n        var x = this,\n            e = getBase10Exponent(x),\n            Ctor = x.constructor;\n\n        return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n    };\n\n\n    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n\n    /*\n     *  add                 P.minus, P.plus\n     *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\n     *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\n     *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\n     *  exp                 P.exp, P.pow\n     *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\n     *                      P.toString, divide, round, toString, exp, ln\n     *  getLn10             P.log, ln\n     *  getZeroString       digitsToString, toString\n     *  ln                  P.log, P.ln, P.pow, exp\n     *  parseDecimal        Decimal\n     *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\n     *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\n     *                      divide, getLn10, exp, ln\n     *  subtract            P.minus, P.plus\n     *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\n     *  truncate            P.pow\n     *\n     *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\n     *                      getLn10, exp, ln, parseDecimal, Decimal, config\n     */\n\n\n    function add(x, y) {\n        var carry, d, e, i, k, len, xd, yd,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // If either is zero...\n        if (!x.s || !y.s) {\n\n            // Return x if y is zero.\n            // Return y if y is non-zero.\n            if (!y.s) y = new Ctor(x);\n            return external ? round(y, pr) : y;\n        }\n\n        xd = x.d;\n        yd = y.d;\n\n        // x and y are finite, non-zero numbers with the same sign.\n\n        k = x.e;\n        e = y.e;\n        xd = xd.slice();\n        i = k - e;\n\n        // If base 1e7 exponents differ...\n        if (i) {\n            if (i < 0) {\n                d = xd;\n                i = -i;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = k;\n                len = xd.length;\n            }\n\n            // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n            k = Math.ceil(pr / LOG_BASE);\n            len = k > len ? k + 1 : len + 1;\n\n            if (i > len) {\n                i = len;\n                d.length = 1;\n            }\n\n            // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n            d.reverse();\n            for (; i--;) d.push(0);\n            d.reverse();\n        }\n\n        len = xd.length;\n        i = yd.length;\n\n        // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n        if (len - i < 0) {\n            i = len;\n            d = yd;\n            yd = xd;\n            xd = d;\n        }\n\n        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n        for (carry = 0; i;) {\n            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n            xd[i] %= BASE;\n        }\n\n        if (carry) {\n            xd.unshift(carry);\n            ++e;\n        }\n\n        // Remove trailing zeros.\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n        y.d = xd;\n        y.e = e;\n\n        return external ? round(y, pr) : y;\n    }\n\n\n    function checkInt32(i, min, max) {\n        if (i !== ~~i || i < min || i > max) {\n            throw Error(invalidArgument + i);\n        }\n    }\n\n\n    function digitsToString(d) {\n        var i, k, ws,\n            indexOfLastWord = d.length - 1,\n            str = '',\n            w = d[0];\n\n        if (indexOfLastWord > 0) {\n            str += w;\n            for (i = 1; i < indexOfLastWord; i++) {\n                ws = d[i] + '';\n                k = LOG_BASE - ws.length;\n                if (k) str += getZeroString(k);\n                str += ws;\n            }\n\n            w = d[i];\n            ws = w + '';\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n        } else if (w === 0) {\n            return '0';\n        }\n\n        // Remove trailing zeros of last w.\n        for (; w % 10 === 0;) w /= 10;\n\n        return str + w;\n    }\n\n\n    var divide = (function () {\n\n        // Assumes non-zero x and k, and hence non-zero result.\n        function multiplyInteger(x, k) {\n            var temp,\n                carry = 0,\n                i = x.length;\n\n            for (x = x.slice(); i--;) {\n                temp = x[i] * k + carry;\n                x[i] = temp % BASE | 0;\n                carry = temp / BASE | 0;\n            }\n\n            if (carry) x.unshift(carry);\n\n            return x;\n        }\n\n        function compare(a, b, aL, bL) {\n            var i, r;\n\n            if (aL != bL) {\n                r = aL > bL ? 1 : -1;\n            } else {\n                for (i = r = 0; i < aL; i++) {\n                    if (a[i] != b[i]) {\n                        r = a[i] > b[i] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n\n            return r;\n        }\n\n        function subtract(a, b, aL) {\n            var i = 0;\n\n            // Subtract b from a.\n            for (; aL--;) {\n                a[aL] -= i;\n                i = a[aL] < b[aL] ? 1 : 0;\n                a[aL] = i * BASE + a[aL] - b[aL];\n            }\n\n            // Remove leading zeros.\n            for (; !a[0] && a.length > 1;) a.shift();\n        }\n\n        return function (x, y, pr, dp) {\n            var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\n                Ctor = x.constructor,\n                sign = x.s == y.s ? 1 : -1,\n                xd = x.d,\n                yd = y.d;\n\n            // Either 0?\n            if (!x.s) return new Ctor(x);\n            if (!y.s) throw Error(decimalError + 'Division by zero');\n\n            e = x.e - y.e;\n            yL = yd.length;\n            xL = xd.length;\n            q = new Ctor(sign);\n            qd = q.d = [];\n\n            // Result exponent may be one less than e.\n            for (i = 0; yd[i] == (xd[i] || 0);) ++i;\n            if (yd[i] > (xd[i] || 0)) --e;\n\n            if (pr == null) {\n                sd = pr = Ctor.precision;\n            } else if (dp) {\n                sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\n            } else {\n                sd = pr;\n            }\n\n            if (sd < 0) return new Ctor(0);\n\n            // Convert precision in number of base 10 digits to base 1e7 digits.\n            sd = sd / LOG_BASE + 2 | 0;\n            i = 0;\n\n            // divisor < 1e7\n            if (yL == 1) {\n                k = 0;\n                yd = yd[0];\n                sd++;\n\n                // k is the carry.\n                for (; (i < xL || k) && sd--; i++) {\n                    t = k * BASE + (xd[i] || 0);\n                    qd[i] = t / yd | 0;\n                    k = t % yd | 0;\n                }\n\n                // divisor >= 1e7\n            } else {\n\n                // Normalise xd and yd so highest order digit of yd is >= BASE/2\n                k = BASE / (yd[0] + 1) | 0;\n\n                if (k > 1) {\n                    yd = multiplyInteger(yd, k);\n                    xd = multiplyInteger(xd, k);\n                    yL = yd.length;\n                    xL = xd.length;\n                }\n\n                xi = yL;\n                rem = xd.slice(0, yL);\n                remL = rem.length;\n\n                // Add zeros to make remainder as long as divisor.\n                for (; remL < yL;) rem[remL++] = 0;\n\n                yz = yd.slice();\n                yz.unshift(0);\n                yd0 = yd[0];\n\n                if (yd[1] >= BASE / 2) ++yd0;\n\n                do {\n                    k = 0;\n\n                    // Compare divisor and remainder.\n                    cmp = compare(yd, rem, yL, remL);\n\n                    // If divisor < remainder.\n                    if (cmp < 0) {\n\n                        // Calculate trial digit, k.\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\n\n                        // k will be how many times the divisor goes into the current remainder.\n                        k = rem0 / yd0 | 0;\n\n                        //  Algorithm:\n                        //  1. product = divisor * trial digit (k)\n                        //  2. if product > remainder: product -= divisor, k--\n                        //  3. remainder -= product\n                        //  4. if product was < remainder at 2:\n                        //    5. compare new remainder and divisor\n                        //    6. If remainder > divisor: remainder -= divisor, k++\n\n                        if (k > 1) {\n                            if (k >= BASE) k = BASE - 1;\n\n                            // product = divisor * trial digit.\n                            prod = multiplyInteger(yd, k);\n                            prodL = prod.length;\n                            remL = rem.length;\n\n                            // Compare product and remainder.\n                            cmp = compare(prod, rem, prodL, remL);\n\n                            // product > remainder.\n                            if (cmp == 1) {\n                                k--;\n\n                                // Subtract divisor from product.\n                                subtract(prod, yL < prodL ? yz : yd, prodL);\n                            }\n                        } else {\n\n                            // cmp is -1.\n                            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                            if (k == 0) cmp = k = 1;\n                            prod = yd.slice();\n                        }\n\n                        prodL = prod.length;\n                        if (prodL < remL) prod.unshift(0);\n\n                        // Subtract product from remainder.\n                        subtract(rem, prod, remL);\n\n                        // If product was < previous remainder.\n                        if (cmp == -1) {\n                            remL = rem.length;\n\n                            // Compare divisor and new remainder.\n                            cmp = compare(yd, rem, yL, remL);\n\n                            // If divisor < new remainder, subtract divisor from remainder.\n                            if (cmp < 1) {\n                                k++;\n\n                                // Subtract divisor from remainder.\n                                subtract(rem, yL < remL ? yz : yd, remL);\n                            }\n                        }\n\n                        remL = rem.length;\n                    } else if (cmp === 0) {\n                        k++;\n                        rem = [0];\n                    }    // if cmp === 1, k will be 0\n\n                    // Add the next digit, k, to the result array.\n                    qd[i++] = k;\n\n                    // Update the remainder.\n                    if (cmp && rem[0]) {\n                        rem[remL++] = xd[xi] || 0;\n                    } else {\n                        rem = [xd[xi]];\n                        remL = 1;\n                    }\n\n                } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n            }\n\n            // Leading zero?\n            if (!qd[0]) qd.shift();\n\n            q.e = e;\n\n            return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\n        };\n    })();\n\n\n    /*\n     * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\n     * significant digits.\n     *\n     * Taylor/Maclaurin series.\n     *\n     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\n     *\n     * Argument reduction:\n     *   Repeat x = x / 32, k += 5, until |x| < 0.1\n     *   exp(x) = exp(x / 2^k)^(2^k)\n     *\n     * Previously, the argument was initially reduced by\n     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\n     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\n     * found to be slower than just dividing repeatedly by 32 as above.\n     *\n     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\n     *\n     *  exp(x) is non-terminating for any finite, non-zero x.\n     *\n     */\n    function exp(x, sd) {\n        var denominator, guard, pow, sum, t, wpr,\n            i = 0,\n            k = 0,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\n\n        // exp(0) = 1\n        if (!x.s) return new Ctor(ONE);\n\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n\n        t = new Ctor(0.03125);\n\n        while (x.abs().gte(0.1)) {\n            x = x.times(t);    // x = x / 2^5\n            k += 5;\n        }\n\n        // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\n        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n        wpr += guard;\n        denominator = pow = sum = new Ctor(ONE);\n        Ctor.precision = wpr;\n\n        for (; ;) {\n            pow = round(pow.times(x), wpr);\n            denominator = denominator.times(++i);\n            t = sum.plus(divide(pow, denominator, wpr));\n\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                while (k--) sum = round(sum.times(sum), wpr);\n                Ctor.precision = pr;\n                return sd == null ? (external = true, round(sum, pr)) : sum;\n            }\n\n            sum = t;\n        }\n    }\n\n\n    // Calculate the base 10 exponent from the base 1e7 exponent.\n    function getBase10Exponent(x) {\n        var e = x.e * LOG_BASE,\n            w = x.d[0];\n\n        // Add the number of digits of the first word of the digits array.\n        for (; w >= 10; w /= 10) e++;\n        return e;\n    }\n\n\n    function getLn10(Ctor, sd, pr) {\n\n        if (sd > Ctor.LN10.sd()) {\n\n\n            // Reset global state in case the exception is caught.\n            external = true;\n            if (pr) Ctor.precision = pr;\n            throw Error(decimalError + 'LN10 precision limit exceeded');\n        }\n\n        return round(new Ctor(Ctor.LN10), sd);\n    }\n\n\n    function getZeroString(k) {\n        var zs = '';\n        for (; k--;) zs += '0';\n        return zs;\n    }\n\n\n    /*\n     * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\n     * digits.\n     *\n     *  ln(n) is non-terminating (n != 1)\n     *\n     */\n    function ln(y, sd) {\n        var c, c0, denominator, e, numerator, sum, t, wpr, x2,\n            n = 1,\n            guard = 10,\n            x = y,\n            xd = x.d,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // ln(-x) = NaN\n        // ln(0) = -Infinity\n        if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n        // ln(1) = 0\n        if (x.eq(ONE)) return new Ctor(0);\n\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n\n        if (x.eq(10)) {\n            if (sd == null) external = true;\n            return getLn10(Ctor, wpr);\n        }\n\n        wpr += guard;\n        Ctor.precision = wpr;\n        c = digitsToString(xd);\n        c0 = c.charAt(0);\n        e = getBase10Exponent(x);\n\n        if (Math.abs(e) < 1.5e15) {\n\n            // Argument reduction.\n            // The series converges faster the closer the argument is to 1, so using\n            // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n            // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n            // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n            // later be divided by this number, then separate out the power of 10 using\n            // ln(a*10^b) = ln(a) + b*ln(10).\n\n            // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n            //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n            // max n is 6 (gives 0.7 - 1.3)\n            while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n                x = x.times(y);\n                c = digitsToString(x.d);\n                c0 = c.charAt(0);\n                n++;\n            }\n\n            e = getBase10Exponent(x);\n\n            if (c0 > 1) {\n                x = new Ctor('0.' + c);\n                e++;\n            } else {\n                x = new Ctor(c0 + '.' + c.slice(1));\n            }\n        } else {\n\n            // The argument reduction method above may result in overflow if the argument y is a massive\n            // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n            // function using ln(x*10^e) = ln(x) + e*ln(10).\n            t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n            x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n\n            Ctor.precision = pr;\n            return sd == null ? (external = true, round(x, pr)) : x;\n        }\n\n        // x is reduced to a value near 1.\n\n        // Taylor series.\n        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n        // where x = (y - 1)/(y + 1)    (|x| < 1)\n        sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\n        x2 = round(x.times(x), wpr);\n        denominator = 3;\n\n        for (; ;) {\n            numerator = round(numerator.times(x2), wpr);\n            t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\n\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                sum = sum.times(2);\n\n                // Reverse the argument reduction.\n                if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n                sum = divide(sum, new Ctor(n), wpr);\n\n                Ctor.precision = pr;\n                return sd == null ? (external = true, round(sum, pr)) : sum;\n            }\n\n            sum = t;\n            denominator += 2;\n        }\n    }\n\n\n    /*\n     * Parse the value of a new Decimal `x` from string `str`.\n     */\n    function parseDecimal(x, str) {\n        var e, i, len;\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n        } else if (e < 0) {\n\n            // Integer.\n            e = str.length;\n        }\n\n        // Determine leading zeros.\n        for (i = 0; str.charCodeAt(i) === 48;) ++i;\n\n        // Determine trailing zeros.\n        for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\n        str = str.slice(i, len);\n\n        if (str) {\n            len -= i;\n            e = e - i - 1;\n            x.e = mathfloor(e / LOG_BASE);\n            x.d = [];\n\n            // Transform base\n\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first word of the digits array.\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE;\n\n            if (i < len) {\n                if (i) x.d.push(+str.slice(0, i));\n                for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n                str = str.slice(i);\n                i = LOG_BASE - str.length;\n            } else {\n                i -= len;\n            }\n\n            for (; i--;) str += '0';\n            x.d.push(+str);\n\n            if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\n        } else {\n\n            // Zero.\n            x.s = 0;\n            x.e = 0;\n            x.d = [0];\n        }\n\n        return x;\n    }\n\n\n    /*\n     * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\n     */\n    function round(x, sd, rm) {\n        var i, j, k, n, rd, doRound, w, xdi,\n            xd = x.d;\n\n        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // w: the word of xd which contains the rounding digit, a base 1e7 number.\n        // xdi: the index of w within xd.\n        // n: the number of digits of w.\n        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n        // they had leading zeros)\n        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n        // Get the length of the first word of the digits array xd.\n        for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\n        i = sd - n;\n\n        // Is the rounding digit in the first word of xd?\n        if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n        } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) return x;\n            w = k = xd[xdi];\n\n            // Get the number of digits of w.\n            for (n = 1; k >= 10; k /= 10) n++;\n\n            // Get the index of rd within w.\n            i %= LOG_BASE;\n\n            // Get the index of rd within w, adjusted for leading zeros.\n            // The number of leading zeros of w is given by LOG_BASE - n.\n            j = i - LOG_BASE + n;\n        }\n\n        if (rm !== void 0) {\n            k = mathpow(10, n - j - 1);\n\n            // Get the rounding digit at index j of w.\n            rd = w / k % 10 | 0;\n\n            // Are there any non-zero digits after the rounding digit?\n            doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\n\n            // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\n            // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\n            // 714.\n\n            doRound = rm < 4\n                ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\n\n                    // Check whether the digit to the left of the rounding digit is odd.\n                    ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n        }\n\n        if (sd < 1 || !xd[0]) {\n            if (doRound) {\n                k = getBase10Exponent(x);\n                xd.length = 1;\n\n                // Convert sd to decimal places.\n                sd = sd - k - 1;\n\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                x.e = mathfloor(-sd / LOG_BASE) || 0;\n            } else {\n                xd.length = 1;\n\n                // Zero.\n                xd[0] = x.e = x.s = 0;\n            }\n\n            return x;\n        }\n\n        // Remove excess digits.\n        if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n        } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of w.\n            xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\n        }\n\n        if (doRound) {\n            for (; ;) {\n\n                // Is the digit to be rounded up in the first word of xd?\n                if (xdi == 0) {\n                    if ((xd[0] += k) == BASE) {\n                        xd[0] = 1;\n                        ++x.e;\n                    }\n\n                    break;\n                } else {\n                    xd[xdi] += k;\n                    if (xd[xdi] != BASE) break;\n                    xd[xdi--] = 0;\n                    k = 1;\n                }\n            }\n        }\n\n        // Remove trailing zeros.\n        for (i = xd.length; xd[--i] === 0;) xd.pop();\n\n        if (external && (x.e > MAX_E || x.e < -MAX_E)) {\n            throw Error(exponentOutOfRange + getBase10Exponent(x));\n        }\n\n        return x;\n    }\n\n\n    function subtract(x, y) {\n        var d, e, i, j, k, len, xd, xe, xLTy, yd,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // Return y negated if x is zero.\n        // Return x if y is zero and x is non-zero.\n        if (!x.s || !y.s) {\n            if (y.s) y.s = -y.s;\n            else y = new Ctor(x);\n            return external ? round(y, pr) : y;\n        }\n\n        xd = x.d;\n        yd = y.d;\n\n        // x and y are non-zero numbers with the same sign.\n\n        e = y.e;\n        xe = x.e;\n        xd = xd.slice();\n        k = xe - e;\n\n        // If exponents differ...\n        if (k) {\n            xLTy = k < 0;\n\n            if (xLTy) {\n                d = xd;\n                k = -k;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = xe;\n                len = xd.length;\n            }\n\n            // Numbers with massively different exponents would result in a very high number of zeros\n            // needing to be prepended, but this can be avoided while still ensuring correct rounding by\n            // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n            if (k > i) {\n                k = i;\n                d.length = 1;\n            }\n\n            // Prepend zeros to equalise exponents.\n            d.reverse();\n            for (i = k; i--;) d.push(0);\n            d.reverse();\n\n            // Base 1e7 exponents equal.\n        } else {\n\n            // Check digits to determine which is the bigger number.\n\n            i = xd.length;\n            len = yd.length;\n            xLTy = i < len;\n            if (xLTy) len = i;\n\n            for (i = 0; i < len; i++) {\n                if (xd[i] != yd[i]) {\n                    xLTy = xd[i] < yd[i];\n                    break;\n                }\n            }\n\n            k = 0;\n        }\n\n        if (xLTy) {\n            d = xd;\n            xd = yd;\n            yd = d;\n            y.s = -y.s;\n        }\n\n        len = xd.length;\n\n        // Append zeros to xd if shorter.\n        // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\n        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n        // Subtract yd from xd.\n        for (i = yd.length; i > k;) {\n            if (xd[--i] < yd[i]) {\n                for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n                --xd[j];\n                xd[i] += BASE;\n            }\n\n            xd[i] -= yd[i];\n        }\n\n        // Remove trailing zeros.\n        for (; xd[--len] === 0;) xd.pop();\n\n        // Remove leading zeros and adjust exponent accordingly.\n        for (; xd[0] === 0; xd.shift()) --e;\n\n        // Zero?\n        if (!xd[0]) return new Ctor(0);\n\n        y.d = xd;\n        y.e = e;\n\n        //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\n        return external ? round(y, pr) : y;\n    }\n\n\n    function toString(x, isExp, sd) {\n        var k,\n            e = getBase10Exponent(x),\n            str = digitsToString(x.d),\n            len = str.length;\n\n        if (isExp) {\n            if (sd && (k = sd - len) > 0) {\n                str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n            } else if (len > 1) {\n                str = str.charAt(0) + '.' + str.slice(1);\n            }\n\n            str = str + (e < 0 ? 'e' : 'e+') + e;\n        } else if (e < 0) {\n            str = '0.' + getZeroString(-e - 1) + str;\n            if (sd && (k = sd - len) > 0) str += getZeroString(k);\n        } else if (e >= len) {\n            str += getZeroString(e + 1 - len);\n            if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n        } else {\n            if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n            if (sd && (k = sd - len) > 0) {\n                if (e + 1 === len) str += '.';\n                str += getZeroString(k);\n            }\n        }\n\n        return x.s < 0 ? '-' + str : str;\n    }\n\n\n    // Does not strip trailing zeros.\n    function truncate(arr, len) {\n        if (arr.length > len) {\n            arr.length = len;\n            return true;\n        }\n    }\n\n\n    // Decimal methods\n\n\n    /*\n     *  clone\n     *  config/set\n     */\n\n\n    /*\n     * Create and return a Decimal constructor with the same configuration properties as this Decimal\n     * constructor.\n     *\n     */\n    function clone(obj) {\n        var i, p, ps;\n\n        /*\n         * The Decimal constructor and exported function.\n         * Return a new Decimal instance.\n         *\n         * value {number|string|Decimal} A numeric value.\n         *\n         */\n        function Decimal(value) {\n            var x = this;\n\n            // Decimal called without new.\n            if (!(x instanceof Decimal)) return new Decimal(value);\n\n            // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n            // which points to Object.\n            x.constructor = Decimal;\n\n            // Duplicate.\n            if (value instanceof Decimal) {\n                x.s = value.s;\n                x.e = value.e;\n                x.d = (value = value.d) ? value.slice() : value;\n                return;\n            }\n\n            if (typeof value === 'number') {\n\n                // Reject Infinity/NaN.\n                if (value * 0 !== 0) {\n                    throw Error(invalidArgument + value);\n                }\n\n                if (value > 0) {\n                    x.s = 1;\n                } else if (value < 0) {\n                    value = -value;\n                    x.s = -1;\n                } else {\n                    x.s = 0;\n                    x.e = 0;\n                    x.d = [0];\n                    return;\n                }\n\n                // Fast path for small integers.\n                if (value === ~~value && value < 1e7) {\n                    x.e = 0;\n                    x.d = [value];\n                    return;\n                }\n\n                return parseDecimal(x, value.toString());\n            } else if (typeof value !== 'string') {\n                throw Error(invalidArgument + value);\n            }\n\n            // Minus sign?\n            if (value.charCodeAt(0) === 45) {\n                value = value.slice(1);\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n\n            if (isDecimal.test(value)) parseDecimal(x, value);\n            else throw Error(invalidArgument + value);\n        }\n\n        Decimal.prototype = P;\n\n        Decimal.ROUND_UP = 0;\n        Decimal.ROUND_DOWN = 1;\n        Decimal.ROUND_CEIL = 2;\n        Decimal.ROUND_FLOOR = 3;\n        Decimal.ROUND_HALF_UP = 4;\n        Decimal.ROUND_HALF_DOWN = 5;\n        Decimal.ROUND_HALF_EVEN = 6;\n        Decimal.ROUND_HALF_CEIL = 7;\n        Decimal.ROUND_HALF_FLOOR = 8;\n\n        Decimal.clone = clone;\n        Decimal.config = Decimal.set = config;\n\n        if (obj === void 0) obj = {};\n        if (obj) {\n            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\n            for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n\n        Decimal.config(obj);\n\n        return Decimal;\n    }\n\n\n    /*\n     * Configure global settings for a Decimal constructor.\n     *\n     * `obj` is an object with one or more of the following properties,\n     *\n     *   precision  {number}\n     *   rounding   {number}\n     *   toExpNeg   {number}\n     *   toExpPos   {number}\n     *\n     * E.g. Decimal.config({ precision: 20, rounding: 4 })\n     *\n     */\n    function config(obj) {\n        if (!obj || typeof obj !== 'object') {\n            throw Error(decimalError + 'Object expected');\n        }\n        var i, p, v,\n            ps = [\n                'precision', 1, MAX_DIGITS,\n                'rounding', 0, 8,\n                'toExpNeg', -1 / 0, 0,\n                'toExpPos', 0, 1 / 0\n            ];\n\n        for (i = 0; i < ps.length; i += 3) {\n            if ((v = obj[p = ps[i]]) !== void 0) {\n                if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n                else throw Error(invalidArgument + p + ': ' + v);\n            }\n        }\n\n        if ((v = obj[p = 'LN10']) !== void 0) {\n            if (v == Math.LN10) this[p] = new this(v);\n            else throw Error(invalidArgument + p + ': ' + v);\n        }\n\n        return this;\n    }\n\n\n    // Create and configure initial Decimal constructor.\n    Decimal = clone(Decimal);\n\n    Decimal['default'] = Decimal.Decimal = Decimal;\n\n    // Internal constant.\n    ONE = new Decimal(1);\n\n\n    // Export.\n\n\n    // AMD.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n            return Decimal;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n        // Node and other environments that support module.exports.\n    } else {}\n})(this);\n\n//# sourceURL=webpack:///./Decimal/Decimal.js?");

/***/ }),

/***/ "./SvgPathEditor/Arguments/ArgumentA.js":
/*!**********************************************!*\
  !*** ./SvgPathEditor/Arguments/ArgumentA.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArgumentA: () => (/* binding */ ArgumentA)\n/* harmony export */ });\n/* harmony import */ var _SvgPathEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SvgPathEditor */ \"./SvgPathEditor/SvgPathEditor.js\");\n/* harmony import */ var _Coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Coordinate */ \"./SvgPathEditor/Arguments/Coordinate.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Decimal/Decimal */ \"./Decimal/Decimal.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nclass ArgumentA {\n    /** @type {Coordinate} */\n    #radius;\n\n    /** @type {import(\"../../Decimal/Decimal\").Decimal} */\n    #xAxisRotation\n\n    /** @type {boolean} */\n    #largeArcFlag\n\n    /** @type {boolean} */\n    #sweepFlag\n\n    /** @type {Coordinate} */\n    #position;\n\n\n    /** @type {SvgPathEditor} */\n    #editor;\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} radius\n     * @param {import(\"../../Decimal/Decimal\").Decimal} xAxisRotation\n     * @param {boolean} largeArcFlag\n     * @param {boolean} sweepFlag\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} position\n     * @param {SvgPathEditor} editor\n     */\n    constructor(radius, xAxisRotation, largeArcFlag, sweepFlag, position, editor) {\n        this.#radius = new _Coordinate__WEBPACK_IMPORTED_MODULE_1__.Coordinate(radius, editor);\n        this.#xAxisRotation = xAxisRotation;\n        this.#largeArcFlag = largeArcFlag;\n        this.#sweepFlag = sweepFlag;\n        this.#position = new _Coordinate__WEBPACK_IMPORTED_MODULE_1__.Coordinate(position, editor);\n        this.#editor = editor;\n    }\n\n\n    /** @returns {string} */\n    getCapitalLetter() { return \"A\"; }\n\n    /** @returns {string} */\n    getSmallLetter() { return \"a\"; }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    translate(x, y) {\n        this.#position.translate(x, y);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} cos\n     * @param {import(\"../../Decimal/Decimal\").Decimal} sin\n     */\n    rotate(cos, sin) {\n        this.#position.rotate(cos, sin);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    scale(x, y) {\n        this.#radius.scale(x, y);\n        this.#position.scale(x, y);\n    }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toAbsoluteCoordinates(current) {\n        current.x = this.#position.getValue().x;\n        current.y = this.#position.getValue().y;\n        return `A ${this.#radius.getValue().x} ${this.#radius.getValue().y} ${this.#xAxisRotation} ${this.#largeArcFlag ? 1 : 0} ${this.#sweepFlag ? 1 : 0} ${this.#position.getValue().x} ${this.#position.getValue().y}`;\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toRelativeCoordinates(current) {\n        const result = `a ${this.#radius.getValue().x} ${this.#radius.getValue().y} ${this.#xAxisRotation} ${this.#largeArcFlag ? 1 : 0} ${this.#sweepFlag ? 1 : 0} ${this.#position.getValue().x.minus(current.x)} ${this.#position.getValue().y.minus(current.y)}`;\n\n        current.x = this.#position.getValue().x;\n        current.y = this.#position.getValue().y;\n\n        return result;\n    }\n\n\n    // input elements\n\n    /** @type {HTMLDivElement | null} */\n    #inputDiv = null;\n\n    /** @param {HTMLDivElement} argumentDiv */\n    createInputs(argumentDiv) {\n        this.#radius.createInputPair(argumentDiv);\n\n        this.#inputDiv = document.createElement(\"div\");\n        {\n            const inputXAxisRotation = document.createElement(\"input\");\n            {\n                inputXAxisRotation.value = this.#xAxisRotation.toString();\n                inputXAxisRotation.oninput = this.#onInputXAxisRotation;\n            }\n            this.#inputDiv.appendChild(inputXAxisRotation);\n\n            const inputLargeArcFlag = document.createElement(\"input\");\n            {\n                inputLargeArcFlag.type = \"checkbox\";\n                inputLargeArcFlag.checked = this.#largeArcFlag;\n                inputLargeArcFlag.oninput = this.#onInputLargeArcFlag;\n            }\n            this.#inputDiv.appendChild(inputLargeArcFlag);\n\n            const inputSweepFlag = document.createElement(\"input\");\n            {\n                inputSweepFlag.type = \"checkbox\";\n                inputSweepFlag.checked = this.#sweepFlag;\n                inputSweepFlag.oninput = this.#onInputSweepFlag;\n            }\n            this.#inputDiv.appendChild(inputSweepFlag);\n        }\n        argumentDiv.appendChild(this.#inputDiv);\n\n        this.#position.createInputPair(argumentDiv);\n    }\n\n    /** */\n    removeInputs() {\n        this.#position.removeInputPair();\n\n        const parantDiv = /** @type {HTMLDivElement} */(/** @type {HTMLDivElement} */(this.#inputDiv).parentElement);\n        parantDiv.removeChild(/** @type {ChildNode} */(parantDiv.lastChild));\n        this.#inputDiv = null;\n\n        this.#radius.removeInputPair();\n    }\n\n    /** @param {Event} event */\n    #onInputXAxisRotation = (event) => {\n        try {\n            this.#xAxisRotation = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2___default())(/** @type {HTMLInputElement} */(event.target).value);\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    };\n\n    /** @param {Event} event */\n    #onInputLargeArcFlag = (event) => {\n        this.#largeArcFlag = /** @type {HTMLInputElement} */(event.target).checked;\n        this.#editor.renderPath();\n    };\n\n    /** @param {Event} event */\n    #onInputSweepFlag = (event) => {\n        this.#sweepFlag = /** @type {HTMLInputElement} */(event.target).checked;\n        this.#editor.renderPath();\n    }\n\n\n    /** */\n    createDots() {\n        this.#radius.createDot(1);\n        this.#position.createDot(0);\n    }\n\n    /** */\n    updateDotsRadius() {\n        this.#radius.updateDotRadius();\n        this.#position.updateDotRadius();\n    }\n\n    /** */\n    removeDots() {\n        this.#position.removeDot();\n        this.#radius.removeDot();\n    }\n}\n\n\n//# sourceURL=webpack:///./SvgPathEditor/Arguments/ArgumentA.js?");

/***/ }),

/***/ "./SvgPathEditor/Arguments/ArgumentZ.js":
/*!**********************************************!*\
  !*** ./SvgPathEditor/Arguments/ArgumentZ.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArgumentZ: () => (/* binding */ ArgumentZ)\n/* harmony export */ });\nclass ArgumentZ {\n    /** @returns {string} */\n    getCapitalLetter() { return \"Z\"; }\n\n    /** @returns {string} */\n    getSmallLetter() { return \"z\"; }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    translate(x, y) { }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} cos\n     * @param {import(\"../../Decimal/Decimal\").Decimal} sin\n     */\n    rotate(cos, sin) { }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    scale(x, y) { }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toAbsoluteCoordinates(current) {\n        return this.getCapitalLetter();\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toRelativeCoordinates(current) {\n        return this.getSmallLetter();\n    }\n\n\n    /** @type {HTMLInputElement} */\n    #dotsVisibleInput;\n\n    /** @param {HTMLDivElement} argumentDiv */\n    createInputs(argumentDiv) {\n        this.#dotsVisibleInput = /** @type {HTMLInputElement} */(argumentDiv.lastChild);\n        this.#dotsVisibleInput.style.display = \"none\";\n    }\n\n    /** */\n    removeInputs() {\n        this.#dotsVisibleInput.style.removeProperty(\"display\");\n    }\n\n\n    /** */\n    createDots() { }\n\n    /** */\n    updateDotsRadius() { }\n\n    /** */\n    removeDots() { }\n}\n\n\n//# sourceURL=webpack:///./SvgPathEditor/Arguments/ArgumentZ.js?");

/***/ }),

/***/ "./SvgPathEditor/Arguments/Coordinate.js":
/*!***********************************************!*\
  !*** ./SvgPathEditor/Arguments/Coordinate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coordinate: () => (/* binding */ Coordinate)\n/* harmony export */ });\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Decimal/Decimal */ \"./Decimal/Decimal.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _SvgPathEditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SvgPathEditor */ \"./SvgPathEditor/SvgPathEditor.js\");\n\n\n\nclass Coordinate {\n    /** \"p\" is shorthand for point\n     * @type {import(\"../../Decimal/Decimal\").Coordinate}\n     **/\n    #p;\n\n    /** @type {SvgPathEditor} */\n    #editor;\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} p\n     * @param {SvgPathEditor} editor\n     */\n    constructor(p, editor) {\n        this.#p = p;\n        this.#editor = editor;\n    }\n\n    /**\n     * @returns {import(\"../../Decimal/Decimal\").Coordinate}\n     */\n    getValue() {\n        return this.#p;\n    }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    translate(x, y) {\n        this.#p.x = this.#p.x.plus(x);\n        this.#p.y = this.#p.y.plus(y);\n\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).firstChild).value = this.#p.x.toString();\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).lastChild).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} cos\n     * @param {import(\"../../Decimal/Decimal\").Decimal} sin\n     */\n    rotate(cos, sin) {\n        const x = cos.mul(this.#p.x).minus(sin.mul(this.#p.y)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        const y = sin.mul(this.#p.x).plus(cos.mul(this.#p.y)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        this.#p.x = x;\n        this.#p.y = y;\n\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).firstChild).value = this.#p.x.toString();\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).lastChild).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    scale(x, y) {\n        this.#p.x = this.#p.x.mul(x);\n        this.#p.y = this.#p.y.mul(y);\n\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).firstChild).value = this.#p.x.toString();\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).lastChild).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n\n\n    // input elements\n\n    /** @type {HTMLDivElement | null} */\n    #pDiv = null;\n\n\n    /** component:\n     * <div>\n     *     <input>\n     *     <input>\n     * </div>\n     * @param {HTMLDivElement} argumentDiv\n     */\n    createInputPair(argumentDiv) {\n        this.#pDiv = document.createElement(\"div\");\n        {\n            const inputX = document.createElement(\"input\");\n            {\n                inputX.value = this.#p.x.toString();\n                inputX.oninput = this.#oninputX;\n            }\n            this.#pDiv.appendChild(inputX);\n\n            const inputY = document.createElement(\"input\");\n            {\n                inputY.value = this.#p.y.toString();\n                inputY.oninput = this.#oninputY;\n            }\n            this.#pDiv.appendChild(inputY);\n        }\n        argumentDiv.appendChild(this.#pDiv);\n    }\n\n    /** */\n    removeInputPair() {\n        const parantDiv = /** @type {HTMLDivElement} */(/** @type {HTMLDivElement} */(this.#pDiv).parentElement);\n        parantDiv.removeChild(/** @type {ChildNode} */(parantDiv.lastChild));\n        this.#pDiv = null;\n    }\n\n\n    /** @param {Event} event */\n    #oninputX = (event) => {\n        try {\n            this.#p.x = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(/** @type {HTMLInputElement} */(event.target).value);\n            this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n    /** @param {Event} event */\n    #oninputY = (event) => {\n        try {\n            this.#p.y = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(/** @type {HTMLInputElement} */(event.target).value);\n            this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n\n\n    // circle dots\n\n    /** @type {SVGCircleElement | null} */\n    #pDot = null;\n\n\n    /** component:\n     * <circle cx=\"p.x\" cy=\"p.y\" r=\"circleRadius\" fill=\"color\" stroke-width=\"0\" style=\"cursor: grab|grabbing;\" />\n     * @param {number} colorIndex\n     */\n    createDot(colorIndex) {\n        const colors = [\"blue\", \"green\", \"yellow\", \"red\", \"purple\", \"brown\"];\n        const color = colors[colorIndex % colors.length]\n\n        this.#pDot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        {\n            this.#pDot.setAttribute(\"cx\", this.#p.x.toString());\n            this.#pDot.setAttribute(\"cy\", this.#p.y.toString());\n            this.#pDot.setAttribute(\"r\", this.#editor.circleRadius.toString());\n\n            this.#pDot.setAttribute(\"fill\", color);\n            this.#pDot.setAttribute(\"stroke-width\", \"0\");\n            this.#pDot.style.cursor = \"grab\";\n\n            this.#pDot.onpointerdown = this.#dotPointerDown;\n        }\n        this.#editor.svg.appendChild(this.#pDot);\n    }\n\n    /** */\n    updateDotRadius() {\n        this.#pDot?.setAttribute(\"r\", this.#editor.circleRadius.toString());\n    }\n\n    /** */\n    removeDot() {\n        if (this.#pDot === null)\n            return;\n\n        const parantSvg = /** @type {HTMLElement} */(this.#pDot.parentElement);\n        parantSvg.removeChild(this.#pDot);\n\n        this.#pDot = null;\n    }\n\n\n    #dragCoordinateX = 0;\n    #dragCoordinateY = 0;\n\n    /** @param {PointerEvent} event */\n    #dotPointerDown = (event) => {\n        /** @type {SVGCircleElement} */(this.#pDot).style.cursor = \"grabbing\";\n        /** @type {SVGCircleElement} */(this.#pDot).setPointerCapture(event.pointerId);\n\n        this.#dragCoordinateX = event.clientX;\n        this.#dragCoordinateY = event.clientY;\n\n        /** @type {SVGCircleElement} */(this.#pDot).onpointermove = this.#dotPointerMove;\n        /** @type {SVGCircleElement} */(this.#pDot).onpointerup = this.#dotPointerUp;\n    }\n\n    /** @param {PointerEvent} event */\n    #dotPointerMove = (event) => {\n        const dx = event.clientX - this.#dragCoordinateX;\n        const dy = event.clientY - this.#dragCoordinateY;\n        this.#dragCoordinateX = event.clientX;\n        this.#dragCoordinateY = event.clientY;\n\n        this.#p.x = this.#p.x.plus(new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(dx / this.#editor.svg.clientWidth * this.#editor.viewBoxWidth)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        this.#p.y = this.#p.y.plus(new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(dy / this.#editor.svg.clientHeight * this.#editor.viewBoxHeight)).toDecimalPlaces(this.#editor.roundNumber + 1);\n\n        /** @type {SVGCircleElement} */(this.#pDot).setAttribute(\"cx\", this.#p.x.toString());\n        /** @type {SVGCircleElement} */(this.#pDot).setAttribute(\"cy\", this.#p.y.toString());\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).firstChild).value = this.#p.x.toString();\n        /** @type {HTMLInputElement} */(/** @type {HTMLDivElement} */(this.#pDiv).lastChild).value = this.#p.y.toString();\n        this.#editor.renderPath();\n    }\n\n    /** @param {PointerEvent} event */\n    #dotPointerUp = (event) => {\n        /** @type {SVGCircleElement} */(this.#pDot).style.cursor = \"grab\";\n        /** @type {SVGCircleElement} */(this.#pDot).releasePointerCapture(event.pointerId);\n\n        /** @type {SVGCircleElement} */(this.#pDot).onpointermove = null;\n        /** @type {SVGCircleElement} */(this.#pDot).onpointerup = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./SvgPathEditor/Arguments/Coordinate.js?");

/***/ }),

/***/ "./SvgPathEditor/Arguments/CoordinatesArgument.js":
/*!********************************************************!*\
  !*** ./SvgPathEditor/Arguments/CoordinatesArgument.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoordinatesArgument: () => (/* binding */ CoordinatesArgument)\n/* harmony export */ });\n/* harmony import */ var _SvgPathEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SvgPathEditor */ \"./SvgPathEditor/SvgPathEditor.js\");\n/* harmony import */ var _Coordinate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Coordinate */ \"./SvgPathEditor/Arguments/Coordinate.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Decimal/Decimal */ \"./Decimal/Decimal.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nclass CoordinatesArgument {\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newM(coordinate, editor) {\n        return new CoordinatesArgument(\"M\", \"m\", [coordinate], editor);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newL(coordinate, editor) {\n        return new CoordinatesArgument(\"L\", \"l\", [coordinate], editor);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate1\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newQ(coordinate1, coordinate, editor) {\n        return new CoordinatesArgument(\"Q\", \"q\", [coordinate1, coordinate], editor);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newT(coordinate, editor) {\n        return new CoordinatesArgument(\"T\", \"t\", [coordinate], editor);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate1\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate2\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newC(coordinate1, coordinate2, coordinate, editor) {\n        return new CoordinatesArgument(\"C\", \"c\", [coordinate1, coordinate2, coordinate], editor);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate1\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} coordinate\n     * @param {SvgPathEditor} editor\n     */\n    static newS(coordinate1, coordinate, editor) {\n        return new CoordinatesArgument(\"S\", \"s\", [coordinate1, coordinate], editor);\n    }\n\n\n\n    /** @type {Coordinate[]} */\n    #coordinates;\n\n    /** @type {string} */\n    #capitalLetter;\n    /** @returns {string} */\n    getCapitalLetter() { return this.#capitalLetter }\n\n    /** @type {string} */\n    #smallLetter;\n    /** @returns {string} */\n    getSmallLetter() { return this.#smallLetter; }\n\n\n    /**\n     * @param {string} capitalLetter\n     * @param {string} smallLetter\n     * @param {import(\"../../Decimal/Decimal\").Coordinate[]} coordinates\n     * @param {SvgPathEditor} editor\n     */\n    constructor(capitalLetter, smallLetter, coordinates, editor) {\n        this.#capitalLetter = capitalLetter;\n        this.#smallLetter = smallLetter;\n        this.#coordinates = coordinates.map((coordinate) => new _Coordinate__WEBPACK_IMPORTED_MODULE_1__.Coordinate(coordinate, editor));\n    }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    translate(x, y) {\n        for (const coordinate of this.#coordinates)\n            coordinate.translate(x, y);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} cos\n     * @param {import(\"../../Decimal/Decimal\").Decimal} sin\n     */\n    rotate(cos, sin) {\n        for (const coordinate of this.#coordinates)\n            coordinate.rotate(cos, sin);\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Decimal} x\n     * @param {import(\"../../Decimal/Decimal\").Decimal} y\n     */\n    scale(x, y) {\n        for (const coordinate of this.#coordinates)\n            coordinate.scale(x, y);\n    }\n\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toAbsoluteCoordinates(current) {\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].getValue().y.equals(current.y)) {\n            current.x = this.#coordinates[this.#coordinates.length - 1].getValue().x;\n            return `H ${this.#coordinates[0].getValue().x}`;\n        }\n\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].getValue().x.equals(current.x)) {\n            current.y = this.#coordinates[this.#coordinates.length - 1].getValue().y;\n            return `V ${this.#coordinates[0].getValue().y}`;\n        }\n\n\n        let result = this.#capitalLetter;\n\n        for (const coordinate of this.#coordinates)\n            result += ` ${coordinate.getValue().x} ${coordinate.getValue().y}`;\n\n        current.x = this.#coordinates[this.#coordinates.length - 1].getValue().x;\n        current.y = this.#coordinates[this.#coordinates.length - 1].getValue().y;\n\n        return result;\n    }\n\n    /**\n     * @param {import(\"../../Decimal/Decimal\").Coordinate} current\n     * @returns {string}\n     */\n    toRelativeCoordinates(current) {\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].getValue().y.equals(current.y)) {\n            const result = `h ${this.#coordinates[0].getValue().x.minus(current.x)}`;\n            current.x = this.#coordinates[this.#coordinates.length - 1].getValue().x;\n            return result;\n        }\n\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].getValue().x.equals(current.x)) {\n            const result = `v ${this.#coordinates[0].getValue().y.minus(current.y)}`\n            current.y = this.#coordinates[this.#coordinates.length - 1].getValue().y;\n            return result;\n        }\n\n\n        let result = this.#smallLetter;\n\n        for (const coordinate of this.#coordinates)\n            result += ` ${coordinate.getValue().x.minus(current.x)} ${coordinate.getValue().y.minus(current.y)}`;\n\n        current.x = this.#coordinates[this.#coordinates.length - 1].getValue().x;\n        current.y = this.#coordinates[this.#coordinates.length - 1].getValue().y;\n\n        return result;\n    }\n\n\n    /** @param {HTMLDivElement} argumentDiv */\n    createInputs(argumentDiv) {\n        for (let i = 0; i < this.#coordinates.length; i++)\n            this.#coordinates[i].createInputPair(argumentDiv);\n    }\n\n    /** */\n    removeInputs() {\n        for (let i = this.#coordinates.length - 1; i >= 0; i--)\n            this.#coordinates[i].removeInputPair();\n    }\n\n\n    /** */\n    createDots() {\n        for (let i = this.#coordinates.length - 1, j = 0; i >= 0; i--, j++)\n            this.#coordinates[i].createDot(j);\n    }\n\n    /** */\n    updateDotsRadius() {\n        for (const coordinate of this.#coordinates)\n            coordinate.updateDotRadius();\n    }\n\n    /** */\n    removeDots() {\n        for (let i = 0; i < this.#coordinates.length; i++)\n            this.#coordinates[i].removeDot();\n    }\n}\n\n//# sourceURL=webpack:///./SvgPathEditor/Arguments/CoordinatesArgument.js?");

/***/ }),

/***/ "./SvgPathEditor/SvgPathEditor.js":
/*!****************************************!*\
  !*** ./SvgPathEditor/SvgPathEditor.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SvgPathEditor: () => (/* binding */ SvgPathEditor)\n/* harmony export */ });\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Decimal/Decimal */ \"./Decimal/Decimal.js\");\n/* harmony import */ var _Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Arguments_ArgumentA__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Arguments/ArgumentA */ \"./SvgPathEditor/Arguments/ArgumentA.js\");\n/* harmony import */ var _Arguments_ArgumentZ__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Arguments/ArgumentZ */ \"./SvgPathEditor/Arguments/ArgumentZ.js\");\n/* harmony import */ var _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Arguments/CoordinatesArgument */ \"./SvgPathEditor/Arguments/CoordinatesArgument.js\");\n\n\n\n\n\nclass SvgPathEditor {\n    #lightRadio = /** @type {HTMLInputElement} */ (document.getElementById(\"light-radio\"));\n    #darkRadio = /** @type {HTMLInputElement} */ (document.getElementById(\"dark-radio\"));\n\n\n    #readInInput = /** @type {HTMLInputElement} */ (document.getElementById(\"read-in-input\"));\n    #readInButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"read-in-button\"));\n    #parsingErrorLabel = /** @type {HTMLDivElement} */ (document.getElementById(\"parsing-error\"));\n\n    #outputAbsoluteLabel = /** @type {HTMLLabelElement} */ (document.getElementById(\"output-absolute\"));\n    #outputRelativeLabel = /** @type {HTMLLabelElement} */ (document.getElementById(\"output-relative\"));\n    #copyAbsoluteButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"output-absolute-button\"));\n    #copyRelativeButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"output-relative-button\"));\n\n    #viewBoxXInput = /** @type {HTMLInputElement} */ (document.getElementById(\"view-box-x\"));\n    #viewBoxYInput = /** @type {HTMLInputElement} */ (document.getElementById(\"view-box-y\"));\n    #viewBoxWidthInput = /** @type {HTMLInputElement} */ (document.getElementById(\"view-box-width\"));\n    #viewBoxHeightInput = /** @type {HTMLInputElement} */ (document.getElementById(\"view-box-height\"));\n\n    #argumentListDiv = /** @type {HTMLDivElement} */ (document.getElementById(\"argument-list\"));\n    #circleRadiusInput = /** @type {HTMLInputElement} */ (document.getElementById(\"circle-radius-input\"));\n    #decimalPointUpButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"decimal-point-up\"));\n    #decimalPointDownButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"decimal-point-down\"));\n    #pointsRoundingLabel = /** @type {HTMLLabelElement} */ (document.getElementById(\"points-rounding\"));\n    #argumentAddButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"argument-add-button\"));\n    #argumentCountLabel = /** @type {HTMLLabelElement} */ (document.getElementById(\"argument-count\"));\n    #argumentRemoveButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"argument-remove-button\"));\n\n    #styleListDiv = /** @type {HTMLDivElement} */ (document.getElementById(\"style-list\"));\n    #styleAddButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"style-add-button\"));\n    #styleCountLabel = /** @type {HTMLLabelElement} */ (document.getElementById(\"style-count\"));\n    #styleRemoveButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"style-remove-button\"));\n\n    #translateXInput = /** @type {HTMLInputElement} */ (document.getElementById(\"translate-x\"));\n    #translateYInput = /** @type {HTMLInputElement} */ (document.getElementById(\"translate-y\"));\n    #translateButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"translate-button\"));\n    #rotateInput = /** @type {HTMLInputElement} */ (document.getElementById(\"rotate\"));\n    #rotateButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"rotate-button\"));\n    #scaleXInput = /** @type {HTMLInputElement} */ (document.getElementById(\"scale-x\"));\n    #scaleYInput = /** @type {HTMLInputElement} */ (document.getElementById(\"scale-y\"));\n    #scaleButton = /** @type {HTMLButtonElement} */ (document.getElementById(\"scale-button\"));\n\n    svg = /** @type {HTMLElement} */ (document.getElementById(\"svg\"));\n    svgPath = /** @type {HTMLElement} */ (document.getElementById(\"svg-path\"));\n\n\n    viewBoxX = -10;\n    viewBoxY = -10;\n    viewBoxWidth = 20;\n    viewBoxHeight = 20;\n\n    circleRadius = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0.2);\n    roundNumber = 2;\n\n\n    /** @type {import(\"Arguments/Argument\").Argument[]} */\n    #argumentList = [];\n\n    /** @param {import(\"Arguments/Argument\").Argument} argument */\n    #addArgument(argument) {\n        this.#argumentList.push(argument);\n        this.#argumentCountLabel.textContent = this.#argumentList.length.toString();\n\n        /*\n            <div>\n                <select onchange=\"\">\n                    <option>M</option>\n                    <option>L</option>\n                    <option>Q</option>\n                    <option>T</option>\n                    <option selected>C</option>\n                    <option>S</option>\n                </select>\n                <input type=\"checkbox\">\n                {for each coordinate}\n                <div>\n                    <input>\n                    <input>\n                </div>\n                {end for}\n            </div>\n        */\n        const div = document.createElement(\"div\");\n        {\n            const select = document.createElement(\"select\");\n            {\n                const optionM = document.createElement(\"option\");\n                {\n                    optionM.text = \"M\";\n                    optionM.value = \"M\";\n                }\n                select.appendChild(optionM);\n\n                const optionL = document.createElement(\"option\");\n                {\n                    optionL.text = \"L\";\n                    optionL.value = \"L\";\n                }\n                select.appendChild(optionL);\n\n                const optionQ = document.createElement(\"option\");\n                {\n                    optionQ.text = \"Q\";\n                    optionQ.value = \"Q\";\n                }\n                select.appendChild(optionQ);\n\n                const optionT = document.createElement(\"option\");\n                {\n                    optionT.text = \"T\";\n                    optionT.value = \"T\";\n                }\n                select.appendChild(optionT);\n\n                const optionC = document.createElement(\"option\");\n                {\n                    optionC.text = \"C\";\n                    optionC.value = \"C\";\n                }\n                select.appendChild(optionC);\n\n                const optionS = document.createElement(\"option\");\n                {\n                    optionS.text = \"S\";\n                    optionS.value = \"S\";\n                }\n                select.appendChild(optionS);\n\n                const optionA = document.createElement(\"option\");\n                {\n                    optionA.text = \"A\";\n                    optionA.value = \"A\";\n                }\n                select.appendChild(optionA);\n\n                const optionZ = document.createElement(\"option\");\n                {\n                    optionZ.text = \"Z\";\n                    optionZ.value = \"Z\";\n                }\n                select.appendChild(optionZ);\n\n                select.value = argument.getCapitalLetter();\n\n                select.onchange = () => {\n                    const index = this.#argumentList.indexOf(argument);\n\n                    this.#argumentList[index].removeDots();\n                    this.#argumentList[index].removeInputs();\n                    input.checked = false;\n\n                    switch (select.value) {\n                        case 'M': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newM({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'L': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newL({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'Q': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newQ({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'T': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newT({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'C': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newC({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'S': argument = _Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newS({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'A': argument = new _Arguments_ArgumentA__WEBPACK_IMPORTED_MODULE_1__.ArgumentA({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), false, false, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this); break;\n                        case 'Z': argument = new _Arguments_ArgumentZ__WEBPACK_IMPORTED_MODULE_2__.ArgumentZ(); break;\n                    };\n                    argument.createInputs(div);\n\n                    this.#argumentList[index] = argument;\n                    this.renderPath();\n                };\n            }\n            div.appendChild(select);\n\n            const input = document.createElement(\"input\");\n            {\n                input.setAttribute(\"type\", \"checkbox\");\n                input.onchange = () => {\n                    if (input.checked)\n                        argument.createDots();\n                    else\n                        argument.removeDots();\n                }\n            }\n            div.appendChild(input);\n\n            argument.createInputs(div);\n        }\n        this.#argumentListDiv.appendChild(div);\n    }\n\n    /** */\n    #removeArgument() {\n        if (this.#argumentList.length === 0)\n            return;\n\n        const argument = /** @type {import(\"Arguments/Argument\").Argument} */(this.#argumentList.pop());\n        this.#argumentCountLabel.textContent = this.#argumentList.length.toString();\n\n        this.#argumentListDiv.removeChild(/** @type {ChildNode} */(this.#argumentListDiv.lastChild));\n        argument.removeDots();\n    }\n\n\n    /** @type {{key: string, value: string}[]} */\n    #styleList = [];\n\n    /** @param {{key: string, value: string}} style */\n    #addStyle(style) {\n        this.#styleList.push(style);\n        this.#styleCountLabel.textContent = this.#styleList.length.toString();\n\n        const inputKey = document.createElement(\"input\");\n        inputKey.value = style.key;\n        inputKey.oninput = (event) => {\n            style.key = /** @type {HTMLInputElement} */(event.target).value;\n            this.renderPath();\n        }\n        this.#styleListDiv.appendChild(inputKey);\n\n        const inputValue = document.createElement(\"input\");\n        inputValue.value = style.value;\n        inputValue.oninput = (event) => {\n            style.value = /** @type {HTMLInputElement} */(event.target).value;\n            this.renderPath();\n        }\n        this.#styleListDiv.appendChild(inputValue);\n    }\n\n    /** */\n    #removeStyle() {\n        if (this.#styleList.length === 0)\n            return;\n\n        this.#styleList.pop();\n        this.#styleCountLabel.textContent = this.#styleList.length.toString();\n\n        for (let i = 0; i < 2; i++)\n            this.#styleListDiv.removeChild(/** @type {ChildNode} */(this.#styleListDiv.lastChild));\n    }\n\n\n    /** */\n    constructor() {\n        const theme = localStorage.getItem(\"theme\");\n        if (theme !== null)\n            if (theme === \"light\")\n                this.#lightRadio.checked = true;\n            else\n                this.#darkRadio.checked = true;\n\n        this.#lightRadio.onclick = () => localStorage.setItem(\"theme\", \"light\");\n        this.#darkRadio.onclick = () => localStorage.setItem(\"theme\", \"dark\");\n\n\n        this.#viewBoxXInput.value = this.viewBoxX.toString();\n        this.#viewBoxYInput.value = this.viewBoxY.toString();\n        this.#viewBoxWidthInput.value = this.viewBoxWidth.toString();\n        this.#viewBoxHeightInput.value = this.viewBoxHeight.toString();\n        this.#circleRadiusInput.value = this.circleRadius.toString();\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n\n\n        this.#readInButton.onclick = this.#onReadInPath;\n        this.#copyAbsoluteButton.onclick = this.#onCopyToClipboardAbsolute;\n        this.#copyRelativeButton.onclick = this.#onCopyToClipboardRelative;\n\n        this.#viewBoxXInput.oninput = this.#onViewBoxX;\n        this.#viewBoxYInput.oninput = this.#onViewBoxY;\n        this.#viewBoxWidthInput.oninput = this.#onViewBoxWidth;\n        this.#viewBoxHeightInput.oninput = this.#onViewBoxHeight;\n\n        this.#circleRadiusInput.oninput = this.#onCircleRadius;\n        this.#decimalPointUpButton.onclick = this.#onDecimalPointUp;\n        this.#decimalPointDownButton.onclick = this.#onDecimalPointDown;\n        this.#argumentAddButton.onclick = this.#onArgumentAdd;\n        this.#argumentRemoveButton.onclick = this.#onArgumentRemove;\n\n        this.#styleAddButton.onclick = this.#onStyleAdd;\n        this.#styleRemoveButton.onclick = this.#onStyleRemove;\n\n        this.#translateButton.onclick = this.#onTranslate;\n        this.#rotateButton.onclick = this.#onRotate;\n        this.#scaleButton.onclick = this.#onScale;\n\n\n        this.#addArgument(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newM({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(-5), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(-5) }, this));\n        this.#addArgument(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newL({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(5), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(-5) }, this));\n        this.#addArgument(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newQ({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(6) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(-5), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(-5) }, this));\n        this.#addArgument(new _Arguments_ArgumentZ__WEBPACK_IMPORTED_MODULE_2__.ArgumentZ());\n\n        this.#addStyle({ key: \"stroke\", value: \"#AAA\" });\n        this.#addStyle({ key: \"stroke-width\", value: \"0.5\" });\n        this.#addStyle({ key: \"fill\", value: \"none\" });\n\n\n        this.renderSvgViewBox();\n        this.renderPath();\n    }\n\n\n\n    /** */\n    #onReadInPath = () => {\n        this.#parsingErrorLabel.style.display = \"none\";\n        this.#parsingErrorLabel.textContent = \"\";\n\n        const me = this;\n        const input = this.#readInInput.value;\n        if (input.length === 0)\n            return;\n\n        // '<path '\n        if (input.length <= 0 || input[0] !== '<')\n            return renderError(\"At position 1: '<' expected\");\n        if (input.length <= 1 || input[1] !== 'p')\n            return renderError(\"At position 2: 'p' expected\");\n        if (input.length <= 2 || input[2] !== 'a')\n            return renderError(\"At position 3: 'a' expected\");\n        if (input.length <= 3 || input[3] !== 't')\n            return renderError(\"At position 4: 't' expected\");\n        if (input.length <= 4 || input[4] !== 'h')\n            return renderError(\"At position 5: 'h' expected\");\n        if (input.length <= 5 || input[5] !== ' ')\n            return renderError(\"At position 6: ' ' expected\");\n        if (input.length <= 6)\n            return renderError(\"At position 7: 'd' or 'i' expected\")\n\n        // 'id=\"...\" '\n        let parseIndex = 6;\n        if (input[6] === 'i') {\n            if (input.length <= 7 || input[7] !== 'd')\n                return renderError(\"At position 8: 'd' expected\");\n            if (input.length <= 8 || input[8] !== '=')\n                return renderError(\"At position 9: '=' expected\");\n            if (input.length <= 9 || input[9] !== '\"')\n                return renderError(\"At position 10: '\\\"' expected\");\n\n            parseIndex = 10;\n            do {\n                if (input.length <= parseIndex)\n                    return renderError(`At position ${input.length + 1}: ending \" expected`);\n            } while (input[parseIndex++] !== '\"')\n\n            if (input.length <= parseIndex || input[parseIndex] !== ' ')\n                return renderError(`At position ${parseIndex + 1}: ' ' expected`);\n            parseIndex++;\n        }\n\n        // 'd=\"'\n        if (input.length <= parseIndex || input[parseIndex] !== 'd')\n            return renderError(`At position ${parseIndex + 1}: 'd' expected`);\n        parseIndex++;\n        if (input.length <= parseIndex || input[parseIndex] !== '=')\n            return renderError(`At position ${parseIndex + 1}: '=' expected`);\n        parseIndex++;\n        if (input.length <= parseIndex || input[parseIndex] !== '\"')\n            return renderError(`At position ${parseIndex + 1}: '\\\"' expected`);\n        parseIndex++;\n\n\n        let originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n        let originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n        let lastArgument = '';\n        /** @type {import(\"Arguments/Argument\").Argument[]} */\n        const result = [];\n\n        while (input.length > parseIndex && input[parseIndex] !== '\"') {\n            switch (input[parseIndex++]) {\n                case ' ':\n                case ',':\n                    break;\n\n                case 'M': parse_M(); lastArgument = 'M'; break;\n                case 'm': parse_m(); lastArgument = 'm'; break;\n\n                case 'H': parse_H(); lastArgument = 'H'; break;\n                case 'h': parse_h(); lastArgument = 'h'; break;\n\n                case 'V': parse_V(); lastArgument = 'V'; break;\n                case 'v': parse_v(); lastArgument = 'v'; break;\n\n                case 'L': parse_L(); lastArgument = 'L'; break;\n                case 'l': parse_l(); lastArgument = 'l'; break;\n\n                case 'Q': parse_Q(); lastArgument = 'Q'; break;\n                case 'q': parse_q(); lastArgument = 'q'; break;\n\n                case 'T': parse_T(); lastArgument = 'T'; break;\n                case 't': parse_t(); lastArgument = 't'; break;\n\n                case 'C': parse_C(); lastArgument = 'C'; break;\n                case 'c': parse_c(); lastArgument = 'c'; break;\n\n                case 'S': parse_S(); lastArgument = 'S'; break;\n                case 's': parse_s(); lastArgument = 's'; break;\n\n                case 'A': parse_A(); lastArgument = 'A'; break;\n                case 'a': parse_a(); lastArgument = 'a'; break;\n\n                case 'Z':\n                case 'z': result.push(new _Arguments_ArgumentZ__WEBPACK_IMPORTED_MODULE_2__.ArgumentZ()); lastArgument = ''; break;\n\n                case '-':\n                case '.':\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': {\n                    parseIndex--;\n                    switch (lastArgument) {\n                        case '': return renderError(`At position ${parseIndex}: unexpected '${input[parseIndex]}'`);\n\n                        case 'M': parse_M(); lastArgument = 'M'; break;\n                        case 'm': parse_m(); lastArgument = 'm'; break;\n\n                        case 'H': parse_H(); lastArgument = 'H'; break;\n                        case 'h': parse_h(); lastArgument = 'h'; break;\n\n                        case 'V': parse_V(); lastArgument = 'V'; break;\n                        case 'v': parse_v(); lastArgument = 'v'; break;\n\n                        case 'L': parse_L(); lastArgument = 'L'; break;\n                        case 'l': parse_l(); lastArgument = 'l'; break;\n\n                        case 'Q': parse_Q(); lastArgument = 'Q'; break;\n                        case 'q': parse_q(); lastArgument = 'q'; break;\n\n                        case 'T': parse_T(); lastArgument = 'T'; break;\n                        case 't': parse_t(); lastArgument = 't'; break;\n\n                        case 'C': parse_C(); lastArgument = 'C'; break;\n                        case 'c': parse_c(); lastArgument = 'c'; break;\n\n                        case 'S': parse_S(); lastArgument = 'S'; break;\n                        case 's': parse_s(); lastArgument = 's'; break;\n\n                        case 'A': parse_A(); lastArgument = 'A'; break;\n                        case 'a': parse_a(); lastArgument = 'a'; break;\n                    }\n                    break;\n                }\n\n                default:\n                    return renderError(`At position ${parseIndex - 1}: unexpected '${input[parseIndex - 1]}'`);\n            }\n\n            if (this.#parsingErrorLabel.style.display === \"block\")\n                return;\n\n\n            /** */\n            function parse_M() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_m();\n            }\n            /** */\n            function parse_m() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newM({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_H() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_h();\n            }\n            /** */\n            function parse_h() {\n                originX = originX.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newL({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_V() {\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_v();\n            }\n            /** */\n            function parse_v() {\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newL({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_L() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_l();\n            }\n            /** */\n            function parse_l() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newL({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_Q() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_q();\n            }\n            /** */\n            function parse_q() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newQ({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(x1), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(y1) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_T() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_t();\n            }\n            /** */\n            function parse_t() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newT({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_C() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_c();\n            }\n            /** */\n            function parse_c() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                const x2 = originX.plus(parseNumber());\n                const y2 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newC({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(x1), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(y1) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(x2), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(y2) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_S() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_s();\n            }\n            /** */\n            function parse_s() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newS({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(x1), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(y1) }, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n            /** */\n            function parse_A() {\n                originX = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                originY = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                parse_a();\n            }\n            /** */\n            function parse_a() {\n                const radiusX = parseNumber();\n                const radiusY = parseNumber();\n                const xAxisRotation = parseNumber();\n                const largeArcFlag = parseFlag();\n                const sweepFlag = parseFlag();\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(new _Arguments_ArgumentA__WEBPACK_IMPORTED_MODULE_1__.ArgumentA({ x: radiusX, y: radiusY }, xAxisRotation, largeArcFlag, sweepFlag, { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originX), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(originY) }, me));\n            }\n\n\n            /** @returns {Decimal} */\n            function parseNumber() {\n                while (true) {\n                    if (input.length <= parseIndex || input[parseIndex] == '\"') {\n                        renderError(`Failed parsing number at position ${parseIndex + 1}`);\n                        return new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                    }\n                    if (input[parseIndex] !== ' ' && input[parseIndex] !== ',')\n                        break;\n                    parseIndex++\n                }\n\n                const startIndex = parseIndex;\n                let dotVisited = false;\n                if (input[parseIndex] === '-')\n                    parseIndex++;\n                while (true) {\n                    if (input.length <= parseIndex) {\n                        renderError(`Failed parsing number at position ${startIndex + 1} - ${parseIndex + 1}`);\n                        return new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                    }\n\n                    if (input[parseIndex] === '.')\n                        if (!dotVisited) {\n                            dotVisited = true;\n                            parseIndex++;\n                        }\n                        else\n                            break;\n                    else\n                        if (input[parseIndex] !== '0'\n                            && input[parseIndex] !== '1'\n                            && input[parseIndex] !== '2'\n                            && input[parseIndex] !== '3'\n                            && input[parseIndex] !== '4'\n                            && input[parseIndex] !== '5'\n                            && input[parseIndex] !== '6'\n                            && input[parseIndex] !== '7'\n                            && input[parseIndex] !== '8'\n                            && input[parseIndex] !== '9')\n                            break;\n                    parseIndex++;\n                }\n\n                try {\n                    return new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(input.substring(startIndex, parseIndex));\n                }\n                catch {\n                    renderError(`Failed parsing number at position ${startIndex + 1} - ${parseIndex + 1}`);\n                    return new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0);\n                }\n            }\n\n            /** @returns {boolean} */\n            function parseFlag() {\n                while (true) {\n                    if (input.length <= parseIndex || input[parseIndex] == '\"') {\n                        renderError(`Failed parsing number at position ${parseIndex + 1}`);\n                        return false;\n                    }\n                    if (input[parseIndex] !== ' ' && input[parseIndex] !== ',')\n                        break;\n                    parseIndex++;\n                }\n\n                if (input.length <= parseIndex) {\n                    renderError(`At position ${parseIndex}: '0' or '1' expected`);\n                    return false;\n                }\n\n                let result;\n                switch (input[parseIndex++]) {\n                    case '0': result = false; break;\n                    case '1': result = true; break;\n                    default:\n                        renderError(`At position ${parseIndex}: '0' or '1' expected`);\n                        result = false;\n                        break;\n                }\n\n                return result;\n            }\n        }\n\n        if (input.length <= parseIndex)\n            return renderError(`At position ${input.length + 1}: ending \" expected`);\n\n\n        while (this.#argumentList.length > 0)\n            this.#removeArgument();\n        for (const argument of result)\n            this.#addArgument(argument);\n\n        this.renderPath();\n\n\n        /** @param {string} errorMessage */\n        function renderError(errorMessage) {\n            if (me.#parsingErrorLabel.style.display === \"block\")\n                return;\n            me.#parsingErrorLabel.style.display = \"block\";\n            me.#parsingErrorLabel.textContent = errorMessage;\n        }\n    }\n\n    /** */\n    #onCopyToClipboardAbsolute = () => {\n        navigator.clipboard.writeText(/** @type {string} */(this.#outputAbsoluteLabel.textContent));\n    }\n\n    /** */\n    #onCopyToClipboardRelative = () => {\n        navigator.clipboard.writeText(/** @type {string} */(this.#outputRelativeLabel.textContent));\n    }\n\n\n    /** */\n    #onViewBoxX = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxXInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxX = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    /** */\n    #onViewBoxY = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxYInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxY = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    /** */\n    #onViewBoxWidth = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxWidthInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxWidth = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    /** */\n    #onViewBoxHeight = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxHeightInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxHeight = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n\n    /** */\n    #onCircleRadius = () => {\n        try {\n            this.circleRadius = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(this.#circleRadiusInput.value);\n            for (const argument of this.#argumentList)\n                argument.updateDotsRadius();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n\n    /** */\n    #onDecimalPointUp = () => {\n        if (this.roundNumber >= 6)\n            return;\n\n        this.roundNumber++;\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n    }\n\n    /** */\n    #onDecimalPointDown = () => {\n        if (this.roundNumber <= 1)\n            return;\n\n        this.roundNumber--;\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n    }\n\n\n    /** */\n    #onArgumentAdd = () => {\n        this.#addArgument(_Arguments_CoordinatesArgument__WEBPACK_IMPORTED_MODULE_3__.CoordinatesArgument.newM({ x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }, this));\n        this.renderPath();\n    }\n\n    /** */\n    #onArgumentRemove = () => {\n        if (this.#argumentList.length === 0)\n            return;\n\n        this.#removeArgument();\n        this.renderPath();\n    }\n\n\n    /** */\n    #onStyleAdd = () => {\n        this.#addStyle({ key: \"\", value: \"\" });\n    }\n\n    /** */\n    #onStyleRemove = () => {\n        if (this.#styleList.length === 0)\n            return;\n\n        this.#removeStyle();\n        this.renderPath();\n    }\n\n\n    /** */\n    #onTranslate = () => {\n        try {\n            const x = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(this.#translateXInput.value);\n            const y = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(this.#translateYInput.value);\n\n            for (const argument of this.#argumentList)\n                argument.translate(x, y);\n        }\n        catch {\n            // ignore invalid user input\n        }\n\n        this.renderPath();\n    }\n\n    /** */\n    #onRotate = () => {\n        const rotation = parseFloat(this.#rotateInput.value);\n        if (isNaN(rotation))\n            return;\n\n        /**\n         * rotate matrix\n         *\n         * | cos a  -sin a | * | x |\n         * | sin a   cos a |   | y |\n         * \n         * => \n         * \n         * x = cos a * x - sin a * y\n         * y = sin a * x + cos a * y\n         **/\n        const radian = rotation * Math.PI / 180;\n        const cos = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(Math.cos(radian));\n        const sin = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(Math.sin(radian));\n\n        for (const argument of this.#argumentList)\n            argument.rotate(cos, sin);\n\n        this.renderPath();\n    }\n\n    /** */\n    #onScale = () => {\n        try {\n            const x = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(this.#scaleXInput.value);\n            const y = new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(this.#scaleYInput.value);\n\n            for (const argument of this.#argumentList)\n                argument.scale(x, y);\n        }\n        catch {\n            // ignore invalid user input\n        }\n\n        this.renderPath();\n    }\n\n\n\n    /** updates the \"viewBox\" attribute of the \"svg\" element */\n    renderSvgViewBox = () => {\n        this.svg.setAttribute(\"viewBox\", `${this.viewBoxX.toString()} ${this.viewBoxY.toString()} ${this.viewBoxWidth.toString()} ${this.viewBoxHeight.toString()}`);\n    }\n\n    /** updates all attributes of the \"path\" element and updates the output labels */\n    renderPath = () => {\n        let absolutePath = `<path d=\"`;\n        {\n            const current = { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }\n\n            for (const argument of this.#argumentList)\n                absolutePath += `${argument.toAbsoluteCoordinates(current)} `;\n            absolutePath = absolutePath.substring(0, absolutePath.length - 1);\n\n            // set arguments-part to attribute \"d\"\n            this.svgPath.setAttribute(\"d\", absolutePath.substring(9, absolutePath.length));\n\n            absolutePath += `\" `;\n\n            for (const style of this.#styleList)\n                if (style.key !== \"\")\n                    absolutePath += `${style.key}=\"${style.value}\" `;\n\n            absolutePath += `/>`;\n        }\n        this.#outputAbsoluteLabel.textContent = absolutePath;\n\n        let relativePath = `<path d=\"`;\n        {\n            const current = { x: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0), y: new (_Decimal_Decimal__WEBPACK_IMPORTED_MODULE_0___default())(0) }\n\n            for (const argument of this.#argumentList)\n                relativePath += `${argument.toRelativeCoordinates(current)} `;\n            relativePath = relativePath.substring(0, relativePath.length - 1);\n\n            relativePath += `\" `;\n\n            for (const style of this.#styleList)\n                if (style.key !== \"\")\n                    relativePath += `${style.key}=\"${style.value}\" `;\n\n            relativePath += `/>`;\n        }\n        this.#outputRelativeLabel.textContent = relativePath;\n\n        // remove all attributes except \"d\"\n        for (const attribute of this.svgPath.attributes)\n            if (attribute.name !== \"d\")\n                this.svgPath.removeAttribute(attribute.name);\n        // add attributes\n        for (const style of this.#styleList)\n            if (style.key !== \"\")\n                this.svgPath.setAttribute(style.key, style.value);\n    }\n}\n\n\n//# sourceURL=webpack:///./SvgPathEditor/SvgPathEditor.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SvgPathEditor_SvgPathEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SvgPathEditor/SvgPathEditor */ \"./SvgPathEditor/SvgPathEditor.js\");\n\n\nnew _SvgPathEditor_SvgPathEditor__WEBPACK_IMPORTED_MODULE_0__.SvgPathEditor();\n\n\n//# sourceURL=webpack:///./main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;