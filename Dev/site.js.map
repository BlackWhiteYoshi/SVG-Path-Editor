{"version":3,"file":"site.js","sources":["webpack:///./Decimal/Decimal.js","webpack:///./SvgPathEditor/Arguments/ArgumentA.ts","webpack:///./SvgPathEditor/Arguments/ArgumentZ.ts","webpack:///./SvgPathEditor/Arguments/CoordinatesArgument.ts","webpack:///./SvgPathEditor/Arguments/Point.ts","webpack:///./SvgPathEditor/SvgPathEditor.ts","webpack:///./main.ts"],"sourcesContent":["(function (globalScope) {\n    'use strict';\n\n\n    /*\n     *  decimal.js-light v2.5.1\n     *  An arbitrary-precision Decimal type for JavaScript.\n     *  https://github.com/MikeMcl/decimal.js-light\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\n     *  MIT Expat Licence\n     */\n\n\n    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toDecimalPlaces`.\n    var MAX_DIGITS = 1e9,                        // 0 to 1e9\n\n\n        // The initial configuration properties of the Decimal constructor.\n        Decimal = {\n\n            // These values must be integers within the stated ranges (inclusive).\n            // Most of these values can be changed during run-time using `Decimal.config`.\n\n            // The maximum number of significant digits of the result of a calculation or base conversion.\n            // E.g. `Decimal.config({ precision: 20 });`\n            precision: 20,                         // 1 to MAX_DIGITS\n\n            // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\n            // `toFixed`, `toPrecision` and `toDecimalPlaces`.\n            //\n            // ROUND_UP         0 Away from zero.\n            // ROUND_DOWN       1 Towards zero.\n            // ROUND_CEIL       2 Towards +Infinity.\n            // ROUND_FLOOR      3 Towards -Infinity.\n            // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            //\n            // E.g.\n            // `Decimal.rounding = 4;`\n            // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n            rounding: 4,                           // 0 to 8\n\n            // The exponent value at and beneath which `toString` returns exponential notation.\n            // JavaScript numbers: -7\n            toExpNeg: -7,                          // 0 to -MAX_E\n\n            // The exponent value at and above which `toString` returns exponential notation.\n            // JavaScript numbers: 21\n            toExpPos: 21,                         // 0 to MAX_E\n\n            // The natural logarithm of 10.\n            // 115 digits\n            LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\n        },\n\n\n        // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n\n        external = true,\n\n        decimalError = '[DecimalError] ',\n        invalidArgument = decimalError + 'Invalid argument: ',\n        exponentOutOfRange = decimalError + 'Exponent out of range: ',\n\n        mathfloor = Math.floor,\n        mathpow = Math.pow,\n\n        isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n\n        ONE,\n        BASE = 1e7,\n        LOG_BASE = 7,\n        MAX_SAFE_INTEGER = 9007199254740991,\n        MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\n\n        // Decimal.prototype object\n        P = {};\n\n\n    // Decimal prototype methods\n\n\n    /*\n     *  absoluteValue                       abs\n     *  comparedTo                          cmp\n     *  decimalPlaces                       dp\n     *  dividedBy                           div\n     *  dividedToIntegerBy                  idiv\n     *  equals                              eq\n     *  exponent\n     *  greaterThan                         gt\n     *  greaterThanOrEqualTo                gte\n     *  isInteger                           isint\n     *  isNegative                          isneg\n     *  isPositive                          ispos\n     *  isZero\n     *  lessThan                            lt\n     *  lessThanOrEqualTo                   lte\n     *  logarithm                           log\n     *  minus                               sub\n     *  modulo                              mod\n     *  naturalExponential                  exp\n     *  naturalLogarithm                    ln\n     *  negated                             neg\n     *  plus                                add\n     *  precision                           sd\n     *  squareRoot                          sqrt\n     *  times                               mul\n     *  toDecimalPlaces                     todp\n     *  toExponential\n     *  toFixed\n     *  toInteger                           toint\n     *  toNumber\n     *  toPower                             pow\n     *  toPrecision\n     *  toDecimalPlaces                 tosd\n     *  toString\n     *  valueOf                             val\n     */\n\n\n    /*\n     * Return a new Decimal whose value is the absolute value of this Decimal.\n     *\n     */\n    P.absoluteValue = P.abs = function () {\n        var x = new this.constructor(this);\n        if (x.s) x.s = 1;\n        return x;\n    };\n\n\n    /*\n     * Return\n     *   1    if the value of this Decimal is greater than the value of `y`,\n     *  -1    if the value of this Decimal is less than the value of `y`,\n     *   0    if they have the same value\n     *\n     */\n    P.comparedTo = P.cmp = function (y) {\n        var i, j, xdL, ydL,\n            x = this;\n\n        y = new x.constructor(y);\n\n        // Signs differ?\n        if (x.s !== y.s) return x.s || -y.s;\n\n        // Compare exponents.\n        if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\n\n        xdL = x.d.length;\n        ydL = y.d.length;\n\n        // Compare digit by digit.\n        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n            if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\n        }\n\n        // Compare lengths.\n        return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\n    };\n\n\n    /*\n     * Return the number of decimal places of the value of this Decimal.\n     *\n     */\n    P.decimalPlaces = P.dp = function () {\n        var x = this,\n            w = x.d.length - 1,\n            dp = (w - x.e) * LOG_BASE;\n\n        // Subtract the number of trailing zeros of the last word.\n        w = x.d[w];\n        if (w) for (; w % 10 == 0; w /= 10) dp--;\n\n        return dp < 0 ? 0 : dp;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.dividedBy = P.div = function (y) {\n        return divide(this, new this.constructor(y));\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\n     * by the value of `y`, truncated to `precision` significant digits.\n     *\n     */\n    P.dividedToIntegerBy = P.idiv = function (y) {\n        var x = this,\n            Ctor = x.constructor;\n        return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\n     *\n     */\n    P.equals = P.eq = function (y) {\n        return !this.cmp(y);\n    };\n\n\n    /*\n     * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\n     *\n     */\n    P.exponent = function () {\n        return getBase10Exponent(this);\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\n     * false.\n     *\n     */\n    P.greaterThan = P.gt = function (y) {\n        return this.cmp(y) > 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is greater than or equal to the value of `y`,\n     * otherwise return false.\n     *\n     */\n    P.greaterThanOrEqualTo = P.gte = function (y) {\n        return this.cmp(y) >= 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is an integer, otherwise return false.\n     *\n     */\n    P.isInteger = P.isint = function () {\n        return this.e > this.d.length - 2;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is negative, otherwise return false.\n     *\n     */\n    P.isNegative = P.isneg = function () {\n        return this.s < 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is positive, otherwise return false.\n     *\n     */\n    P.isPositive = P.ispos = function () {\n        return this.s > 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is 0, otherwise return false.\n     *\n     */\n    P.isZero = function () {\n        return this.s === 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is less than `y`, otherwise return false.\n     *\n     */\n    P.lessThan = P.lt = function (y) {\n        return this.cmp(y) < 0;\n    };\n\n\n    /*\n     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\n     *\n     */\n    P.lessThanOrEqualTo = P.lte = function (y) {\n        return this.cmp(y) < 1;\n    };\n\n\n    /*\n     * Return the logarithm of the value of this Decimal to the specified base, truncated to\n     * `precision` significant digits.\n     *\n     * If no base is specified, return log[10](x).\n     *\n     * log[base](x) = ln(x) / ln(base)\n     *\n     * The maximum error of the result is 1 ulp (unit in the last place).\n     *\n     * [base] {number|string|Decimal} The base of the logarithm.\n     *\n     */\n    P.logarithm = P.log = function (base) {\n        var r,\n            x = this,\n            Ctor = x.constructor,\n            pr = Ctor.precision,\n            wpr = pr + 5;\n\n        // Default base is 10.\n        if (base === void 0) {\n            base = new Ctor(10);\n        } else {\n            base = new Ctor(base);\n\n            // log[-b](x) = NaN\n            // log[0](x)  = NaN\n            // log[1](x)  = NaN\n            if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\n        }\n\n        // log[b](-x) = NaN\n        // log[b](0) = -Infinity\n        if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n        // log[b](1) = 0\n        if (x.eq(ONE)) return new Ctor(0);\n\n        external = false;\n        r = divide(ln(x, wpr), ln(base, wpr), wpr);\n        external = true;\n\n        return round(r, pr);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.minus = P.sub = function (y) {\n        var x = this;\n        y = new x.constructor(y);\n        return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.modulo = P.mod = function (y) {\n        var q,\n            x = this,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        y = new Ctor(y);\n\n        // x % 0 = NaN\n        if (!y.s) throw Error(decimalError + 'NaN');\n\n        // Return x if x is 0.\n        if (!x.s) return round(new Ctor(x), pr);\n\n        // Prevent rounding of intermediate calculations.\n        external = false;\n        q = divide(x, y, 0, 1).times(y);\n        external = true;\n\n        return x.minus(q);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\n     * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\n     * significant digits.\n     *\n     */\n    P.naturalExponential = P.exp = function () {\n        return exp(this);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\n     * truncated to `precision` significant digits.\n     *\n     */\n    P.naturalLogarithm = P.ln = function () {\n        return ln(this);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\n     * -1.\n     *\n     */\n    P.negated = P.neg = function () {\n        var x = new this.constructor(this);\n        x.s = -x.s || 0;\n        return x;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.plus = P.add = function (y) {\n        var x = this;\n        y = new x.constructor(y);\n        return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\n    };\n\n\n    /*\n     * Return the number of significant digits of the value of this Decimal.\n     *\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n     *\n     */\n    P.precision = P.sd = function (z) {\n        var e, sd, w,\n            x = this;\n\n        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n        e = getBase10Exponent(x) + 1;\n        w = x.d.length - 1;\n        sd = w * LOG_BASE + 1;\n        w = x.d[w];\n\n        // If non-zero...\n        if (w) {\n\n            // Subtract the number of trailing zeros of the last word.\n            for (; w % 10 == 0; w /= 10) sd--;\n\n            // Add the number of digits of the first word.\n            for (w = x.d[0]; w >= 10; w /= 10) sd++;\n        }\n\n        return z && e > sd ? e : sd;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\n     * significant digits.\n     *\n     */\n    P.squareRoot = P.sqrt = function () {\n        var e, n, pr, r, s, t, wpr,\n            x = this,\n            Ctor = x.constructor;\n\n        // Negative or zero?\n        if (x.s < 1) {\n            if (!x.s) return new Ctor(0);\n\n            // sqrt(-x) = NaN\n            throw Error(decimalError + 'NaN');\n        }\n\n        e = getBase10Exponent(x);\n        external = false;\n\n        // Initial estimate.\n        s = Math.sqrt(+x);\n\n        // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n        if (s == 0 || s == 1 / 0) {\n            n = digitsToString(x.d);\n            if ((n.length + e) % 2 == 0) n += '0';\n            s = Math.sqrt(n);\n            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n            if (s == 1 / 0) {\n                n = '5e' + e;\n            } else {\n                n = s.toExponential();\n                n = n.slice(0, n.indexOf('e') + 1) + e;\n            }\n\n            r = new Ctor(n);\n        } else {\n            r = new Ctor(s.toString());\n        }\n\n        pr = Ctor.precision;\n        s = wpr = pr + 3;\n\n        // Newton-Raphson iteration.\n        for (; ;) {\n            t = r;\n            r = t.plus(divide(x, t, wpr + 2)).times(0.5);\n\n            if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\n                n = n.slice(wpr - 3, wpr + 1);\n\n                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n                // 4999, i.e. approaching a rounding boundary, continue the iteration.\n                if (s == wpr && n == '4999') {\n\n                    // On the first iteration only, check to see if rounding up gives the exact result as the\n                    // nines may infinitely repeat.\n                    round(t, pr + 1, 0);\n\n                    if (t.times(t).eq(x)) {\n                        r = t;\n                        break;\n                    }\n                } else if (n != '9999') {\n                    break;\n                }\n\n                wpr += 4;\n            }\n        }\n\n        external = true;\n\n        return round(r, pr);\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\n     * `precision` significant digits.\n     *\n     */\n    P.times = P.mul = function (y) {\n        var carry, e, i, k, r, rL, t, xdL, ydL,\n            x = this,\n            Ctor = x.constructor,\n            xd = x.d,\n            yd = (y = new Ctor(y)).d;\n\n        // Return 0 if either is 0.\n        if (!x.s || !y.s) return new Ctor(0);\n\n        y.s *= x.s;\n        e = x.e + y.e;\n        xdL = xd.length;\n        ydL = yd.length;\n\n        // Ensure xd points to the longer array.\n        if (xdL < ydL) {\n            r = xd;\n            xd = yd;\n            yd = r;\n            rL = xdL;\n            xdL = ydL;\n            ydL = rL;\n        }\n\n        // Initialise the result array with zeros.\n        r = [];\n        rL = xdL + ydL;\n        for (i = rL; i--;) r.push(0);\n\n        // Multiply!\n        for (i = ydL; --i >= 0;) {\n            carry = 0;\n            for (k = xdL + i; k > i;) {\n                t = r[k] + yd[i] * xd[k - i - 1] + carry;\n                r[k--] = t % BASE | 0;\n                carry = t / BASE | 0;\n            }\n\n            r[k] = (r[k] + carry) % BASE | 0;\n        }\n\n        // Remove trailing zeros.\n        for (; !r[--rL];) r.pop();\n\n        if (carry) ++e;\n        else r.shift();\n\n        y.d = r;\n        y.e = e;\n\n        return external ? round(y, Ctor.precision) : y;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\n     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\n     *\n     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toDecimalPlaces = P.todp = function (dp, rm) {\n        var x = this,\n            Ctor = x.constructor;\n\n        x = new Ctor(x);\n        if (dp === void 0) return x;\n\n        checkInt32(dp, 0, MAX_DIGITS);\n\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n\n        return round(x, dp + getBase10Exponent(x) + 1, rm);\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal in exponential notation rounded to\n     * `dp` fixed decimal places using rounding mode `rounding`.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toExponential = function (dp, rm) {\n        var str,\n            x = this,\n            Ctor = x.constructor;\n\n        if (dp === void 0) {\n            str = toString(x, true);\n        } else {\n            checkInt32(dp, 0, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n\n            x = round(new Ctor(x), dp + 1, rm);\n            str = toString(x, true, dp + 1);\n        }\n\n        return str;\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal in normal (fixed-point) notation to\n     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\n     * omitted.\n     *\n     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n     * (-0).toFixed(3) is '0.000'.\n     * (-0.5).toFixed(0) is '-0'.\n     *\n     */\n    P.toFixed = function (dp, rm) {\n        var str, y,\n            x = this,\n            Ctor = x.constructor;\n\n        if (dp === void 0) return toString(x);\n\n        checkInt32(dp, 0, MAX_DIGITS);\n\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n\n        y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\n        str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\n\n        // To determine whether to add the minus sign look at the value before it was rounded,\n        // i.e. look at `x` rather than `y`.\n        return x.isneg() && !x.isZero() ? '-' + str : str;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\n     * rounding mode `rounding`.\n     *\n     */\n    P.toInteger = P.toint = function () {\n        var x = this,\n            Ctor = x.constructor;\n        return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\n    };\n\n\n    /*\n     * Return the value of this Decimal converted to a number primitive.\n     *\n     */\n    P.toNumber = function () {\n        return +this;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\n     * truncated to `precision` significant digits.\n     *\n     * For non-integer or very large exponents pow(x, y) is calculated using\n     *\n     *   x^y = exp(y*ln(x))\n     *\n     * The maximum error is 1 ulp (unit in last place).\n     *\n     * y {number|string|Decimal} The power to which to raise this Decimal.\n     *\n     */\n    P.toPower = P.pow = function (y) {\n        var e, k, pr, r, sign, yIsInt,\n            x = this,\n            Ctor = x.constructor,\n            guard = 12,\n            yn = +(y = new Ctor(y));\n\n        // pow(x, 0) = 1\n        if (!y.s) return new Ctor(ONE);\n\n        x = new Ctor(x);\n\n        // pow(0, y > 0) = 0\n        // pow(0, y < 0) = Infinity\n        if (!x.s) {\n            if (y.s < 1) throw Error(decimalError + 'Infinity');\n            return x;\n        }\n\n        // pow(1, y) = 1\n        if (x.eq(ONE)) return x;\n\n        pr = Ctor.precision;\n\n        // pow(x, 1) = x\n        if (y.eq(ONE)) return round(x, pr);\n\n        e = y.e;\n        k = y.d.length - 1;\n        yIsInt = e >= k;\n        sign = x.s;\n\n        if (!yIsInt) {\n\n            // pow(x < 0, y non-integer) = NaN\n            if (sign < 0) throw Error(decimalError + 'NaN');\n\n            // If y is a small integer use the 'exponentiation by squaring' algorithm.\n        } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n            r = new Ctor(ONE);\n\n            // Max k of 9007199254740991 takes 53 loop iterations.\n            // Maximum digits array length; leaves [28, 34] guard digits.\n            e = Math.ceil(pr / LOG_BASE + 4);\n\n            external = false;\n\n            for (; ;) {\n                if (k % 2) {\n                    r = r.times(x);\n                    truncate(r.d, e);\n                }\n\n                k = mathfloor(k / 2);\n                if (k === 0) break;\n\n                x = x.times(x);\n                truncate(x.d, e);\n            }\n\n            external = true;\n\n            return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\n        }\n\n        // Result is negative if x is negative and the last digit of integer y is odd.\n        sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\n\n        x.s = 1;\n        external = false;\n        r = y.times(ln(x, pr + guard));\n        external = true;\n        r = exp(r);\n        r.s = sign;\n\n        return r;\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal rounded to `sd` significant digits\n     * using rounding mode `rounding`.\n     *\n     * Return exponential notation if `sd` is less than the number of digits necessary to represent\n     * the integer part of the value in normal notation.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toPrecision = function (sd, rm) {\n        var e, str,\n            x = this,\n            Ctor = x.constructor;\n\n        if (sd === void 0) {\n            e = getBase10Exponent(x);\n            str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n\n            x = round(new Ctor(x), sd, rm);\n            e = getBase10Exponent(x);\n            str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\n        }\n\n        return str;\n    };\n\n\n    /*\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\n     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\n     * omitted.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     */\n    P.toDecimalPlaces = P.tosd = function (sd, rm) {\n        var x = this,\n            Ctor = x.constructor;\n\n        if (sd === void 0) {\n            sd = Ctor.precision;\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n        }\n\n        return round(new Ctor(x), sd, rm);\n    };\n\n\n    /*\n     * Return a string representing the value of this Decimal.\n     *\n     * Return exponential notation if this Decimal has a positive exponent equal to or greater than\n     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\n     *\n     */\n    P.toString = P.valueOf = P.val = P.toJSON = function () {\n        var x = this,\n            e = getBase10Exponent(x),\n            Ctor = x.constructor;\n\n        return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n    };\n\n\n    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n\n    /*\n     *  add                 P.minus, P.plus\n     *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\n     *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\n     *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\n     *  exp                 P.exp, P.pow\n     *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\n     *                      P.toString, divide, round, toString, exp, ln\n     *  getLn10             P.log, ln\n     *  getZeroString       digitsToString, toString\n     *  ln                  P.log, P.ln, P.pow, exp\n     *  parseDecimal        Decimal\n     *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\n     *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\n     *                      divide, getLn10, exp, ln\n     *  subtract            P.minus, P.plus\n     *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\n     *  truncate            P.pow\n     *\n     *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\n     *                      getLn10, exp, ln, parseDecimal, Decimal, config\n     */\n\n\n    function add(x, y) {\n        var carry, d, e, i, k, len, xd, yd,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // If either is zero...\n        if (!x.s || !y.s) {\n\n            // Return x if y is zero.\n            // Return y if y is non-zero.\n            if (!y.s) y = new Ctor(x);\n            return external ? round(y, pr) : y;\n        }\n\n        xd = x.d;\n        yd = y.d;\n\n        // x and y are finite, non-zero numbers with the same sign.\n\n        k = x.e;\n        e = y.e;\n        xd = xd.slice();\n        i = k - e;\n\n        // If base 1e7 exponents differ...\n        if (i) {\n            if (i < 0) {\n                d = xd;\n                i = -i;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = k;\n                len = xd.length;\n            }\n\n            // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n            k = Math.ceil(pr / LOG_BASE);\n            len = k > len ? k + 1 : len + 1;\n\n            if (i > len) {\n                i = len;\n                d.length = 1;\n            }\n\n            // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n            d.reverse();\n            for (; i--;) d.push(0);\n            d.reverse();\n        }\n\n        len = xd.length;\n        i = yd.length;\n\n        // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n        if (len - i < 0) {\n            i = len;\n            d = yd;\n            yd = xd;\n            xd = d;\n        }\n\n        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n        for (carry = 0; i;) {\n            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n            xd[i] %= BASE;\n        }\n\n        if (carry) {\n            xd.unshift(carry);\n            ++e;\n        }\n\n        // Remove trailing zeros.\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n        y.d = xd;\n        y.e = e;\n\n        return external ? round(y, pr) : y;\n    }\n\n\n    function checkInt32(i, min, max) {\n        if (i !== ~~i || i < min || i > max) {\n            throw Error(invalidArgument + i);\n        }\n    }\n\n\n    function digitsToString(d) {\n        var i, k, ws,\n            indexOfLastWord = d.length - 1,\n            str = '',\n            w = d[0];\n\n        if (indexOfLastWord > 0) {\n            str += w;\n            for (i = 1; i < indexOfLastWord; i++) {\n                ws = d[i] + '';\n                k = LOG_BASE - ws.length;\n                if (k) str += getZeroString(k);\n                str += ws;\n            }\n\n            w = d[i];\n            ws = w + '';\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n        } else if (w === 0) {\n            return '0';\n        }\n\n        // Remove trailing zeros of last w.\n        for (; w % 10 === 0;) w /= 10;\n\n        return str + w;\n    }\n\n\n    var divide = (function () {\n\n        // Assumes non-zero x and k, and hence non-zero result.\n        function multiplyInteger(x, k) {\n            var temp,\n                carry = 0,\n                i = x.length;\n\n            for (x = x.slice(); i--;) {\n                temp = x[i] * k + carry;\n                x[i] = temp % BASE | 0;\n                carry = temp / BASE | 0;\n            }\n\n            if (carry) x.unshift(carry);\n\n            return x;\n        }\n\n        function compare(a, b, aL, bL) {\n            var i, r;\n\n            if (aL != bL) {\n                r = aL > bL ? 1 : -1;\n            } else {\n                for (i = r = 0; i < aL; i++) {\n                    if (a[i] != b[i]) {\n                        r = a[i] > b[i] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n\n            return r;\n        }\n\n        function subtract(a, b, aL) {\n            var i = 0;\n\n            // Subtract b from a.\n            for (; aL--;) {\n                a[aL] -= i;\n                i = a[aL] < b[aL] ? 1 : 0;\n                a[aL] = i * BASE + a[aL] - b[aL];\n            }\n\n            // Remove leading zeros.\n            for (; !a[0] && a.length > 1;) a.shift();\n        }\n\n        return function (x, y, pr, dp) {\n            var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\n                Ctor = x.constructor,\n                sign = x.s == y.s ? 1 : -1,\n                xd = x.d,\n                yd = y.d;\n\n            // Either 0?\n            if (!x.s) return new Ctor(x);\n            if (!y.s) throw Error(decimalError + 'Division by zero');\n\n            e = x.e - y.e;\n            yL = yd.length;\n            xL = xd.length;\n            q = new Ctor(sign);\n            qd = q.d = [];\n\n            // Result exponent may be one less than e.\n            for (i = 0; yd[i] == (xd[i] || 0);) ++i;\n            if (yd[i] > (xd[i] || 0)) --e;\n\n            if (pr == null) {\n                sd = pr = Ctor.precision;\n            } else if (dp) {\n                sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\n            } else {\n                sd = pr;\n            }\n\n            if (sd < 0) return new Ctor(0);\n\n            // Convert precision in number of base 10 digits to base 1e7 digits.\n            sd = sd / LOG_BASE + 2 | 0;\n            i = 0;\n\n            // divisor < 1e7\n            if (yL == 1) {\n                k = 0;\n                yd = yd[0];\n                sd++;\n\n                // k is the carry.\n                for (; (i < xL || k) && sd--; i++) {\n                    t = k * BASE + (xd[i] || 0);\n                    qd[i] = t / yd | 0;\n                    k = t % yd | 0;\n                }\n\n                // divisor >= 1e7\n            } else {\n\n                // Normalise xd and yd so highest order digit of yd is >= BASE/2\n                k = BASE / (yd[0] + 1) | 0;\n\n                if (k > 1) {\n                    yd = multiplyInteger(yd, k);\n                    xd = multiplyInteger(xd, k);\n                    yL = yd.length;\n                    xL = xd.length;\n                }\n\n                xi = yL;\n                rem = xd.slice(0, yL);\n                remL = rem.length;\n\n                // Add zeros to make remainder as long as divisor.\n                for (; remL < yL;) rem[remL++] = 0;\n\n                yz = yd.slice();\n                yz.unshift(0);\n                yd0 = yd[0];\n\n                if (yd[1] >= BASE / 2) ++yd0;\n\n                do {\n                    k = 0;\n\n                    // Compare divisor and remainder.\n                    cmp = compare(yd, rem, yL, remL);\n\n                    // If divisor < remainder.\n                    if (cmp < 0) {\n\n                        // Calculate trial digit, k.\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\n\n                        // k will be how many times the divisor goes into the current remainder.\n                        k = rem0 / yd0 | 0;\n\n                        //  Algorithm:\n                        //  1. product = divisor * trial digit (k)\n                        //  2. if product > remainder: product -= divisor, k--\n                        //  3. remainder -= product\n                        //  4. if product was < remainder at 2:\n                        //    5. compare new remainder and divisor\n                        //    6. If remainder > divisor: remainder -= divisor, k++\n\n                        if (k > 1) {\n                            if (k >= BASE) k = BASE - 1;\n\n                            // product = divisor * trial digit.\n                            prod = multiplyInteger(yd, k);\n                            prodL = prod.length;\n                            remL = rem.length;\n\n                            // Compare product and remainder.\n                            cmp = compare(prod, rem, prodL, remL);\n\n                            // product > remainder.\n                            if (cmp == 1) {\n                                k--;\n\n                                // Subtract divisor from product.\n                                subtract(prod, yL < prodL ? yz : yd, prodL);\n                            }\n                        } else {\n\n                            // cmp is -1.\n                            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                            if (k == 0) cmp = k = 1;\n                            prod = yd.slice();\n                        }\n\n                        prodL = prod.length;\n                        if (prodL < remL) prod.unshift(0);\n\n                        // Subtract product from remainder.\n                        subtract(rem, prod, remL);\n\n                        // If product was < previous remainder.\n                        if (cmp == -1) {\n                            remL = rem.length;\n\n                            // Compare divisor and new remainder.\n                            cmp = compare(yd, rem, yL, remL);\n\n                            // If divisor < new remainder, subtract divisor from remainder.\n                            if (cmp < 1) {\n                                k++;\n\n                                // Subtract divisor from remainder.\n                                subtract(rem, yL < remL ? yz : yd, remL);\n                            }\n                        }\n\n                        remL = rem.length;\n                    } else if (cmp === 0) {\n                        k++;\n                        rem = [0];\n                    }    // if cmp === 1, k will be 0\n\n                    // Add the next digit, k, to the result array.\n                    qd[i++] = k;\n\n                    // Update the remainder.\n                    if (cmp && rem[0]) {\n                        rem[remL++] = xd[xi] || 0;\n                    } else {\n                        rem = [xd[xi]];\n                        remL = 1;\n                    }\n\n                } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n            }\n\n            // Leading zero?\n            if (!qd[0]) qd.shift();\n\n            q.e = e;\n\n            return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\n        };\n    })();\n\n\n    /*\n     * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\n     * significant digits.\n     *\n     * Taylor/Maclaurin series.\n     *\n     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\n     *\n     * Argument reduction:\n     *   Repeat x = x / 32, k += 5, until |x| < 0.1\n     *   exp(x) = exp(x / 2^k)^(2^k)\n     *\n     * Previously, the argument was initially reduced by\n     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\n     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\n     * found to be slower than just dividing repeatedly by 32 as above.\n     *\n     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\n     *\n     *  exp(x) is non-terminating for any finite, non-zero x.\n     *\n     */\n    function exp(x, sd) {\n        var denominator, guard, pow, sum, t, wpr,\n            i = 0,\n            k = 0,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\n\n        // exp(0) = 1\n        if (!x.s) return new Ctor(ONE);\n\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n\n        t = new Ctor(0.03125);\n\n        while (x.abs().gte(0.1)) {\n            x = x.times(t);    // x = x / 2^5\n            k += 5;\n        }\n\n        // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\n        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n        wpr += guard;\n        denominator = pow = sum = new Ctor(ONE);\n        Ctor.precision = wpr;\n\n        for (; ;) {\n            pow = round(pow.times(x), wpr);\n            denominator = denominator.times(++i);\n            t = sum.plus(divide(pow, denominator, wpr));\n\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                while (k--) sum = round(sum.times(sum), wpr);\n                Ctor.precision = pr;\n                return sd == null ? (external = true, round(sum, pr)) : sum;\n            }\n\n            sum = t;\n        }\n    }\n\n\n    // Calculate the base 10 exponent from the base 1e7 exponent.\n    function getBase10Exponent(x) {\n        var e = x.e * LOG_BASE,\n            w = x.d[0];\n\n        // Add the number of digits of the first word of the digits array.\n        for (; w >= 10; w /= 10) e++;\n        return e;\n    }\n\n\n    function getLn10(Ctor, sd, pr) {\n\n        if (sd > Ctor.LN10.sd()) {\n\n\n            // Reset global state in case the exception is caught.\n            external = true;\n            if (pr) Ctor.precision = pr;\n            throw Error(decimalError + 'LN10 precision limit exceeded');\n        }\n\n        return round(new Ctor(Ctor.LN10), sd);\n    }\n\n\n    function getZeroString(k) {\n        var zs = '';\n        for (; k--;) zs += '0';\n        return zs;\n    }\n\n\n    /*\n     * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\n     * digits.\n     *\n     *  ln(n) is non-terminating (n != 1)\n     *\n     */\n    function ln(y, sd) {\n        var c, c0, denominator, e, numerator, sum, t, wpr, x2,\n            n = 1,\n            guard = 10,\n            x = y,\n            xd = x.d,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // ln(-x) = NaN\n        // ln(0) = -Infinity\n        if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n        // ln(1) = 0\n        if (x.eq(ONE)) return new Ctor(0);\n\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n\n        if (x.eq(10)) {\n            if (sd == null) external = true;\n            return getLn10(Ctor, wpr);\n        }\n\n        wpr += guard;\n        Ctor.precision = wpr;\n        c = digitsToString(xd);\n        c0 = c.charAt(0);\n        e = getBase10Exponent(x);\n\n        if (Math.abs(e) < 1.5e15) {\n\n            // Argument reduction.\n            // The series converges faster the closer the argument is to 1, so using\n            // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n            // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n            // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n            // later be divided by this number, then separate out the power of 10 using\n            // ln(a*10^b) = ln(a) + b*ln(10).\n\n            // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n            //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n            // max n is 6 (gives 0.7 - 1.3)\n            while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n                x = x.times(y);\n                c = digitsToString(x.d);\n                c0 = c.charAt(0);\n                n++;\n            }\n\n            e = getBase10Exponent(x);\n\n            if (c0 > 1) {\n                x = new Ctor('0.' + c);\n                e++;\n            } else {\n                x = new Ctor(c0 + '.' + c.slice(1));\n            }\n        } else {\n\n            // The argument reduction method above may result in overflow if the argument y is a massive\n            // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n            // function using ln(x*10^e) = ln(x) + e*ln(10).\n            t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n            x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n\n            Ctor.precision = pr;\n            return sd == null ? (external = true, round(x, pr)) : x;\n        }\n\n        // x is reduced to a value near 1.\n\n        // Taylor series.\n        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n        // where x = (y - 1)/(y + 1)    (|x| < 1)\n        sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\n        x2 = round(x.times(x), wpr);\n        denominator = 3;\n\n        for (; ;) {\n            numerator = round(numerator.times(x2), wpr);\n            t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\n\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                sum = sum.times(2);\n\n                // Reverse the argument reduction.\n                if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n                sum = divide(sum, new Ctor(n), wpr);\n\n                Ctor.precision = pr;\n                return sd == null ? (external = true, round(sum, pr)) : sum;\n            }\n\n            sum = t;\n            denominator += 2;\n        }\n    }\n\n\n    /*\n     * Parse the value of a new Decimal `x` from string `str`.\n     */\n    function parseDecimal(x, str) {\n        var e, i, len;\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n        } else if (e < 0) {\n\n            // Integer.\n            e = str.length;\n        }\n\n        // Determine leading zeros.\n        for (i = 0; str.charCodeAt(i) === 48;) ++i;\n\n        // Determine trailing zeros.\n        for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\n        str = str.slice(i, len);\n\n        if (str) {\n            len -= i;\n            e = e - i - 1;\n            x.e = mathfloor(e / LOG_BASE);\n            x.d = [];\n\n            // Transform base\n\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first word of the digits array.\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE;\n\n            if (i < len) {\n                if (i) x.d.push(+str.slice(0, i));\n                for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n                str = str.slice(i);\n                i = LOG_BASE - str.length;\n            } else {\n                i -= len;\n            }\n\n            for (; i--;) str += '0';\n            x.d.push(+str);\n\n            if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\n        } else {\n\n            // Zero.\n            x.s = 0;\n            x.e = 0;\n            x.d = [0];\n        }\n\n        return x;\n    }\n\n\n    /*\n     * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\n     */\n    function round(x, sd, rm) {\n        var i, j, k, n, rd, doRound, w, xdi,\n            xd = x.d;\n\n        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // w: the word of xd which contains the rounding digit, a base 1e7 number.\n        // xdi: the index of w within xd.\n        // n: the number of digits of w.\n        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n        // they had leading zeros)\n        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n        // Get the length of the first word of the digits array xd.\n        for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\n        i = sd - n;\n\n        // Is the rounding digit in the first word of xd?\n        if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n        } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) return x;\n            w = k = xd[xdi];\n\n            // Get the number of digits of w.\n            for (n = 1; k >= 10; k /= 10) n++;\n\n            // Get the index of rd within w.\n            i %= LOG_BASE;\n\n            // Get the index of rd within w, adjusted for leading zeros.\n            // The number of leading zeros of w is given by LOG_BASE - n.\n            j = i - LOG_BASE + n;\n        }\n\n        if (rm !== void 0) {\n            k = mathpow(10, n - j - 1);\n\n            // Get the rounding digit at index j of w.\n            rd = w / k % 10 | 0;\n\n            // Are there any non-zero digits after the rounding digit?\n            doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\n\n            // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\n            // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\n            // 714.\n\n            doRound = rm < 4\n                ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\n\n                    // Check whether the digit to the left of the rounding digit is odd.\n                    ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n        }\n\n        if (sd < 1 || !xd[0]) {\n            if (doRound) {\n                k = getBase10Exponent(x);\n                xd.length = 1;\n\n                // Convert sd to decimal places.\n                sd = sd - k - 1;\n\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                x.e = mathfloor(-sd / LOG_BASE) || 0;\n            } else {\n                xd.length = 1;\n\n                // Zero.\n                xd[0] = x.e = x.s = 0;\n            }\n\n            return x;\n        }\n\n        // Remove excess digits.\n        if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n        } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of w.\n            xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\n        }\n\n        if (doRound) {\n            for (; ;) {\n\n                // Is the digit to be rounded up in the first word of xd?\n                if (xdi == 0) {\n                    if ((xd[0] += k) == BASE) {\n                        xd[0] = 1;\n                        ++x.e;\n                    }\n\n                    break;\n                } else {\n                    xd[xdi] += k;\n                    if (xd[xdi] != BASE) break;\n                    xd[xdi--] = 0;\n                    k = 1;\n                }\n            }\n        }\n\n        // Remove trailing zeros.\n        for (i = xd.length; xd[--i] === 0;) xd.pop();\n\n        if (external && (x.e > MAX_E || x.e < -MAX_E)) {\n            throw Error(exponentOutOfRange + getBase10Exponent(x));\n        }\n\n        return x;\n    }\n\n\n    function subtract(x, y) {\n        var d, e, i, j, k, len, xd, xe, xLTy, yd,\n            Ctor = x.constructor,\n            pr = Ctor.precision;\n\n        // Return y negated if x is zero.\n        // Return x if y is zero and x is non-zero.\n        if (!x.s || !y.s) {\n            if (y.s) y.s = -y.s;\n            else y = new Ctor(x);\n            return external ? round(y, pr) : y;\n        }\n\n        xd = x.d;\n        yd = y.d;\n\n        // x and y are non-zero numbers with the same sign.\n\n        e = y.e;\n        xe = x.e;\n        xd = xd.slice();\n        k = xe - e;\n\n        // If exponents differ...\n        if (k) {\n            xLTy = k < 0;\n\n            if (xLTy) {\n                d = xd;\n                k = -k;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = xe;\n                len = xd.length;\n            }\n\n            // Numbers with massively different exponents would result in a very high number of zeros\n            // needing to be prepended, but this can be avoided while still ensuring correct rounding by\n            // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n            if (k > i) {\n                k = i;\n                d.length = 1;\n            }\n\n            // Prepend zeros to equalise exponents.\n            d.reverse();\n            for (i = k; i--;) d.push(0);\n            d.reverse();\n\n            // Base 1e7 exponents equal.\n        } else {\n\n            // Check digits to determine which is the bigger number.\n\n            i = xd.length;\n            len = yd.length;\n            xLTy = i < len;\n            if (xLTy) len = i;\n\n            for (i = 0; i < len; i++) {\n                if (xd[i] != yd[i]) {\n                    xLTy = xd[i] < yd[i];\n                    break;\n                }\n            }\n\n            k = 0;\n        }\n\n        if (xLTy) {\n            d = xd;\n            xd = yd;\n            yd = d;\n            y.s = -y.s;\n        }\n\n        len = xd.length;\n\n        // Append zeros to xd if shorter.\n        // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\n        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n        // Subtract yd from xd.\n        for (i = yd.length; i > k;) {\n            if (xd[--i] < yd[i]) {\n                for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n                --xd[j];\n                xd[i] += BASE;\n            }\n\n            xd[i] -= yd[i];\n        }\n\n        // Remove trailing zeros.\n        for (; xd[--len] === 0;) xd.pop();\n\n        // Remove leading zeros and adjust exponent accordingly.\n        for (; xd[0] === 0; xd.shift()) --e;\n\n        // Zero?\n        if (!xd[0]) return new Ctor(0);\n\n        y.d = xd;\n        y.e = e;\n\n        //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\n        return external ? round(y, pr) : y;\n    }\n\n\n    function toString(x, isExp, sd) {\n        var k,\n            e = getBase10Exponent(x),\n            str = digitsToString(x.d),\n            len = str.length;\n\n        if (isExp) {\n            if (sd && (k = sd - len) > 0) {\n                str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n            } else if (len > 1) {\n                str = str.charAt(0) + '.' + str.slice(1);\n            }\n\n            str = str + (e < 0 ? 'e' : 'e+') + e;\n        } else if (e < 0) {\n            str = '0.' + getZeroString(-e - 1) + str;\n            if (sd && (k = sd - len) > 0) str += getZeroString(k);\n        } else if (e >= len) {\n            str += getZeroString(e + 1 - len);\n            if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n        } else {\n            if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n            if (sd && (k = sd - len) > 0) {\n                if (e + 1 === len) str += '.';\n                str += getZeroString(k);\n            }\n        }\n\n        return x.s < 0 ? '-' + str : str;\n    }\n\n\n    // Does not strip trailing zeros.\n    function truncate(arr, len) {\n        if (arr.length > len) {\n            arr.length = len;\n            return true;\n        }\n    }\n\n\n    // Decimal methods\n\n\n    /*\n     *  clone\n     *  config/set\n     */\n\n\n    /*\n     * Create and return a Decimal constructor with the same configuration properties as this Decimal\n     * constructor.\n     *\n     */\n    function clone(obj) {\n        var i, p, ps;\n\n        /*\n         * The Decimal constructor and exported function.\n         * Return a new Decimal instance.\n         *\n         * value {number|string|Decimal} A numeric value.\n         *\n         */\n        function Decimal(value) {\n            var x = this;\n\n            // Decimal called without new.\n            if (!(x instanceof Decimal)) return new Decimal(value);\n\n            // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n            // which points to Object.\n            x.constructor = Decimal;\n\n            // Duplicate.\n            if (value instanceof Decimal) {\n                x.s = value.s;\n                x.e = value.e;\n                x.d = (value = value.d) ? value.slice() : value;\n                return;\n            }\n\n            if (typeof value === 'number') {\n\n                // Reject Infinity/NaN.\n                if (value * 0 !== 0) {\n                    throw Error(invalidArgument + value);\n                }\n\n                if (value > 0) {\n                    x.s = 1;\n                } else if (value < 0) {\n                    value = -value;\n                    x.s = -1;\n                } else {\n                    x.s = 0;\n                    x.e = 0;\n                    x.d = [0];\n                    return;\n                }\n\n                // Fast path for small integers.\n                if (value === ~~value && value < 1e7) {\n                    x.e = 0;\n                    x.d = [value];\n                    return;\n                }\n\n                return parseDecimal(x, value.toString());\n            } else if (typeof value !== 'string') {\n                throw Error(invalidArgument + value);\n            }\n\n            // Minus sign?\n            if (value.charCodeAt(0) === 45) {\n                value = value.slice(1);\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n\n            if (isDecimal.test(value)) parseDecimal(x, value);\n            else throw Error(invalidArgument + value);\n        }\n\n        Decimal.prototype = P;\n\n        Decimal.ROUND_UP = 0;\n        Decimal.ROUND_DOWN = 1;\n        Decimal.ROUND_CEIL = 2;\n        Decimal.ROUND_FLOOR = 3;\n        Decimal.ROUND_HALF_UP = 4;\n        Decimal.ROUND_HALF_DOWN = 5;\n        Decimal.ROUND_HALF_EVEN = 6;\n        Decimal.ROUND_HALF_CEIL = 7;\n        Decimal.ROUND_HALF_FLOOR = 8;\n\n        Decimal.clone = clone;\n        Decimal.config = Decimal.set = config;\n\n        if (obj === void 0) obj = {};\n        if (obj) {\n            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\n            for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n        }\n\n        Decimal.config(obj);\n\n        return Decimal;\n    }\n\n\n    /*\n     * Configure global settings for a Decimal constructor.\n     *\n     * `obj` is an object with one or more of the following properties,\n     *\n     *   precision  {number}\n     *   rounding   {number}\n     *   toExpNeg   {number}\n     *   toExpPos   {number}\n     *\n     * E.g. Decimal.config({ precision: 20, rounding: 4 })\n     *\n     */\n    function config(obj) {\n        if (!obj || typeof obj !== 'object') {\n            throw Error(decimalError + 'Object expected');\n        }\n        var i, p, v,\n            ps = [\n                'precision', 1, MAX_DIGITS,\n                'rounding', 0, 8,\n                'toExpNeg', -1 / 0, 0,\n                'toExpPos', 0, 1 / 0\n            ];\n\n        for (i = 0; i < ps.length; i += 3) {\n            if ((v = obj[p = ps[i]]) !== void 0) {\n                if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n                else throw Error(invalidArgument + p + ': ' + v);\n            }\n        }\n\n        if ((v = obj[p = 'LN10']) !== void 0) {\n            if (v == Math.LN10) this[p] = new this(v);\n            else throw Error(invalidArgument + p + ': ' + v);\n        }\n\n        return this;\n    }\n\n\n    // Create and configure initial Decimal constructor.\n    Decimal = clone(Decimal);\n\n    Decimal['default'] = Decimal.Decimal = Decimal;\n\n    // Internal constant.\n    ONE = new Decimal(1);\n\n\n    // Export.\n\n\n    // AMD.\n    if (typeof define == 'function' && define.amd) {\n        define(function () {\n            return Decimal;\n        });\n\n        // Node and other environments that support module.exports.\n    } else if (typeof module != 'undefined' && module.exports) {\n        module.exports = Decimal;\n\n        // Browser.\n    } else {\n        if (!globalScope) {\n            globalScope = typeof self != 'undefined' && self && self.self == self\n                ? self : Function('return this')();\n        }\n\n        globalScope.Decimal = Decimal;\n    }\n})(this);","import { SvgPathEditor } from \"../SvgPathEditor\";\nimport { Point } from \"./Point\";\nimport Decimal, { Coordinate } from \"../../Decimal/Decimal\";\n\nexport class ArgumentA {\n    #radius: Point;\n    #xAxisRotation: Decimal;\n    #largeArcFlag: boolean;\n    #sweepFlag: boolean;\n    #position: Point;\n\n    #editor: SvgPathEditor;\n\n    constructor(radius: Coordinate, xAxisRotation: Decimal, largeArcFlag: boolean, sweepFlag: boolean, position: Coordinate, editor: SvgPathEditor) {\n        this.#radius = new Point(radius, editor);\n        this.#xAxisRotation = xAxisRotation;\n        this.#largeArcFlag = largeArcFlag;\n        this.#sweepFlag = sweepFlag;\n        this.#position = new Point(position, editor);\n        this.#editor = editor;\n    }\n\n\n    get capitalLetter(): string { return 'A'; }\n\n    get smallLetter(): string { return 'a'; }\n\n\n    translate(x: Decimal, y: Decimal) {\n        this.#position.translate(x, y);\n    }\n\n    rotate(cos: Decimal, sin: Decimal) {\n        this.#position.rotate(cos, sin);\n    }\n\n    scale(x: Decimal, y: Decimal) {\n        this.#radius.scale(x, y);\n        this.#position.scale(x, y);\n    }\n\n\n    toAbsoluteCoordinates(current: Coordinate, start: Coordinate): string {\n        current.x = this.#position.x;\n        current.y = this.#position.y;\n        return `A ${this.#radius.x} ${this.#radius.y} ${this.#xAxisRotation} ${this.#largeArcFlag ? 1 : 0} ${this.#sweepFlag ? 1 : 0} ${this.#position.x} ${this.#position.y} `;\n    }\n\n    toRelativeCoordinates(current: Coordinate, start: Coordinate): string {\n        const result = `a ${this.#radius.x} ${this.#radius.y} ${this.#xAxisRotation} ${this.#largeArcFlag ? 1 : 0} ${this.#sweepFlag ? 1 : 0} ${this.#position.x.minus(current.x)} ${this.#position.y.minus(current.y)} `;\n\n        current.x = this.#position.x;\n        current.y = this.#position.y;\n\n        return result;\n    }\n\n    toMinCoordinates(current: Coordinate, start: Coordinate, last: { argument: string, hasDot: boolean; }): string {\n        let lastHasDot: boolean;\n\n        function ToMinimizedString(value: Decimal): string {\n            if (value.isZero()) {\n                lastHasDot = false;\n                return \" 0\";\n            }\n\n            let result = value.toString();\n            if (value.greaterThan(0)) {\n                if (value.lessThan(1)) {\n                    result = result.substring(1);   // remove leading '0'\n                    if (!lastHasDot)\n                        result = ` ${result}`; // add space\n                }\n                else\n                    result = ` ${result}`; // add space\n            }\n            else {\n                // is minus -> no space\n                if (value.greaterThan(-1))\n                    result = `-${result.substring(2)}`; // remove second character: '0'\n            }\n\n            lastHasDot = result.includes('.');\n            return result;\n        }\n\n        lastHasDot = last.hasDot;\n        const radiusX_minimized = ToMinimizedString(this.#radius.x);\n        const radiusY_minimized = ToMinimizedString(this.#radius.y);\n        const xAxisRotation_minimized = ToMinimizedString(this.#xAxisRotation);        \n        const largeArcFlagString = ` ${this.#largeArcFlag ? 1 : 0}`;\n        const sweepFlagString = ` ${this.#sweepFlag ? 1 : 0}`;\n        last.hasDot = lastHasDot;\n\n        let resultBig = \"\";\n        {\n            if (last.argument !== 'A')\n                resultBig += 'A';\n\n            if (last.argument !== 'A' && radiusX_minimized.charAt(0) === ' ')\n                resultBig += radiusX_minimized.substring(1);\n            else\n                resultBig += radiusX_minimized;\n\n            resultBig += radiusY_minimized;\n\n            resultBig += xAxisRotation_minimized;\n\n            resultBig += largeArcFlagString;\n            resultBig += sweepFlagString;\n            lastHasDot = false;\n\n            resultBig += ToMinimizedString(this.#position.x);\n            resultBig += ToMinimizedString(this.#position.y);\n        }\n        const lastHasDotBig = lastHasDot;\n\n        let resultSmall = \"\";\n        {\n            if (last.argument !== 'a')\n                resultSmall += 'a';\n\n            if (last.argument !== 'a' && radiusX_minimized.charAt(0) === ' ')\n                resultSmall += radiusX_minimized.substring(1);\n            else\n                resultSmall += radiusX_minimized;\n\n            resultSmall += radiusY_minimized;\n\n            resultSmall += xAxisRotation_minimized;\n\n            resultSmall += largeArcFlagString;\n            resultSmall += sweepFlagString;\n            lastHasDot = false;\n\n            resultSmall += ToMinimizedString(this.#position.x.minus(current.x));\n            resultSmall += ToMinimizedString(this.#position.y.minus(current.y));\n        }\n        const lastHasDotSmall = lastHasDot;\n        \n        current.x = this.#position.x;\n        current.y = this.#position.y;\n\n        if (resultBig.length <= resultSmall.length) {\n            last.argument = 'A';\n            last.hasDot = lastHasDotBig;\n            return resultBig;\n        }\n        else {\n            last.argument = 'a';\n            last.hasDot = lastHasDotSmall;\n            return resultSmall;\n        }\n    }\n\n    roundCoordinates() {\n        this.#radius.round();\n        this.#xAxisRotation = this.#xAxisRotation.toDecimalPlaces(this.#editor.roundNumber + 1);\n        (this.#inputDiv!.firstChild as HTMLInputElement).value = this.#xAxisRotation.toString();\n        this.#position.round();\n    }\n\n\n    // input elements\n\n    #inputDiv: HTMLDivElement | null = null;\n\n    createInputs(argumentDiv: HTMLDivElement) {\n        this.#radius.createInputPair(argumentDiv);\n\n        this.#inputDiv = document.createElement(\"div\");\n        {\n            const inputXAxisRotation = document.createElement(\"input\");\n            {\n                inputXAxisRotation.value = this.#xAxisRotation.toString();\n                inputXAxisRotation.oninput = this.#onInputXAxisRotation;\n            }\n            this.#inputDiv.appendChild(inputXAxisRotation);\n\n            const inputLargeArcFlag = document.createElement(\"input\");\n            {\n                inputLargeArcFlag.type = \"checkbox\";\n                inputLargeArcFlag.checked = this.#largeArcFlag;\n                inputLargeArcFlag.oninput = this.#onInputLargeArcFlag;\n            }\n            this.#inputDiv.appendChild(inputLargeArcFlag);\n\n            const inputSweepFlag = document.createElement(\"input\");\n            {\n                inputSweepFlag.type = \"checkbox\";\n                inputSweepFlag.checked = this.#sweepFlag;\n                inputSweepFlag.oninput = this.#onInputSweepFlag;\n            }\n            this.#inputDiv.appendChild(inputSweepFlag);\n        }\n        argumentDiv.appendChild(this.#inputDiv);\n\n        this.#position.createInputPair(argumentDiv);\n    }\n\n    removeInputs() {\n        this.#position.removeInputPair();\n\n        const parantDiv = this.#inputDiv!.parentElement!;\n        parantDiv.removeChild(parantDiv.lastChild!);\n        this.#inputDiv = null;\n\n        this.#radius.removeInputPair();\n    }\n\n    #onInputXAxisRotation = (event: Event) => {\n        try {\n            this.#xAxisRotation = new Decimal((event.target as HTMLInputElement).value);\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    };\n\n    #onInputLargeArcFlag = (event: Event) => {\n        this.#largeArcFlag = (event.target as HTMLInputElement).checked;\n        this.#editor.renderPath();\n    };\n\n    #onInputSweepFlag = (event: Event) => {\n        this.#sweepFlag = (event.target as HTMLInputElement).checked;\n        this.#editor.renderPath();\n    }\n\n\n    createDots() {\n        this.#radius.createDot(1);\n        this.#position.createDot(0);\n    }\n\n    updateDotsRadius() {\n        this.#radius.updateDotRadius();\n        this.#position.updateDotRadius();\n    }\n\n    removeDots() {\n        this.#position.removeDot();\n        this.#radius.removeDot();\n    }\n}\n","import Decimal, { Coordinate } from \"../../Decimal/Decimal\";\n\nexport class ArgumentZ {\n    get capitalLetter(): string { return 'Z'; }\n\n    get smallLetter(): string { return 'z'; }\n\n\n    translate(x: Decimal, y: Decimal) { }\n\n    rotate(cos: Decimal, sin: Decimal) { }\n\n    scale(x: Decimal, y: Decimal) { }\n\n\n    toAbsoluteCoordinates(current: Coordinate, start: Coordinate): string {\n        current.x = start.x;\n        current.y = start.y;\n        return \"Z \";\n    }\n\n    toRelativeCoordinates(current: Coordinate, start: Coordinate): string {\n        current.x = start.x;\n        current.y = start.y;\n        return \"z \";\n    }\n\n    toMinCoordinates(current: Coordinate, start: Coordinate, last: { argument: string, hasDot: boolean; }): string {\n        if (last.argument === 'z')\n            return '';\n\n        current.x = start.x;\n        current.y = start.y;\n        last.argument = 'z';\n        last.hasDot = false;\n        return 'z';\n    }\n\n    roundCoordinates() { }\n\n\n    #dotsVisibleInput: HTMLInputElement | null;\n\n    createInputs(argumentDiv: HTMLDivElement) {\n        this.#dotsVisibleInput = argumentDiv.lastChild as HTMLInputElement;\n        this.#dotsVisibleInput.style.display = \"none\";\n    }\n\n    removeInputs() {\n        this.#dotsVisibleInput!.style.removeProperty(\"display\");\n    }\n\n\n    createDots() { }\n\n    updateDotsRadius() { }\n\n    removeDots() { }\n}\n","import { SvgPathEditor } from \"../SvgPathEditor\";\nimport { Point } from \"./Point\";\nimport Decimal, { Coordinate } from \"../../Decimal/Decimal\";\n\nexport class CoordinatesArgument {\n    static newM(coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('M', 'm', [coordinate], editor);\n    }\n\n    static newL(coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('L', 'l', [coordinate], editor);\n    }\n\n    static newQ(coordinate1: Coordinate, coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('Q', 'q', [coordinate1, coordinate], editor);\n    }\n\n    static newT(coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('T', 't', [coordinate], editor);\n    }\n\n    static newC(coordinate1: Coordinate, coordinate2: Coordinate, coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('C', 'c', [coordinate1, coordinate2, coordinate], editor);\n    }\n\n    static newS(coordinate1: Coordinate, coordinate: Coordinate, editor: SvgPathEditor) {\n        return new CoordinatesArgument('S', 's', [coordinate1, coordinate], editor);\n    }\n\n\n\n    #coordinates: Point[];\n\n    #capitalLetter: string;\n    get capitalLetter(): string { return this.#capitalLetter }\n\n    #smallLetter: string;\n    get smallLetter(): string { return this.#smallLetter; }\n\n\n    constructor(capitalLetter: string, smallLetter: string, coordinates: Coordinate[], editor: SvgPathEditor) {\n        this.#capitalLetter = capitalLetter;\n        this.#smallLetter = smallLetter;\n        this.#coordinates = coordinates.map((coordinate) => new Point(coordinate, editor));\n    }\n\n\n    translate(x: Decimal, y: Decimal) {\n        for (const coordinate of this.#coordinates)\n            coordinate.translate(x, y);\n    }\n\n    rotate(cos: Decimal, sin: Decimal) {\n        for (const coordinate of this.#coordinates)\n            coordinate.rotate(cos, sin);\n    }\n\n    scale(x: Decimal, y: Decimal) {\n        for (const coordinate of this.#coordinates)\n            coordinate.scale(x, y);\n    }\n\n\n    toAbsoluteCoordinates(current: Coordinate, start: Coordinate): string {\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].y.equals(current.y)) {\n            current.x = this.#coordinates[0].x;\n            return `H ${this.#coordinates[0].x} `;\n        }\n\n        if (this.#capitalLetter === 'L' && this.#coordinates[0].x.equals(current.x)) {\n            current.y = this.#coordinates[0].y;\n            return `V ${this.#coordinates[0].y} `;\n        }\n\n\n        let result = `${this.#capitalLetter} `;\n        for (const coordinate of this.#coordinates)\n            result += `${coordinate.x} ${coordinate.y} `;\n\n        current.x = this.#coordinates[this.#coordinates.length - 1].x;\n        current.y = this.#coordinates[this.#coordinates.length - 1].y;\n\n        if (this.#capitalLetter === 'M') {\n            start.x = current.x;\n            start.y = current.y;\n        }\n\n        return result;\n    }\n\n    toRelativeCoordinates(current: Coordinate, start: Coordinate): string {\n        if (this.#capitalLetter === 'L') {\n            if (this.#coordinates[0].y.equals(current.y)) {\n                const result = `h ${this.#coordinates[0].x.minus(current.x)} `;\n                current.x = this.#coordinates[0].x;\n                return result;\n            }\n\n            if (this.#coordinates[0].x.equals(current.x)) {\n                const result = `v ${this.#coordinates[0].y.minus(current.y)} `;\n                current.y = this.#coordinates[0].y;\n                return result;\n            }\n        }\n\n\n        let result = `${this.#smallLetter} `;\n        for (const coordinate of this.#coordinates)\n            result += `${coordinate.x.minus(current.x)} ${coordinate.y.minus(current.y)} `;\n\n        current.x = this.#coordinates[this.#coordinates.length - 1].x;\n        current.y = this.#coordinates[this.#coordinates.length - 1].y;\n\n        if (this.#capitalLetter === 'M') {\n            start.x = current.x;\n            start.y = current.y;\n        }\n\n        return result;\n    }\n\n    toMinCoordinates(current: Coordinate, start: Coordinate, last: { argument: string, hasDot: boolean; }): string {\n        let lastHasDot: boolean;\n\n        function ToMinimizedString(value: Decimal): string {\n            if (value.isZero()) {\n                lastHasDot = false;\n                return \" 0\";\n            }\n\n            let result = value.toString();\n            if (value.greaterThan(0)) {\n                if (value.lessThan(1)) {\n                    result = result.substring(1);   // remove leading '0'\n                    if (!lastHasDot)\n                        result = ` ${result}`; // add space\n                }\n                else\n                    result = ` ${result}`; // add space\n            }\n            else {\n                // is minus -> no space\n                if (value.greaterThan(-1))\n                    result = `-${result.substring(2)}`; // remove second character: '0'\n            }\n\n            lastHasDot = result.includes('.');\n            return result;\n        }\n\n\n        if (this.#capitalLetter === 'L') {\n            if (this.#coordinates[0].y.equals(current.y)) {\n                lastHasDot = last.hasDot;\n                let resultBig = ToMinimizedString(this.#coordinates[0].x);\n                if (last.argument !== 'H') {\n                    if (resultBig.charAt(0) === ' ')\n                        resultBig = resultBig.substring(1); // remove ' '\n                    resultBig = `H${resultBig}`;\n                }\n                const lastHasDotBig = lastHasDot;\n\n                lastHasDot = last.hasDot;\n                let resultSmall = ToMinimizedString(this.#coordinates[0].x.minus(current.x));\n                if (last.argument !== 'h') {\n                    if (resultSmall.charAt(0) === ' ')\n                        resultSmall = resultSmall.substring(1); // remove ' '\n                    resultSmall = `h${resultSmall}`;\n                }\n                const lastHasDotSmall = lastHasDot;\n\n                current.x = this.#coordinates[0].x;\n\n                if (resultBig.length <= resultSmall.length) {\n                    last.argument = 'H';\n                    last.hasDot = lastHasDotBig;\n                    return resultBig;\n                }\n                else {\n                    last.argument = 'h';\n                    last.hasDot = lastHasDotSmall;\n                    return resultSmall;\n                }\n            }\n\n            if (this.#coordinates[0].x.equals(current.x)) {\n                lastHasDot = last.hasDot;\n                let resultBig = ToMinimizedString(this.#coordinates[0].y);\n                if (last.argument !== 'V') {\n                    if (resultBig.charAt(0) === ' ')\n                        resultBig = resultBig.substring(1); // remove ' '\n                    resultBig = `V${resultBig}`;\n                }\n                const lastHasDotBig = lastHasDot;\n\n                lastHasDot = last.hasDot;\n                let resultSmall = ToMinimizedString(this.#coordinates[0].y.minus(current.y));\n                if (last.argument !== 'v') {\n                    if (resultSmall.charAt(0) === ' ')\n                        resultSmall = resultSmall.substring(1); // remove ' '\n                    resultSmall = `v${resultSmall}`;\n                }\n                const lastHasDotSmall = lastHasDot;\n\n                current.y = this.#coordinates[0].y;\n\n                if (resultBig.length <= resultSmall.length) {\n                    last.argument = 'V';\n                    last.hasDot = lastHasDotBig;\n                    return resultBig;\n                }\n                else {\n                    last.argument = 'v';\n                    last.hasDot = lastHasDotSmall;\n                    return resultSmall;\n                }\n            }\n        }\n\n\n        lastHasDot = last.hasDot;\n        let resultBig = \"\";\n        {\n            for (let coordinate of this.#coordinates) {\n                resultBig += ToMinimizedString(coordinate.x);\n                resultBig += ToMinimizedString(coordinate.y);\n            }\n\n            if (last.argument !== this.#capitalLetter) {\n                if (resultBig.charAt(0) === ' ')\n                    resultBig = resultBig.substring(1); // remove ' '\n                resultBig = `${this.#capitalLetter}${resultBig}`;\n            }\n        }\n        const lastHasDotBig = lastHasDot;\n\n        lastHasDot = last.hasDot;\n        let resultSmall = \"\";\n        {\n            for (let coordinate of this.#coordinates) {\n                resultSmall += ToMinimizedString(coordinate.x.minus(current.x));\n                resultSmall += ToMinimizedString(coordinate.y.minus(current.y));\n            }\n\n            if (last.argument !== this.#smallLetter) {\n                if (resultSmall.charAt(0) === ' ')\n                    resultSmall = resultSmall.substring(1); // remove ' '\n                resultSmall = `${this.#smallLetter}${resultSmall}`;\n            }\n        }\n        const lastHasDotSmall = lastHasDot;\n\n\n        current.x = this.#coordinates[this.#coordinates.length - 1].x;\n        current.y = this.#coordinates[this.#coordinates.length - 1].y;\n\n        if (this.#capitalLetter === 'M') {\n            start.x = current.x;\n            start.y = current.y;\n        }\n\n        if (resultBig.length <= resultSmall.length) {\n            last.argument = this.#capitalLetter;\n            last.hasDot = lastHasDotBig;\n            return resultBig;\n        }\n        else {\n            last.argument = this.#smallLetter;\n            last.hasDot = lastHasDotSmall;\n            return resultSmall;\n        }\n    }\n\n    roundCoordinates() {\n        for (const coordinate of this.#coordinates)\n            coordinate.round();\n    }\n\n\n    createInputs(argumentDiv: HTMLDivElement) {\n        for (let i = 0; i < this.#coordinates.length; i++)\n            this.#coordinates[i].createInputPair(argumentDiv);\n    }\n\n    removeInputs() {\n        for (let i = this.#coordinates.length - 1; i >= 0; i--)\n            this.#coordinates[i].removeInputPair();\n    }\n\n\n    createDots() {\n        for (let i = this.#coordinates.length - 1, j = 0; i >= 0; i--, j++)\n            this.#coordinates[i].createDot(j);\n    }\n\n    updateDotsRadius() {\n        for (const coordinate of this.#coordinates)\n            coordinate.updateDotRadius();\n    }\n\n    removeDots() {\n        for (let i = 0; i < this.#coordinates.length; i++)\n            this.#coordinates[i].removeDot();\n    }\n}\n","import Decimal, { Coordinate } from \"../../Decimal/Decimal\";\nimport { SvgPathEditor } from \"../SvgPathEditor\";\n\nexport class Point {\n    /** \"p\" is shorthand for point */\n    #p: Coordinate;\n\n    #editor: SvgPathEditor;\n\n\n    constructor(p: Coordinate, editor: SvgPathEditor) {\n        this.#p = p;\n        this.#editor = editor;\n    }\n\n    get x(): Decimal { return this.#p.x; }\n\n    get y(): Decimal { return this.#p.y; }\n\n\n    round() {\n        this.#p.x = this.#p.x.toDecimalPlaces(this.#editor.roundNumber + 1);\n        (this.#pDiv!.firstChild as HTMLInputElement).value = this.#p.x.toString();\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#p.y = this.#p.y.toDecimalPlaces(this.#editor.roundNumber + 1);\n        (this.#pDiv!.lastChild as HTMLInputElement).value = this.#p.y.toString();\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n\n    translate(x: Decimal, y: Decimal) {\n        this.#p.x = this.#p.x.plus(x);\n        this.#p.y = this.#p.y.plus(y);\n\n        (this.#pDiv!.firstChild as HTMLInputElement).value = this.#p.x.toString();\n        (this.#pDiv!.lastChild as HTMLInputElement).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n    rotate(cos: Decimal, sin: Decimal) {\n        const x = cos.mul(this.#p.x).minus(sin.mul(this.#p.y)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        const y = sin.mul(this.#p.x).plus(cos.mul(this.#p.y)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        this.#p.x = x;\n        this.#p.y = y;\n\n        (this.#pDiv!.firstChild as HTMLInputElement).value = this.#p.x.toString();\n        (this.#pDiv!.lastChild as HTMLInputElement).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n    scale(x: Decimal, y: Decimal) {\n        this.#p.x = this.#p.x.mul(x);\n        this.#p.y = this.#p.y.mul(y);\n\n        (this.#pDiv!.firstChild as HTMLInputElement).value = this.#p.x.toString();\n        (this.#pDiv!.lastChild as HTMLInputElement).value = this.#p.y.toString();\n\n        this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n    }\n\n\n\n    // input elements\n\n    #pDiv: HTMLDivElement | null = null;\n\n\n    /** component:\n     * <div>\n     *     <input>\n     *     <input>\n     * </div>\n     */\n    createInputPair(argumentDiv: HTMLDivElement) {\n        this.#pDiv = document.createElement(\"div\");\n        {\n            const inputX = document.createElement(\"input\");\n            {\n                inputX.value = this.#p.x.toString();\n                inputX.oninput = this.#oninputX;\n            }\n            this.#pDiv.appendChild(inputX);\n\n            const inputY = document.createElement(\"input\");\n            {\n                inputY.value = this.#p.y.toString();\n                inputY.oninput = this.#oninputY;\n            }\n            this.#pDiv.appendChild(inputY);\n        }\n        argumentDiv.appendChild(this.#pDiv);\n    }\n\n    /** */\n    removeInputPair() {\n        const parantDiv = this.#pDiv!.parentElement as HTMLDivElement;\n        parantDiv.removeChild(parantDiv.lastChild as ChildNode);\n        this.#pDiv = null;\n    }\n\n\n    #oninputX = (event: Event) => {\n        try {\n            this.#p.x = new Decimal((event.target as HTMLInputElement).value);\n            this.#pDot?.setAttribute(\"cx\", this.#p.x.toString());\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n    #oninputY = (event: Event) => {\n        try {\n            this.#p.y = new Decimal((event.target as HTMLInputElement).value);\n            this.#pDot?.setAttribute(\"cy\", this.#p.y.toString());\n            this.#editor.renderPath();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n\n\n    // circle dots\n\n    #pDot: SVGCircleElement | null = null;\n\n\n    /** component:\n     * <circle cx=\"p.x\" cy=\"p.y\" r=\"circleRadius\" fill=\"color\" stroke-width=\"0\" style=\"cursor: grab|grabbing;\" />\n     */\n    createDot(colorIndex: number) {\n        const colors = [\"blue\", \"green\", \"yellow\", \"red\", \"purple\", \"brown\"];\n        const color = colors[colorIndex % colors.length]\n\n        this.#pDot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        {\n            this.#pDot.setAttribute(\"cx\", this.#p.x.toString());\n            this.#pDot.setAttribute(\"cy\", this.#p.y.toString());\n            this.#pDot.setAttribute(\"r\", this.#editor.circleRadius.toString());\n\n            this.#pDot.setAttribute(\"fill\", color);\n            this.#pDot.setAttribute(\"stroke-width\", \"0\");\n            this.#pDot.style.cursor = \"grab\";\n\n            this.#pDot.onpointerdown = this.#dotPointerDown;\n        }\n        this.#editor.svg.appendChild(this.#pDot);\n    }\n\n    updateDotRadius() {\n        this.#pDot?.setAttribute(\"r\", this.#editor.circleRadius.toString());\n    }\n\n    removeDot() {\n        if (this.#pDot === null)\n            return;\n\n        const parantSvg = this.#pDot.parentElement!;\n        parantSvg.removeChild(this.#pDot);\n\n        this.#pDot = null;\n    }\n\n\n    #dragCoordinateX = 0;\n    #dragCoordinateY = 0;\n    #dragPoint: Coordinate = { x: new Decimal(0), y: new Decimal(0) };\n\n    #dotPointerDown = (event: PointerEvent) => {\n        this.#pDot!.style.cursor = \"grabbing\";\n        this.#pDot!.setPointerCapture(event.pointerId);\n\n        this.#dragCoordinateX = event.clientX;\n        this.#dragPoint.x = this.#p.x;\n        this.#dragCoordinateY = event.clientY;\n        this.#dragPoint.y = this.#p.y;\n\n        this.#pDot!.onpointermove = this.#dotPointerMove;\n        this.#pDot!.onpointerup = this.#dotPointerUp;\n    }\n\n    #dotPointerMove = (event: PointerEvent) => {\n        const dx = event.clientX - this.#dragCoordinateX;\n        const dy = event.clientY - this.#dragCoordinateY;\n\n        this.#p.x = this.#dragPoint.x.plus(new Decimal(dx / this.#editor.svg.clientWidth * this.#editor.viewBoxWidth)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        this.#p.y = this.#dragPoint.y.plus(new Decimal(dy / this.#editor.svg.clientHeight * this.#editor.viewBoxHeight)).toDecimalPlaces(this.#editor.roundNumber + 1);\n        \n        this.#pDot!.setAttribute(\"cx\", this.#p.x.toString());\n        this.#pDot!.setAttribute(\"cy\", this.#p.y.toString());\n        (this.#pDiv!.firstChild as HTMLInputElement).value = this.#p.x.toString();\n        (this.#pDiv!.lastChild as HTMLInputElement).value = this.#p.y.toString();\n        this.#editor.renderPath();\n    }\n\n    #dotPointerUp = (event: PointerEvent) => {\n        this.#pDot!.style.cursor = \"grab\";\n        this.#pDot!.releasePointerCapture(event.pointerId);\n\n        this.#pDot!.onpointermove = null;\n        this.#pDot!.onpointerup = null;\n    }\n}\n","import Decimal from \"../Decimal/Decimal\";\nimport { Argument } from \"./Arguments/Argument\";\nimport { ArgumentA } from \"./Arguments/ArgumentA\";\nimport { ArgumentZ } from \"./Arguments/ArgumentZ\";\nimport { CoordinatesArgument } from \"./Arguments/CoordinatesArgument\";\n\nexport class SvgPathEditor {\n    #lightRadio = document.getElementById(\"light-radio\") as HTMLInputElement;\n    #darkRadio = document.getElementById(\"dark-radio\") as HTMLInputElement;\n\n\n    #readInInput = document.getElementById(\"read-in-input\") as HTMLInputElement;\n    #readInButton = document.getElementById(\"read-in-button\") as HTMLButtonElement;\n    #parsingErrorLabel = document.getElementById(\"parsing-error\") as HTMLDivElement;\n\n    #outputAbsoluteLabel = document.getElementById(\"output-absolute\") as HTMLLabelElement;\n    #outputRelativeLabel = document.getElementById(\"output-relative\") as HTMLLabelElement;\n    #outputMinLabel = document.getElementById(\"output-min\") as HTMLLabelElement;\n    #copyAbsoluteButton = document.getElementById(\"output-absolute-button\") as HTMLButtonElement;\n    #copyRelativeButton = document.getElementById(\"output-relative-button\") as HTMLButtonElement;\n    #copyMinButton = document.getElementById(\"output-min-button\") as HTMLButtonElement;\n\n    #viewBoxXInput = document.getElementById(\"view-box-x\") as HTMLInputElement;\n    #viewBoxYInput = document.getElementById(\"view-box-y\") as HTMLInputElement;\n    #viewBoxWidthInput = document.getElementById(\"view-box-width\") as HTMLInputElement;\n    #viewBoxHeightInput = document.getElementById(\"view-box-height\") as HTMLInputElement;\n\n    #argumentListDiv = document.getElementById(\"argument-list\") as HTMLDivElement;\n    #circleRadiusInput = document.getElementById(\"circle-radius-input\") as HTMLInputElement;\n    #decimalPointUpButton = document.getElementById(\"decimal-point-up\") as HTMLButtonElement;\n    #decimalPointDownButton = document.getElementById(\"decimal-point-down\") as HTMLButtonElement;\n    #pointsRoundingLabel = document.getElementById(\"points-rounding\") as HTMLLabelElement;\n    #pointsRoundingExecuteButton = document.getElementById(\"decimal-point-round\") as HTMLButtonElement;\n    #argumentAddButton = document.getElementById(\"argument-add-button\") as HTMLButtonElement;\n    #argumentCountLabel = document.getElementById(\"argument-count\") as HTMLLabelElement;\n    #argumentRemoveButton = document.getElementById(\"argument-remove-button\") as HTMLButtonElement;\n\n    #styleListDiv = document.getElementById(\"style-list\") as HTMLDivElement;\n    #styleAddButton = document.getElementById(\"style-add-button\") as HTMLButtonElement;\n    #styleCountLabel = document.getElementById(\"style-count\") as HTMLLabelElement;\n    #styleRemoveButton = document.getElementById(\"style-remove-button\") as HTMLButtonElement;\n\n    #translateXInput = document.getElementById(\"translate-x\") as HTMLInputElement;\n    #translateYInput = document.getElementById(\"translate-y\") as HTMLInputElement;\n    #translateButton = document.getElementById(\"translate-button\") as HTMLButtonElement;\n    #rotateInput = document.getElementById(\"rotate\") as HTMLInputElement;\n    #rotateButton = document.getElementById(\"rotate-button\") as HTMLButtonElement;\n    #scaleXInput = document.getElementById(\"scale-x\") as HTMLInputElement;\n    #scaleYInput = document.getElementById(\"scale-y\") as HTMLInputElement;\n    #scaleButton = document.getElementById(\"scale-button\") as HTMLButtonElement;\n\n    svg = document.getElementById(\"svg\") as unknown as SVGElement;\n    svgPath = document.getElementById(\"svg-path\") as unknown as SVGPathElement;\n\n\n    viewBoxX = -8;\n    viewBoxY = -8;\n    viewBoxWidth = 16;\n    viewBoxHeight = 16;\n\n    circleRadius = new Decimal(0.2);\n    roundNumber = 2;\n\n\n    #argumentList: Argument[] = [];\n\n    #addArgument(argument: Argument) {\n        this.#argumentList.push(argument);\n        this.#argumentCountLabel.textContent = this.#argumentList.length.toString();\n\n        /*\n            <div>\n                <select onchange=\"\">\n                    <option>M</option>\n                    <option>L</option>\n                    <option>Q</option>\n                    <option>T</option>\n                    <option selected>C</option>\n                    <option>S</option>\n                </select>\n                <input type=\"checkbox\">\n                {for each coordinate}\n                <div>\n                    <input>\n                    <input>\n                </div>\n                {end for}\n            </div>\n        */\n        const div = document.createElement(\"div\");\n        {\n            const select = document.createElement(\"select\");\n            {\n                const optionM = document.createElement(\"option\");\n                {\n                    optionM.text = \"M\";\n                    optionM.value = \"M\";\n                }\n                select.appendChild(optionM);\n\n                const optionL = document.createElement(\"option\");\n                {\n                    optionL.text = \"L\";\n                    optionL.value = \"L\";\n                }\n                select.appendChild(optionL);\n\n                const optionQ = document.createElement(\"option\");\n                {\n                    optionQ.text = \"Q\";\n                    optionQ.value = \"Q\";\n                }\n                select.appendChild(optionQ);\n\n                const optionT = document.createElement(\"option\");\n                {\n                    optionT.text = \"T\";\n                    optionT.value = \"T\";\n                }\n                select.appendChild(optionT);\n\n                const optionC = document.createElement(\"option\");\n                {\n                    optionC.text = \"C\";\n                    optionC.value = \"C\";\n                }\n                select.appendChild(optionC);\n\n                const optionS = document.createElement(\"option\");\n                {\n                    optionS.text = \"S\";\n                    optionS.value = \"S\";\n                }\n                select.appendChild(optionS);\n\n                const optionA = document.createElement(\"option\");\n                {\n                    optionA.text = \"A\";\n                    optionA.value = \"A\";\n                }\n                select.appendChild(optionA);\n\n                const optionZ = document.createElement(\"option\");\n                {\n                    optionZ.text = \"Z\";\n                    optionZ.value = \"Z\";\n                }\n                select.appendChild(optionZ);\n\n                select.value = argument.capitalLetter;\n\n                select.onchange = () => {\n                    const index = this.#argumentList.indexOf(argument);\n\n                    this.#argumentList[index].removeDots();\n                    this.#argumentList[index].removeInputs();\n                    input.checked = false;\n\n                    switch (select.value) {\n                        case 'M': argument = CoordinatesArgument.newM({ x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'L': argument = CoordinatesArgument.newL({ x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'Q': argument = CoordinatesArgument.newQ({ x: new Decimal(0), y: new Decimal(0) }, { x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'T': argument = CoordinatesArgument.newT({ x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'C': argument = CoordinatesArgument.newC({ x: new Decimal(0), y: new Decimal(0) }, { x: new Decimal(0), y: new Decimal(0) }, { x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'S': argument = CoordinatesArgument.newS({ x: new Decimal(0), y: new Decimal(0) }, { x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'A': argument = new ArgumentA({ x: new Decimal(0), y: new Decimal(0) }, new Decimal(0), false, false, { x: new Decimal(0), y: new Decimal(0) }, this); break;\n                        case 'Z': argument = new ArgumentZ(); break;\n                    };\n                    argument.createInputs(div);\n\n                    this.#argumentList[index] = argument;\n                    this.renderPath();\n                };\n            }\n            div.appendChild(select);\n\n            const input = document.createElement(\"input\");\n            {\n                input.setAttribute(\"type\", \"checkbox\");\n                input.onchange = () => {\n                    if (input.checked)\n                        argument.createDots();\n                    else\n                        argument.removeDots();\n                }\n            }\n            div.appendChild(input);\n\n            argument.createInputs(div);\n        }\n        this.#argumentListDiv.appendChild(div);\n    }\n\n    #removeArgument() {\n        if (this.#argumentList.length === 0)\n            return;\n\n        const argument = this.#argumentList.pop()!;\n        this.#argumentCountLabel.textContent = this.#argumentList.length.toString();\n\n        this.#argumentListDiv.removeChild(this.#argumentListDiv.lastChild!);\n        argument.removeDots();\n    }\n\n\n    #styleList: { key: string, value: string; }[] = [];\n\n    #addStyle(style: { key: string, value: string; }) {\n        this.#styleList.push(style);\n        this.#styleCountLabel.textContent = this.#styleList.length.toString();\n\n        const inputKey = document.createElement(\"input\");\n        inputKey.value = style.key;\n        inputKey.oninput = (event) => {\n            style.key = (event.target as HTMLInputElement).value;\n            this.renderPath();\n        }\n        this.#styleListDiv.appendChild(inputKey);\n\n        const inputValue = document.createElement(\"input\");\n        inputValue.value = style.value;\n        inputValue.oninput = (event) => {\n            style.value = (event.target as HTMLInputElement).value;\n            this.renderPath();\n        }\n        this.#styleListDiv.appendChild(inputValue);\n    }\n\n    #removeStyle() {\n        this.#styleList.pop();\n        this.#styleCountLabel.textContent = this.#styleList.length.toString();\n\n        for (let i = 0; i < 2; i++)\n            this.#styleListDiv.removeChild(this.#styleListDiv.lastChild!);\n    }\n\n\n    constructor() {\n        const theme = localStorage.getItem(\"theme\");\n        if (theme !== null)\n            if (theme === \"light\")\n                this.#lightRadio.checked = true;\n            else\n                this.#darkRadio.checked = true;\n\n        this.#lightRadio.onclick = () => localStorage.setItem(\"theme\", \"light\");\n        this.#darkRadio.onclick = () => localStorage.setItem(\"theme\", \"dark\");\n\n\n        this.#viewBoxXInput.value = this.viewBoxX.toString();\n        this.#viewBoxYInput.value = this.viewBoxY.toString();\n        this.#viewBoxWidthInput.value = this.viewBoxWidth.toString();\n        this.#viewBoxHeightInput.value = this.viewBoxHeight.toString();\n        this.#circleRadiusInput.value = this.circleRadius.toString();\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n\n\n        this.#readInButton.onclick = this.#onReadInPath;\n        this.#copyAbsoluteButton.onclick = this.#onCopyToClipboardAbsolute;\n        this.#copyRelativeButton.onclick = this.#onCopyToClipboardRelative;\n        this.#copyMinButton.onclick = this.#onCopyToClipboardMin;\n\n        this.#viewBoxXInput.oninput = this.#onViewBoxX;\n        this.#viewBoxYInput.oninput = this.#onViewBoxY;\n        this.#viewBoxWidthInput.oninput = this.#onViewBoxWidth;\n        this.#viewBoxHeightInput.oninput = this.#onViewBoxHeight;\n\n        this.#circleRadiusInput.oninput = this.#onCircleRadius;\n        this.#decimalPointUpButton.onclick = this.#onDecimalPointUp;\n        this.#decimalPointDownButton.onclick = this.#onDecimalPointDown;\n        this.#pointsRoundingExecuteButton.onclick = this.#onPointsRoundingExecute;\n        this.#argumentAddButton.onclick = this.#onArgumentAdd;\n        this.#argumentRemoveButton.onclick = this.#onArgumentRemove;\n\n        this.#styleAddButton.onclick = this.#onStyleAdd;\n        this.#styleRemoveButton.onclick = this.#onStyleRemove;\n\n        this.#translateButton.onclick = this.#onTranslate;\n        this.#rotateButton.onclick = this.#onRotate;\n        this.#scaleButton.onclick = this.#onScale;\n\n\n        this.#addArgument(CoordinatesArgument.newM({ x: new Decimal(-5), y: new Decimal(-5) }, this));\n        this.#addArgument(CoordinatesArgument.newL({ x: new Decimal(5), y: new Decimal(-5) }, this));\n        this.#addArgument(CoordinatesArgument.newQ({ x: new Decimal(0), y: new Decimal(6) }, { x: new Decimal(-5), y: new Decimal(-5) }, this));\n        this.#addArgument(new ArgumentZ());\n\n        this.#addStyle({ key: \"stroke\", value: \"#AAA\" });\n        this.#addStyle({ key: \"stroke-width\", value: \"0.5\" });\n        this.#addStyle({ key: \"fill\", value: \"none\" });\n\n\n        this.renderSvgViewBox();\n        this.renderPath();\n    }\n\n\n\n    #onReadInPath = () => {\n        this.#parsingErrorLabel.style.display = \"none\";\n        this.#parsingErrorLabel.textContent = \"\";\n\n        const me = this;\n        const input = this.#readInInput.value;\n        if (input.length === 0)\n            return;\n\n        // '<path '\n        if (input.length <= 0 || input[0] !== '<')\n            return renderError(\"At position 1: '<' expected\");\n        if (input.length <= 1 || input[1] !== 'p')\n            return renderError(\"At position 2: 'p' expected\");\n        if (input.length <= 2 || input[2] !== 'a')\n            return renderError(\"At position 3: 'a' expected\");\n        if (input.length <= 3 || input[3] !== 't')\n            return renderError(\"At position 4: 't' expected\");\n        if (input.length <= 4 || input[4] !== 'h')\n            return renderError(\"At position 5: 'h' expected\");\n        if (input.length <= 5 || input[5] !== ' ')\n            return renderError(\"At position 6: ' ' expected\");\n        if (input.length <= 6)\n            return renderError(\"At position 7: 'd' or 'i' expected\");\n\n        // 'id=\"...\" '\n        let parseIndex = 6;\n        if (input[6] === 'i') {\n            if (input.length <= 7 || input[7] !== 'd')\n                return renderError(\"At position 8: 'd' expected\");\n            if (input.length <= 8 || input[8] !== '=')\n                return renderError(\"At position 9: '=' expected\");\n            if (input.length <= 9 || input[9] !== '\"')\n                return renderError(\"At position 10: '\\\"' expected\");\n\n            parseIndex = 10;\n            do {\n                if (input.length <= parseIndex)\n                    return renderError(`At position ${input.length + 1}: ending \" expected`);\n            } while (input[parseIndex++] !== '\"');\n\n            if (input.length <= parseIndex || input[parseIndex] !== ' ')\n                return renderError(`At position ${parseIndex + 1}: ' ' expected`);\n            parseIndex++;\n        }\n\n        // 'd=\"'\n        if (input.length <= parseIndex || input[parseIndex] !== 'd')\n            return renderError(`At position ${parseIndex + 1}: 'd' expected`);\n        parseIndex++;\n        if (input.length <= parseIndex || input[parseIndex] !== '=')\n            return renderError(`At position ${parseIndex + 1}: '=' expected`);\n        parseIndex++;\n        if (input.length <= parseIndex || input[parseIndex] !== '\"')\n            return renderError(`At position ${parseIndex + 1}: '\\\"' expected`);\n        parseIndex++;\n\n\n        let originX = new Decimal(0);\n        let originY = new Decimal(0);\n        let startX = new Decimal(0);\n        let startY = new Decimal(0);\n        let lastArgument = '';\n        const result: Argument[] = [];\n\n        while (input.length > parseIndex && input[parseIndex] !== '\"') {\n            switch (input[parseIndex++]) {\n                case ' ':\n                case ',':\n                    break;\n\n                case 'M': parse_M(); lastArgument = 'M'; break;\n                case 'm': parse_m(); lastArgument = 'm'; break;\n\n                case 'H': parse_H(); lastArgument = 'H'; break;\n                case 'h': parse_h(); lastArgument = 'h'; break;\n\n                case 'V': parse_V(); lastArgument = 'V'; break;\n                case 'v': parse_v(); lastArgument = 'v'; break;\n\n                case 'L': parse_L(); lastArgument = 'L'; break;\n                case 'l': parse_l(); lastArgument = 'l'; break;\n\n                case 'Q': parse_Q(); lastArgument = 'Q'; break;\n                case 'q': parse_q(); lastArgument = 'q'; break;\n\n                case 'T': parse_T(); lastArgument = 'T'; break;\n                case 't': parse_t(); lastArgument = 't'; break;\n\n                case 'C': parse_C(); lastArgument = 'C'; break;\n                case 'c': parse_c(); lastArgument = 'c'; break;\n\n                case 'S': parse_S(); lastArgument = 'S'; break;\n                case 's': parse_s(); lastArgument = 's'; break;\n\n                case 'A': parse_A(); lastArgument = 'A'; break;\n                case 'a': parse_a(); lastArgument = 'a'; break;\n\n                case 'Z':\n                case 'z':\n                    originX = startX;\n                    originY = startY;\n                    result.push(new ArgumentZ());\n                    lastArgument = '';\n                    break;\n\n                case '-':\n                case '.':\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': {\n                    parseIndex--;\n                    switch (lastArgument) {\n                        case '': return renderError(`At position ${parseIndex}: unexpected '${input[parseIndex]}'`);\n\n                        case 'M': parse_M(); lastArgument = 'M'; break;\n                        case 'm': parse_m(); lastArgument = 'm'; break;\n\n                        case 'H': parse_H(); lastArgument = 'H'; break;\n                        case 'h': parse_h(); lastArgument = 'h'; break;\n\n                        case 'V': parse_V(); lastArgument = 'V'; break;\n                        case 'v': parse_v(); lastArgument = 'v'; break;\n\n                        case 'L': parse_L(); lastArgument = 'L'; break;\n                        case 'l': parse_l(); lastArgument = 'l'; break;\n\n                        case 'Q': parse_Q(); lastArgument = 'Q'; break;\n                        case 'q': parse_q(); lastArgument = 'q'; break;\n\n                        case 'T': parse_T(); lastArgument = 'T'; break;\n                        case 't': parse_t(); lastArgument = 't'; break;\n\n                        case 'C': parse_C(); lastArgument = 'C'; break;\n                        case 'c': parse_c(); lastArgument = 'c'; break;\n\n                        case 'S': parse_S(); lastArgument = 'S'; break;\n                        case 's': parse_s(); lastArgument = 's'; break;\n\n                        case 'A': parse_A(); lastArgument = 'A'; break;\n                        case 'a': parse_a(); lastArgument = 'a'; break;\n                    }\n                    break;\n                }\n\n                default:\n                    return renderError(`At position ${parseIndex - 1}: unexpected '${input[parseIndex - 1]}'`);\n            }\n\n            if (this.#parsingErrorLabel.style.display === \"block\")\n                return;\n\n\n            function parse_M() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_m();\n            }\n            function parse_m() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                startX = originX;\n                startY = originY;\n                result.push(CoordinatesArgument.newM({ x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_H() {\n                originX = new Decimal(0);\n                parse_h();\n            }\n            function parse_h() {\n                originX = originX.plus(parseNumber());\n                result.push(CoordinatesArgument.newL({ x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_V() {\n                originY = new Decimal(0);\n                parse_v();\n            }\n            function parse_v() {\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newL({ x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_L() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_l();\n            }\n            function parse_l() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newL({ x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_Q() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_q();\n            }\n            function parse_q() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newQ({ x: new Decimal(x1), y: new Decimal(y1) }, { x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_T() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_t();\n            }\n            function parse_t() {\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newT({ x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_C() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_c();\n            }\n            function parse_c() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                const x2 = originX.plus(parseNumber());\n                const y2 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newC({ x: new Decimal(x1), y: new Decimal(y1) }, { x: new Decimal(x2), y: new Decimal(y2) }, { x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_S() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_s();\n            }\n            function parse_s() {\n                const x1 = originX.plus(parseNumber());\n                const y1 = originY.plus(parseNumber());\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(CoordinatesArgument.newS({ x: new Decimal(x1), y: new Decimal(y1) }, { x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n            function parse_A() {\n                originX = new Decimal(0);\n                originY = new Decimal(0);\n                parse_a();\n            }\n            function parse_a() {\n                const radiusX = parseNumber();\n                const radiusY = parseNumber();\n                const xAxisRotation = parseNumber();\n                const largeArcFlag = parseFlag();\n                const sweepFlag = parseFlag();\n                originX = originX.plus(parseNumber());\n                originY = originY.plus(parseNumber());\n                result.push(new ArgumentA({ x: radiusX, y: radiusY }, xAxisRotation, largeArcFlag, sweepFlag, { x: new Decimal(originX), y: new Decimal(originY) }, me));\n            }\n\n\n            function parseNumber(): Decimal {\n                while (true) {\n                    if (input.length <= parseIndex || input[parseIndex] === '\"') {\n                        renderError(`Failed parsing number at position ${parseIndex + 1}`);\n                        return new Decimal(0);\n                    }\n                    if (input[parseIndex] !== ' ' && input[parseIndex] !== ',')\n                        break;\n                    parseIndex++;\n                }\n\n                const startIndex = parseIndex;\n                let dotVisited = false;\n                if (input[parseIndex] === '-')\n                    parseIndex++;\n                while (true) {\n                    if (input.length <= parseIndex) {\n                        renderError(`Failed parsing number at position ${startIndex + 1} - ${parseIndex + 1}`);\n                        return new Decimal(0);\n                    }\n\n                    if (input[parseIndex] === '.')\n                        if (!dotVisited) {\n                            dotVisited = true;\n                            parseIndex++;\n                        }\n                        else\n                            break;\n                    else if (input[parseIndex] === 'e') {\n                        dotVisited = true;\n                        if (parseIndex + 1 < input.length && input[parseIndex + 1] === '-')\n                            parseIndex++;\n                    }\n                    else\n                        if (input[parseIndex] !== '0'\n                            && input[parseIndex] !== '1'\n                            && input[parseIndex] !== '2'\n                            && input[parseIndex] !== '3'\n                            && input[parseIndex] !== '4'\n                            && input[parseIndex] !== '5'\n                            && input[parseIndex] !== '6'\n                            && input[parseIndex] !== '7'\n                            && input[parseIndex] !== '8'\n                            && input[parseIndex] !== '9')\n                            break;\n                    parseIndex++;\n                }\n\n                try {\n                    return new Decimal(input.substring(startIndex, parseIndex));\n                }\n                catch {\n                    renderError(`Failed parsing number at position ${startIndex + 1} - ${parseIndex + 1}`);\n                    return new Decimal(0);\n                }\n            }\n\n            function parseFlag(): boolean {\n                while (true) {\n                    if (input.length <= parseIndex || input[parseIndex] === '\"') {\n                        renderError(`Failed parsing number at position ${parseIndex + 1}`);\n                        return false;\n                    }\n                    if (input[parseIndex] !== ' ' && input[parseIndex] !== ',')\n                        break;\n                    parseIndex++;\n                }\n\n                if (input.length <= parseIndex) {\n                    renderError(`At position ${parseIndex}: '0' or '1' expected`);\n                    return false;\n                }\n\n                switch (input[parseIndex++]) {\n                    case '0':\n                        return false;\n                    case '1':\n                        return true;\n                    default:\n                        renderError(`At position ${parseIndex}: '0' or '1' expected`);\n                        return false;\n                }\n            }\n        }\n\n        if (input.length <= parseIndex)\n            return renderError(`At position ${input.length + 1}: ending \" expected`);\n\n\n        while (this.#argumentList.length > 0)\n            this.#removeArgument();\n        for (const argument of result)\n            this.#addArgument(argument);\n\n        this.renderPath();\n\n\n        function renderError(errorMessage: string) {\n            if (me.#parsingErrorLabel.style.display === \"block\")\n                return;\n            me.#parsingErrorLabel.style.display = \"block\";\n            me.#parsingErrorLabel.textContent = errorMessage;\n        }\n    }\n\n    #onCopyToClipboardAbsolute = () => {\n        navigator.clipboard.writeText(this.#outputAbsoluteLabel.textContent!);\n    }\n\n    #onCopyToClipboardRelative = () => {\n        navigator.clipboard.writeText(this.#outputRelativeLabel.textContent!);\n    }\n\n    #onCopyToClipboardMin = () => {\n        navigator.clipboard.writeText(this.#outputMinLabel.textContent!);\n    }\n\n\n    #onViewBoxX = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxXInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxX = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    #onViewBoxY = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxYInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxY = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    #onViewBoxWidth = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxWidthInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxWidth = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n    #onViewBoxHeight = () => {\n        const viewBoxValue = parseFloat(this.#viewBoxHeightInput.value);\n        if (isNaN(viewBoxValue))\n            return;\n\n        this.viewBoxHeight = viewBoxValue;\n        this.renderSvgViewBox();\n    }\n\n\n    #onCircleRadius = () => {\n        try {\n            this.circleRadius = new Decimal(this.#circleRadiusInput.value);\n            for (const argument of this.#argumentList)\n                argument.updateDotsRadius();\n        }\n        catch {\n            // ignore invalid user input\n        }\n    }\n\n\n    #onDecimalPointUp = () => {\n        if (this.roundNumber >= 6)\n            return;\n\n        this.roundNumber++;\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n    }\n\n    #onDecimalPointDown = () => {\n        if (this.roundNumber <= 1)\n            return;\n\n        this.roundNumber--;\n        this.#pointsRoundingLabel.textContent = this.roundNumber.toString();\n    }\n    \n    #onPointsRoundingExecute = () => {\n        for (const argument of this.#argumentList)\n            argument.roundCoordinates();\n\n        this.renderPath();\n    }\n\n\n    #onArgumentAdd = () => {\n        this.#addArgument(CoordinatesArgument.newM({ x: new Decimal(0), y: new Decimal(0) }, this));\n        this.renderPath();\n    }\n\n    #onArgumentRemove = () => {\n        if (this.#argumentList.length === 0)\n            return;\n\n        this.#removeArgument();\n        this.renderPath();\n    }\n\n\n    #onStyleAdd = () => {\n        this.#addStyle({ key: \"\", value: \"\" });\n    }\n\n    #onStyleRemove = () => {\n        if (this.#styleList.length === 0)\n            return;\n\n        this.#removeStyle();\n        this.renderPath();\n    }\n\n\n    #onTranslate = () => {\n        try {\n            const x = new Decimal(this.#translateXInput.value);\n            const y = new Decimal(this.#translateYInput.value);\n\n            for (const argument of this.#argumentList)\n                argument.translate(x, y);\n        }\n        catch {\n            // ignore invalid user input\n        }\n\n        this.renderPath();\n    }\n\n    #onRotate = () => {\n        const rotation = parseFloat(this.#rotateInput.value);\n        if (isNaN(rotation))\n            return;\n\n        /**\n         * rotate matrix\n         *\n         * | cos a  -sin a | * | x |\n         * | sin a   cos a |   | y |\n         * \n         * => \n         * \n         * x = cos a * x - sin a * y\n         * y = sin a * x + cos a * y\n         **/\n        const radian = rotation * Math.PI / 180;\n        const cos = new Decimal(Math.cos(radian));\n        const sin = new Decimal(Math.sin(radian));\n\n        for (const argument of this.#argumentList)\n            argument.rotate(cos, sin);\n\n        this.renderPath();\n    }\n\n    #onScale = () => {\n        try {\n            const x = new Decimal(this.#scaleXInput.value);\n            const y = new Decimal(this.#scaleYInput.value);\n\n            for (const argument of this.#argumentList)\n                argument.scale(x, y);\n        }\n        catch {\n            // ignore invalid user input\n        }\n\n        this.renderPath();\n    }\n\n\n\n    /** updates the \"viewBox\" attribute of the \"svg\" element */\n    renderSvgViewBox = () => {\n        this.svg.setAttribute(\"viewBox\", `${this.viewBoxX.toString()} ${this.viewBoxY.toString()} ${this.viewBoxWidth.toString()} ${this.viewBoxHeight.toString()}`);\n    }\n\n    /** updates all attributes of the \"path\" element and updates the output labels */\n    renderPath = () => {\n        const createPath = (argumentToString: (argument: Argument) => string): string => {\n            let path = `<path d=\"`;\n\n            for (const argument of this.#argumentList)\n                path += argumentToString(argument);\n            if (path[path.length - 1] === ' ')\n                path = path.substring(0, path.length - 1);\n\n            path += `\" `;\n\n            for (const style of this.#styleList)\n                if (style.key !== \"\")\n                    path += `${style.key}=\"${style.value}\" `;\n\n            path += `/>`;\n\n            return path;\n        }\n\n        // absolute path\n        {\n            const current = { x: new Decimal(0), y: new Decimal(0) };\n            const start = { x: new Decimal(0), y: new Decimal(0) };\n            this.#outputAbsoluteLabel.textContent = createPath((argument) => argument.toAbsoluteCoordinates(current, start));\n        }\n\n        // relative path\n        {\n            const current = { x: new Decimal(0), y: new Decimal(0) };\n            const start = { x: new Decimal(0), y: new Decimal(0) };\n            this.#outputRelativeLabel.textContent = createPath((argument) => argument.toRelativeCoordinates(current, start));\n        }\n\n        // min path\n        {\n            const current = { x: new Decimal(0), y: new Decimal(0) };\n            const start = { x: new Decimal(0), y: new Decimal(0) };\n            const last = { argument: '', hasDot: false };\n            this.#outputMinLabel.textContent = createPath((argument) => argument.toMinCoordinates(current, start, last));\n        }\n\n\n        // remove all attributes\n        for (const attribute of this.svgPath.attributes)\n            this.svgPath.removeAttribute(attribute.name);\n        // set attribute \"d\" with absolutePath\n        this.svgPath.setAttribute(\"d\", this.#outputAbsoluteLabel.textContent.substring(9, this.#outputAbsoluteLabel.textContent.indexOf('\"', 9)));\n        // add other attributes\n        for (const style of this.#styleList)\n            if (style.key !== \"\")\n                this.svgPath.setAttribute(style.key, style.value);\n    }\n}\n","import { SvgPathEditor } from \"./SvgPathEditor/SvgPathEditor\";\n\nnew SvgPathEditor();\n"],"names":["Point","Decimal","_radius","_xAxisRotation","_largeArcFlag","_sweepFlag","_position","_editor","_inputDiv","_onInputXAxisRotation","_onInputLargeArcFlag","_onInputSweepFlag","ArgumentA","radius","xAxisRotation","largeArcFlag","sweepFlag","position","editor","event","translate","x","y","rotate","cos","sin","scale","toAbsoluteCoordinates","current","start","toRelativeCoordinates","result","toMinCoordinates","last","lastHasDot","ToMinimizedString","value","radiusX_minimized","radiusY_minimized","xAxisRotation_minimized","largeArcFlagString","sweepFlagString","resultBig","lastHasDotBig","resultSmall","lastHasDotSmall","roundCoordinates","createInputs","argumentDiv","document","inputXAxisRotation","inputLargeArcFlag","inputSweepFlag","removeInputs","parantDiv","createDots","updateDotsRadius","removeDots","_dotsVisibleInput","ArgumentZ","_coordinates","_capitalLetter","_smallLetter","CoordinatesArgument","capitalLetter","smallLetter","coordinates","coordinate","_iteratorError","result1","result2","resultBig1","lastHasDotBig1","resultSmall1","lastHasDotSmall1","resultBig2","lastHasDotBig2","resultSmall2","_iteratorError1","coordinate1","lastHasDotSmall2","i","j","newM","newL","newQ","newT","newC","coordinate2","newS","_p","_pDiv","_oninputX","_oninputY","_pDot","_dragCoordinateX","_dragCoordinateY","_dragPoint","_dotPointerDown","_dotPointerMove","_dotPointerUp","p","dx","dy","round","createInputPair","inputX","inputY","removeInputPair","createDot","colorIndex","colors","color","updateDotRadius","removeDot","parantSvg","_lightRadio","_darkRadio","_readInInput","_readInButton","_parsingErrorLabel","_outputAbsoluteLabel","_outputRelativeLabel","_outputMinLabel","_copyAbsoluteButton","_copyRelativeButton","_copyMinButton","_viewBoxXInput","_viewBoxYInput","_viewBoxWidthInput","_viewBoxHeightInput","_argumentListDiv","_circleRadiusInput","_decimalPointUpButton","_decimalPointDownButton","_pointsRoundingLabel","_pointsRoundingExecuteButton","_argumentAddButton","_argumentCountLabel","_argumentRemoveButton","_styleListDiv","_styleAddButton","_styleCountLabel","_styleRemoveButton","_translateXInput","_translateYInput","_translateButton","_rotateInput","_rotateButton","_scaleXInput","_scaleYInput","_scaleButton","_argumentList","addArgument","removeArgument","_styleList","addStyle","removeStyle","_onReadInPath","_onCopyToClipboardAbsolute","_onCopyToClipboardRelative","_onCopyToClipboardMin","_onViewBoxX","_onViewBoxY","_onViewBoxWidth","_onViewBoxHeight","_onCircleRadius","_onDecimalPointUp","_onDecimalPointDown","_onPointsRoundingExecute","_onArgumentAdd","_onArgumentRemove","_onStyleAdd","_onStyleRemove","_onTranslate","_onRotate","_onScale","SvgPathEditor","renderError","errorMessage","me","input","parseIndex","originX","originY","startX","startY","lastArgument","parse_M","parse_m","parseNumber","parse_H","parse_h","parse_V","parse_v","parse_L","parse_l","parse_Q","parse_q","x1","y1","parse_T","parse_t","parse_C","parse_c","x2","y2","parse_S","parse_s","parse_A","parse_a","radiusX","radiusY","parseFlag","startIndex","dotVisited","argument","navigator","viewBoxValue","parseFloat","isNaN","rotation","radian","Math","createPath","argumentToString","path","style","current1","start1","current2","start2","attribute","theme","localStorage","div","select","optionM","optionL","optionQ","optionT","optionC","optionS","optionA","optionZ","index","inputKey","inputValue"],"mappings":";;;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC,eAAe,EAAE;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,yDAAyD;AACzD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;;AAGT;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,OAAO;AACtD;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,aAAa;;AAEneAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,aAAa;;AAEhC;AACA,6BAA6B,SAAS;AACtC;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,IAAI;;AAEzB;AACA,sBAAsB,SAAS;AAC/B;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,SAAS;;AAExB;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uBAAuB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,eAAe;;AAE7C;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,eAAe,aAAa;;AAE5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,IAAI;AACpC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;;AAEA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,UAAU;;AAEjC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,eAAe,IAAI;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA,oBAAoB,yBAAyB;;AAE7C;AACA,+BAA+B,+BAA+B;AAC9D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA,cAAc;AACd;AACA;;AAEA,mBAAmB,IAAI;AACvB;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,SAAS;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,SAAS;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,cAAc;;AAE1C;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,IAAI;AAC5B;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kCAAkC,OAAO;;AAEzC;AACA,4BAA4B,MAAM;AAClC;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,gBAAgB;;AAE/B;AACA,eAAe,aAAa;;AAE5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB;AACA,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,MAAM,SAAS,KAA4B,IAAI,cAAc;AAC7D,QAAQ,cAAc;;AAEtB;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,EAAE,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC39DyB;AAC4B;IAGxDE,uCACAC,8CACAC,6CACAC,0CACAC,yCAEAC,uCAwJA,iBAAiB;AAEjBC,yCA6CAC,qDAUAC,oDAKAC;AA7NG,IAAMC,0BAAN;;aAAMA,UASGC,MAAkB,EAAEC,aAAsB,EAAEC,YAAqB,EAAEC,SAAkB,EAAEC,QAAoB,EAAEC,MAAqB;;gCATrIN;QACTV,gCAAAA;;mBAAAA,KAAAA;;QACAC,gCAAAA;;mBAAAA,KAAAA;;QACAC,gCAAAA;;mBAAAA,KAAAA;;QACAC,gCAAAA;;mBAAAA,KAAAA;;QACAC,gCAAAA;;mBAAAA,KAAAA;;QAEAC,gCAAAA;;mBAAAA,KAAAA;;QA0JAC,gCAAAA;;mBAAmC;;QA6CnCC,gCAAAA;;mBAAwB,SAACU;gBACrB,IAAI;oDACKhB,gBAAiB,IAAIF,yDAAOA,CAAEkB,MAAM,MAAM,CAAsB,KAAK;oBAC1E,gCAAKZ,SAAQ,UAAU;gBAC3B,EACA,UAAM;gBACF,4BAA4B;gBAChC;YACJ;;QAEAG,gCAAAA;;mBAAuB,SAACS;gDACff,eAAiBe,MAAM,MAAM,CAAsB,OAAO;gBAC/D,gCAAKZ,SAAQ,UAAU;YAC3B;;QAEAI,gCAAAA;;mBAAoB,SAACQ;gDACZd,YAAcc,MAAM,MAAM,CAAsB,OAAO;gBAC5D,gCAAKZ,SAAQ,UAAU;YAC3B;;uCAtNSL,SAAU,IAAIF,yCAAKA,CAACa,QAAQK;uCAC5Bf,gBAAiBW;uCACjBV,eAAgBW;uCAChBV,YAAaW;uCACbV,WAAY,IAAIN,yCAAKA,CAACiB,UAAUC;uCAChCX,SAAUW;;kBAfVN;;YAmBL;iBAAJ;gBAA8B,OAAO;YAAK;;;YAEtC;iBAAJ;gBAA4B,OAAO;YAAK;;;YAGxCQ,KAAAA;mBAAAA,SAAAA,UAAUC,CAAU,EAAEC,CAAU;gBAC5B,6BAAI,EAAChB,WAAU,SAAS,CAACe,GAAGC;YAChC;;;YAEAC,KAAAA;mBAAAA,SAAAA,OAAOC,GAAY,EAAEC,GAAY;gBAC7B,6BAAI,EAACnB,WAAU,MAAM,CAACkB,KAAKC;YAC/B;;;YAEAC,KAAAA;mBAAAA,SAAAA,MAAML,CAAU,EAAEC,CAAU;gBACxB,6BAAI,EAACpB,SAAQ,KAAK,CAACmB,GAAGC;gBACtB,6BAAI,EAAChB,WAAU,KAAK,CAACe,GAAGC;YAC5B;;;YAGAK,KAAAA;mBAAAA,SAAAA,sBAAsBC,OAAmB,EAAEC,KAAiB;gBACxDD,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAC5BsB,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAC5B,OAAQ,KAAsB,OAAlB,6BAAI,EAACJ,SAAQ,CAAC,EAAC,YAAG,6BAAI,EAACA,SAAQ,CAAC,EAAC,KAA0B,gCAAvB,IAAI,EAACC,iBAAe,KAAiC,OAA9B,6BAAI,EAACC,iBAAgB,IAAI,GAAE,KAA8B,OAA3B,6BAAI,EAACC,cAAa,IAAI,GAAE,KAAuB,OAApB,6BAAI,EAACC,WAAU,CAAC,EAAC,KAAoB,OAAjB,6BAAI,EAACA,WAAU,CAAC,EAAC;YACzK;;;YAEAwB,KAAAA;mBAAAA,SAAAA,sBAAsBF,OAAmB,EAAEC,KAAiB;gBACxD,IAAME,SAAU,KAAsB,OAAlB,6BAAI,EAAC7B,SAAQ,CAAC,EAAC,YAAG,6BAAI,EAACA,SAAQ,CAAC,EAAC,KAA0B,gCAAvB,IAAI,EAACC,iBAAe,KAAiC,OAA9B,6BAAI,EAACC,iBAAgB,IAAI,GAAE,KAA8B,OAA3B,6BAAI,EAACC,cAAa,IAAI,GAAE,KAAwC,OAArC,6BAAI,EAACC,WAAU,CAAC,CAAC,KAAK,CAACsB,QAAQ,CAAC,GAAE,KAAqC,OAAlC,6BAAI,EAACtB,WAAU,CAAC,CAAC,KAAK,CAACsB,QAAQ,CAAC,GAAE;gBAE/MA,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAC5BsB,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAE5B,OAAOyB;YACX;;;YAEAC,KAAAA;mBAAAA,SAAAA,iBAAiBJ,OAAmB,EAAEC,KAAiB,EAAEI,IAA4C;gBACjG,IAAIC;gBAEJ,SAASC,kBAAkBC,KAAc;oBACrC,IAAIA,MAAM,MAAM,IAAI;wBAChBF,aAAa;wBACb,OAAO;oBACX;oBAEA,IAAIH,SAASK,MAAM,QAAQ;oBAC3B,IAAIA,MAAM,WAAW,CAAC,IAAI;wBACtB,IAAIA,MAAM,QAAQ,CAAC,IAAI;4BACnBL,SAASA,OAAO,SAAS,CAAC,IAAM,qBAAqB;4BACrD,IAAI,CAACG,YACDH,SAAU,IAAU,OAAPA,SAAU,YAAY;wBAC3C,OAEIA,SAAU,IAAU,OAAPA,SAAU,YAAY;oBAC3C,OACK;wBACD,uBAAuB;wBACvB,IAAIK,MAAM,WAAW,CAAC,CAAC,IACnBL,SAAU,IAAuB,OAApBA,OAAO,SAAS,CAAC,KAAM,+BAA+B;oBAC3E;oBAEAG,aAAaH,OAAO,QAAQ,CAAC;oBAC7B,OAAOA;gBACX;gBAEAG,aAAaD,KAAK,MAAM;gBACxB,IAAMI,oBAAoBF,kBAAkB,6BAAI,EAACjC,SAAQ,CAAC;gBAC1D,IAAMoC,oBAAoBH,kBAAkB,6BAAI,EAACjC,SAAQ,CAAC;gBAC1D,IAAMqC,0BAA0BJ,2CAAkB,IAAI,EAAChC;gBACvD,IAAMqC,qBAAsB,IAA8B,OAA3B,6BAAI,EAACpC,iBAAgB,IAAI;gBACxD,IAAMqC,kBAAmB,IAA2B,OAAxB,6BAAI,EAACpC,cAAa,IAAI;gBAClD4B,KAAK,MAAM,GAAGC;gBAEd,IAAIQ,YAAY;gBAChB;oBACI,IAAIT,KAAK,QAAQ,KAAK,KAClBS,aAAa;oBAEjB,IAAIT,KAAK,QAAQ,KAAK,OAAOI,kBAAkB,MAAM,CAAC,OAAO,KACzDK,aAAaL,kBAAkB,SAAS,CAAC;yBAEzCK,aAAaL;oBAEjBK,aAAaJ;oBAEbI,aAAaH;oBAEbG,aAAaF;oBACbE,aAAaD;oBACbP,aAAa;oBAEbQ,aAAaP,kBAAkB,6BAAI,EAAC7B,WAAU,CAAC;oBAC/CoC,aAAaP,kBAAkB,6BAAI,EAAC7B,WAAU,CAAC;gBACnD;gBACA,IAAMqC,gBAAgBT;gBAEtB,IAAIU,cAAc;gBAClB;oBACI,IAAIX,KAAK,QAAQ,KAAK,KAClBW,eAAe;oBAEnB,IAAIX,KAAK,QAAQ,KAAK,OAAOI,kBAAkB,MAAM,CAAC,OAAO,KACzDO,eAAeP,kBAAkB,SAAS,CAAC;yBAE3CO,eAAeP;oBAEnBO,eAAeN;oBAEfM,eAAeL;oBAEfK,eAAeJ;oBACfI,eAAeH;oBACfP,aAAa;oBAEbU,eAAeT,kBAAkB,6BAAI,EAAC7B,WAAU,CAAC,CAAC,KAAK,CAACsB,QAAQ,CAAC;oBACjEgB,eAAeT,kBAAkB,6BAAI,EAAC7B,WAAU,CAAC,CAAC,KAAK,CAACsB,QAAQ,CAAC;gBACrE;gBACA,IAAMiB,kBAAkBX;gBAExBN,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAC5BsB,QAAQ,CAAC,GAAG,6BAAI,EAACtB,WAAU,CAAC;gBAE5B,IAAIoC,UAAU,MAAM,IAAIE,YAAY,MAAM,EAAE;oBACxCX,KAAK,QAAQ,GAAG;oBAChBA,KAAK,MAAM,GAAGU;oBACd,OAAOD;gBACX,OACK;oBACDT,KAAK,QAAQ,GAAG;oBAChBA,KAAK,MAAM,GAAGY;oBACd,OAAOD;gBACX;YACJ;;;YAEAE,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAAC5C,SAAQ,KAAK;+CACbC,gBAAiB,6BAAI,EAACA,gBAAe,eAAe,CAAC,6BAAI,EAACI,SAAQ,WAAW,GAAG;gBACpF,6BAAI,EAACC,WAAW,UAAU,CAAsB,KAAK,GAAG,6BAAI,EAACL,gBAAe,QAAQ;gBACrF,6BAAI,EAACG,WAAU,KAAK;YACxB;;;YAOAyC,KAAAA;mBAAAA,SAAAA,aAAaC,WAA2B;gBACpC,6BAAI,EAAC9C,SAAQ,eAAe,CAAC8C;+CAExBxC,WAAYyC,SAAS,aAAa,CAAC;gBACxC;oBACI,IAAMC,qBAAqBD,SAAS,aAAa,CAAC;oBAClD;wBACIC,mBAAmB,KAAK,GAAG,6BAAI,EAAC/C,gBAAe,QAAQ;wBACvD+C,mBAAmB,OAAO,4BAAG,IAAI,EAACzC;oBACtC;oBACA,6BAAI,EAACD,WAAU,WAAW,CAAC0C;oBAE3B,IAAMC,oBAAoBF,SAAS,aAAa,CAAC;oBACjD;wBACIE,kBAAkB,IAAI,GAAG;wBACzBA,kBAAkB,OAAO,4BAAG,IAAI,EAAC/C;wBACjC+C,kBAAkB,OAAO,4BAAG,IAAI,EAACzC;oBACrC;oBACA,6BAAI,EAACF,WAAU,WAAW,CAAC2C;oBAE3B,IAAMC,iBAAiBH,SAAS,aAAa,CAAC;oBAC9C;wBACIG,eAAe,IAAI,GAAG;wBACtBA,eAAe,OAAO,4BAAG,IAAI,EAAC/C;wBAC9B+C,eAAe,OAAO,4BAAG,IAAI,EAACzC;oBAClC;oBACA,6BAAI,EAACH,WAAU,WAAW,CAAC4C;gBAC/B;gBACAJ,YAAY,WAAW,0BAAC,IAAI,EAACxC;gBAE7B,6BAAI,EAACF,WAAU,eAAe,CAAC0C;YACnC;;;YAEAK,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAAC/C,WAAU,eAAe;gBAE9B,IAAMgD,YAAY,6BAAI,EAAC9C,WAAW,aAAa;gBAC/C8C,UAAU,WAAW,CAACA,UAAU,SAAS;+CACpC9C,WAAY;gBAEjB,6BAAI,EAACN,SAAQ,eAAe;YAChC;;;YAuBAqD,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAACrD,SAAQ,SAAS,CAAC;gBACvB,6BAAI,EAACI,WAAU,SAAS,CAAC;YAC7B;;;YAEAkD,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAACtD,SAAQ,eAAe;gBAC5B,6BAAI,EAACI,WAAU,eAAe;YAClC;;;YAEAmD,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAACnD,WAAU,SAAS;gBACxB,6BAAI,EAACJ,SAAQ,SAAS;YAC1B;;;WAhPSU;IAiPZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC5MG8C;AAvCG,IAAMC,0BAAN;;aAAMA;gCAAAA;QAuCTD,gCAAAA;;mBAAAA,KAAAA;;;kBAvCSC;;YACL;iBAAJ;gBAA8B,OAAO;YAAK;;;YAEtC;iBAAJ;gBAA4B,OAAO;YAAK;;;YAGxCvC,KAAAA;mBAAAA,SAAAA,UAAUC,CAAU,EAAEC,CAAU,GAAI;;;YAEpCC,KAAAA;mBAAAA,SAAAA,OAAOC,GAAY,EAAEC,GAAY,GAAI;;;YAErCC,KAAAA;mBAAAA,SAAAA,MAAML,CAAU,EAAEC,CAAU,GAAI;;;YAGhCK,KAAAA;mBAAAA,SAAAA,sBAAsBC,OAAmB,EAAEC,KAAiB;gBACxDD,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnBD,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnB,OAAO;YACX;;;YAEAC,KAAAA;mBAAAA,SAAAA,sBAAsBF,OAAmB,EAAEC,KAAiB;gBACxDD,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnBD,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnB,OAAO;YACX;;;YAEAG,KAAAA;mBAAAA,SAAAA,iBAAiBJ,OAAmB,EAAEC,KAAiB,EAAEI,IAA4C;gBACjG,IAAIA,KAAK,QAAQ,KAAK,KAClB,OAAO;gBAEXL,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnBD,QAAQ,CAAC,GAAGC,MAAM,CAAC;gBACnBI,KAAK,QAAQ,GAAG;gBAChBA,KAAK,MAAM,GAAG;gBACd,OAAO;YACX;;;YAEAa,KAAAA;mBAAAA,SAAAA,oBAAqB;;;YAKrBC,KAAAA;mBAAAA,SAAAA,aAAaC,WAA2B;+CAC/BU,mBAAoBV,YAAY,SAAS;gBAC9C,6BAAI,EAACU,mBAAkB,KAAK,CAAC,OAAO,GAAG;YAC3C;;;YAEAL,KAAAA;mBAAAA,SAAAA;gBACI,6BAAI,EAACK,mBAAmB,KAAK,CAAC,cAAc,CAAC;YACjD;;;YAGAH,KAAAA;mBAAAA,SAAAA,cAAe;;;YAEfC,KAAAA;mBAAAA,SAAAA,oBAAqB;;;YAErBC,KAAAA;mBAAAA,SAAAA,cAAe;;;WAvDNE;IAwDZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzD+B;IA8B5BC,4CAEAC,8CAGAC;AAhCG,IAAMC,oCAAN;;aAAMA,oBAoCGC,aAAqB,EAAEC,WAAmB,EAAEC,WAAyB,EAAEhD,MAAqB;gCApC/F6C;QA2BTH,gCAAAA;;mBAAAA,KAAAA;;QAEAC,gCAAAA;;mBAAAA,KAAAA;;QAGAC,gCAAAA;;mBAAAA,KAAAA;;uCAKSD,gBAAiBG;uCACjBF,cAAeG;uCACfL,cAAeM,YAAY,GAAG,CAAC,SAACC;mBAAe,IAAInE,yCAAKA,CAACmE,YAAYjD;;;kBAvCrE6C;;YA8BL;iBAAJ;gBAA8B,gCAAO,IAAI,EAACF;YAAe;;;YAGrD;iBAAJ;gBAA4B,gCAAO,IAAI,EAACC;YAAc;;;YAUtD1C,KAAAA;mBAAAA,SAAAA,UAAUC,CAAU,EAAEC,CAAU;oBACvB8C,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDD,WAAW,SAAS,CAAC9C,GAAGC;;;oBADvB8C;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET;;;YAEA7C,KAAAA;mBAAAA,SAAAA,OAAOC,GAAY,EAAEC,GAAY;oBACxB2C,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDD,WAAW,MAAM,CAAC3C,KAAKC;;;oBADtB2C;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET;;;YAEA1C,KAAAA;mBAAAA,SAAAA,MAAML,CAAU,EAAEC,CAAU;oBACnB8C,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDD,WAAW,KAAK,CAAC9C,GAAGC;;;oBADnB8C;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET;;;YAGAzC,KAAAA;mBAAAA,SAAAA,sBAAsBC,OAAmB,EAAEC,KAAiB;gBACxD,IAAI,6BAAI,EAACgC,oBAAmB,OAAO,6BAAI,EAACD,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;oBACzEA,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;oBAClC,OAAQ,KAA2B,OAAvB,6BAAI,EAACA,aAAY,CAAC,EAAE,CAAC,CAAC,EAAC;gBACvC;gBAEA,IAAI,6BAAI,EAACC,oBAAmB,OAAO,6BAAI,EAACD,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;oBACzEA,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;oBAClC,OAAQ,KAA2B,OAAvB,6BAAI,EAACA,aAAY,CAAC,EAAE,CAAC,CAAC,EAAC;gBACvC;gBAGA,IAAI7B,SAAU,GAAsB,gCAApB,IAAI,EAAC8B,iBAAe;oBAC/BO,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDrC,UAAW,GAAkBoC,OAAhBA,WAAW,CAAC,EAAC,KAAgB,OAAbA,WAAW,CAAC,EAAC;;;oBADzCC;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;gBAGLxC,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAC7DhC,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAE7D,IAAI,6BAAI,EAACC,oBAAmB,KAAK;oBAC7BhC,MAAM,CAAC,GAAGD,QAAQ,CAAC;oBACnBC,MAAM,CAAC,GAAGD,QAAQ,CAAC;gBACvB;gBAEA,OAAOG;YACX;;;YAEAD,KAAAA;mBAAAA,SAAAA,sBAAsBF,OAAmB,EAAEC,KAAiB;gBACxD,IAAI,6BAAI,EAACgC,oBAAmB,KAAK;oBAC7B,IAAI,6BAAI,EAACD,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;wBAC1C,IAAMG,SAAU,KAA4C,OAAxC,6BAAI,EAAC6B,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAChC,QAAQ,CAAC,GAAE;wBAC5DA,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;wBAClC,OAAO7B;oBACX;oBAEA,IAAI,6BAAI,EAAC6B,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;wBAC1C,IAAMyC,UAAU,KAA4C,OAAxC,6BAAI,EAACT,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAChC,QAAQ,CAAC,GAAE;wBAC5DA,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;wBAClC,OAAOS;oBACX;gBACJ;gBAGA,IAAIC,UAAU,GAAoB,gCAAlB,IAAI,EAACR,eAAa;oBAC7BM,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDE,WAAW,GAAmCH,OAAjCA,WAAW,CAAC,CAAC,KAAK,CAACvC,QAAQ,CAAC,GAAE,KAAiC,OAA9BuC,WAAW,CAAC,CAAC,KAAK,CAACvC,QAAQ,CAAC,GAAE;;;oBAD3EwC;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;gBAGLxC,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAC7DhC,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAE7D,IAAI,6BAAI,EAACC,oBAAmB,KAAK;oBAC7BhC,MAAM,CAAC,GAAGD,QAAQ,CAAC;oBACnBC,MAAM,CAAC,GAAGD,QAAQ,CAAC;gBACvB;gBAEA,OAAO0C;YACX;;;YAEAtC,KAAAA;mBAAAA,SAAAA,iBAAiBJ,OAAmB,EAAEC,KAAiB,EAAEI,IAA4C;gBACjG,IAAIC;gBAEJ,SAASC,kBAAkBC,KAAc;oBACrC,IAAIA,MAAM,MAAM,IAAI;wBAChBF,aAAa;wBACb,OAAO;oBACX;oBAEA,IAAIH,SAASK,MAAM,QAAQ;oBAC3B,IAAIA,MAAM,WAAW,CAAC,IAAI;wBACtB,IAAIA,MAAM,QAAQ,CAAC,IAAI;4BACnBL,SAASA,OAAO,SAAS,CAAC,IAAM,qBAAqB;4BACrD,IAAI,CAACG,YACDH,SAAU,IAAU,OAAPA,SAAU,YAAY;wBAC3C,OAEIA,SAAU,IAAU,OAAPA,SAAU,YAAY;oBAC3C,OACK;wBACD,uBAAuB;wBACvB,IAAIK,MAAM,WAAW,CAAC,CAAC,IACnBL,SAAU,IAAuB,OAApBA,OAAO,SAAS,CAAC,KAAM,+BAA+B;oBAC3E;oBAEAG,aAAaH,OAAO,QAAQ,CAAC;oBAC7B,OAAOA;gBACX;gBAGA,IAAI,6BAAI,EAAC8B,oBAAmB,KAAK;oBAC7B,IAAI,6BAAI,EAACD,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;wBAC1CM,aAAaD,KAAK,MAAM;wBACxB,IAAIS,YAAYP,kBAAkB,6BAAI,EAACyB,aAAY,CAAC,EAAE,CAAC,CAAC;wBACxD,IAAI3B,KAAK,QAAQ,KAAK,KAAK;4BACvB,IAAIS,UAAU,MAAM,CAAC,OAAO,KACxBA,YAAYA,UAAU,SAAS,CAAC,IAAI,aAAa;4BACrDA,YAAa,IAAa,OAAVA;wBACpB;wBACA,IAAMC,gBAAgBT;wBAEtBA,aAAaD,KAAK,MAAM;wBACxB,IAAIW,cAAcT,kBAAkB,6BAAI,EAACyB,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAChC,QAAQ,CAAC;wBAC1E,IAAIK,KAAK,QAAQ,KAAK,KAAK;4BACvB,IAAIW,YAAY,MAAM,CAAC,OAAO,KAC1BA,cAAcA,YAAY,SAAS,CAAC,IAAI,aAAa;4BACzDA,cAAe,IAAe,OAAZA;wBACtB;wBACA,IAAMC,kBAAkBX;wBAExBN,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;wBAElC,IAAIlB,UAAU,MAAM,IAAIE,YAAY,MAAM,EAAE;4BACxCX,KAAK,QAAQ,GAAG;4BAChBA,KAAK,MAAM,GAAGU;4BACd,OAAOD;wBACX,OACK;4BACDT,KAAK,QAAQ,GAAG;4BAChBA,KAAK,MAAM,GAAGY;4BACd,OAAOD;wBACX;oBACJ;oBAEA,IAAI,6BAAI,EAACgB,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAChC,QAAQ,CAAC,GAAG;wBAC1CM,aAAaD,KAAK,MAAM;wBACxB,IAAIsC,aAAYpC,kBAAkB,6BAAI,EAACyB,aAAY,CAAC,EAAE,CAAC,CAAC;wBACxD,IAAI3B,KAAK,QAAQ,KAAK,KAAK;4BACvB,IAAIsC,WAAU,MAAM,CAAC,OAAO,KACxBA,aAAYA,WAAU,SAAS,CAAC,IAAI,aAAa;4BACrDA,aAAa,IAAa,OAAVA;wBACpB;wBACA,IAAMC,iBAAgBtC;wBAEtBA,aAAaD,KAAK,MAAM;wBACxB,IAAIwC,eAActC,kBAAkB,6BAAI,EAACyB,aAAY,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAChC,QAAQ,CAAC;wBAC1E,IAAIK,KAAK,QAAQ,KAAK,KAAK;4BACvB,IAAIwC,aAAY,MAAM,CAAC,OAAO,KAC1BA,eAAcA,aAAY,SAAS,CAAC,IAAI,aAAa;4BACzDA,eAAe,IAAe,OAAZA;wBACtB;wBACA,IAAMC,mBAAkBxC;wBAExBN,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,EAAE,CAAC,CAAC;wBAElC,IAAIW,WAAU,MAAM,IAAIE,aAAY,MAAM,EAAE;4BACxCxC,KAAK,QAAQ,GAAG;4BAChBA,KAAK,MAAM,GAAGuC;4BACd,OAAOD;wBACX,OACK;4BACDtC,KAAK,QAAQ,GAAG;4BAChBA,KAAK,MAAM,GAAGyC;4BACd,OAAOD;wBACX;oBACJ;gBACJ;gBAGAvC,aAAaD,KAAK,MAAM;gBACxB,IAAI0C,aAAY;gBAChB;wBACSP,kCAAAA,2BAAAA;;wBAAL,QAAKA,qCAAkB,IAAI,EAACR,kCAAvBQ,SAAAA,6BAAAA,QAAAA,yBAAAA,iCAAqC;4BAArCA,IAAID,aAAJC;4BACDO,cAAaxC,kBAAkBgC,WAAW,CAAC;4BAC3CQ,cAAaxC,kBAAkBgC,WAAW,CAAC;wBAC/C;;wBAHKC;wBAAAA;;;iCAAAA,6BAAAA;gCAAAA;;;gCAAAA;sCAAAA;;;;oBAKL,IAAInC,KAAK,QAAQ,8BAAK,IAAI,EAAC4B,iBAAgB;wBACvC,IAAIc,WAAU,MAAM,CAAC,OAAO,KACxBA,aAAYA,WAAU,SAAS,CAAC,IAAI,aAAa;wBACrDA,aAAa,GAAwBA,gCAAtB,IAAI,EAACd,iBAA2B,OAAVc;oBACzC;gBACJ;gBACA,IAAMC,iBAAgB1C;gBAEtBA,aAAaD,KAAK,MAAM;gBACxB,IAAI4C,eAAc;gBAClB;wBACSC,mCAAAA,4BAAAA;;wBAAL,QAAKA,sCAAkB,IAAI,EAAClB,kCAAvBkB,UAAAA,8BAAAA,SAAAA,0BAAAA,kCAAqC;4BAArCA,IAAIC,cAAJD;4BACDD,gBAAe1C,kBAAkB4C,YAAW,CAAC,CAAC,KAAK,CAACnD,QAAQ,CAAC;4BAC7DiD,gBAAe1C,kBAAkB4C,YAAW,CAAC,CAAC,KAAK,CAACnD,QAAQ,CAAC;wBACjE;;wBAHKkD;wBAAAA;;;iCAAAA,8BAAAA;gCAAAA;;;gCAAAA;sCAAAA;;;;oBAKL,IAAI7C,KAAK,QAAQ,8BAAK,IAAI,EAAC6B,eAAc;wBACrC,IAAIe,aAAY,MAAM,CAAC,OAAO,KAC1BA,eAAcA,aAAY,SAAS,CAAC,IAAI,aAAa;wBACzDA,eAAe,GAAsBA,gCAApB,IAAI,EAACf,eAA2B,OAAZe;oBACzC;gBACJ;gBACA,IAAMG,mBAAkB9C;gBAGxBN,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAC7DhC,QAAQ,CAAC,GAAG,6BAAI,EAACgC,aAAY,CAAC,6BAAI,EAACA,cAAa,MAAM,GAAG,EAAE,CAAC,CAAC;gBAE7D,IAAI,6BAAI,EAACC,oBAAmB,KAAK;oBAC7BhC,MAAM,CAAC,GAAGD,QAAQ,CAAC;oBACnBC,MAAM,CAAC,GAAGD,QAAQ,CAAC;gBACvB;gBAEA,IAAI+C,WAAU,MAAM,IAAIE,aAAY,MAAM,EAAE;oBACxC5C,KAAK,QAAQ,4BAAG,IAAI,EAAC4B;oBACrB5B,KAAK,MAAM,GAAG2C;oBACd,OAAOD;gBACX,OACK;oBACD1C,KAAK,QAAQ,4BAAG,IAAI,EAAC6B;oBACrB7B,KAAK,MAAM,GAAG+C;oBACd,OAAOH;gBACX;YACJ;;;YAEA/B,KAAAA;mBAAAA,SAAAA;oBACSsB,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDD,WAAW,KAAK;;;oBADfC;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET;;;YAGArB,KAAAA;mBAAAA,SAAAA,aAAaC,WAA2B;gBACpC,IAAK,IAAIiC,IAAI,GAAGA,IAAI,6BAAI,EAACrB,cAAa,MAAM,EAAEqB,IAC1C,6BAAI,EAACrB,aAAY,CAACqB,EAAE,CAAC,eAAe,CAACjC;YAC7C;;;YAEAK,KAAAA;mBAAAA,SAAAA;gBACI,IAAK,IAAI4B,IAAI,6BAAI,EAACrB,cAAa,MAAM,GAAG,GAAGqB,KAAK,GAAGA,IAC/C,6BAAI,EAACrB,aAAY,CAACqB,EAAE,CAAC,eAAe;YAC5C;;;YAGA1B,KAAAA;mBAAAA,SAAAA;gBACI,IAAK,IAAI0B,IAAI,6BAAI,EAACrB,cAAa,MAAM,GAAG,GAAGsB,IAAI,GAAGD,KAAK,GAAGA,KAAKC,IAC3D,6BAAI,EAACtB,aAAY,CAACqB,EAAE,CAAC,SAAS,CAACC;YACvC;;;YAEA1B,KAAAA;mBAAAA,SAAAA;oBACSY,kCAAAA,2BAAAA;;oBAAL,QAAKA,qCAAoB,IAAI,EAACR,kCAAzBQ,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMD,aAANC;wBACDD,WAAW,eAAe;;;oBADzBC;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET;;;YAEAX,KAAAA;mBAAAA,SAAAA;gBACI,IAAK,IAAIwB,IAAI,GAAGA,IAAI,6BAAI,EAACrB,cAAa,MAAM,EAAEqB,IAC1C,6BAAI,EAACrB,aAAY,CAACqB,EAAE,CAAC,SAAS;YACtC;;;;YA1SOE,KAAAA;mBAAP,SAAOA,KAAKhB,UAAsB,EAAEjD,MAAqB;gBACrD,OAAO,IAFF6C,oBAE0B,KAAK,KAAK;oBAACI;iBAAW,EAAEjD;YAC3D;;;YAEOkE,KAAAA;mBAAP,SAAOA,KAAKjB,UAAsB,EAAEjD,MAAqB;gBACrD,OAAO,IANF6C,oBAM0B,KAAK,KAAK;oBAACI;iBAAW,EAAEjD;YAC3D;;;YAEOmE,KAAAA;mBAAP,SAAOA,KAAKN,WAAuB,EAAEZ,UAAsB,EAAEjD,MAAqB;gBAC9E,OAAO,IAVF6C,oBAU0B,KAAK,KAAK;oBAACgB;oBAAaZ;iBAAW,EAAEjD;YACxE;;;YAEOoE,KAAAA;mBAAP,SAAOA,KAAKnB,UAAsB,EAAEjD,MAAqB;gBACrD,OAAO,IAdF6C,oBAc0B,KAAK,KAAK;oBAACI;iBAAW,EAAEjD;YAC3D;;;YAEOqE,KAAAA;mBAAP,SAAOA,KAAKR,WAAuB,EAAES,WAAuB,EAAErB,UAAsB,EAAEjD,MAAqB;gBACvG,OAAO,IAlBF6C,oBAkB0B,KAAK,KAAK;oBAACgB;oBAAaS;oBAAarB;iBAAW,EAAEjD;YACrF;;;YAEOuE,KAAAA;mBAAP,SAAOA,KAAKV,WAAuB,EAAEZ,UAAsB,EAAEjD,MAAqB;gBAC9E,OAAO,IAtBF6C,oBAsB0B,KAAK,KAAK;oBAACgB;oBAAaZ;iBAAW,EAAEjD;YACxE;;;WAvBS6C;IA4SZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChT2D;IAIxD,+BAA+B,GAC/B2B,kCAEAnF,uCA4DA,iBAAiB;AAEjBoF,qCAqCAC,yCAWAC,yCAaA,cAAc;AAEdC,qCAwCAC,gDACAC,gDACAC,0CAEAC,+CAaAC,+CAcAC;AAxMG,IAAMpG,sBAAN;;aAAMA,MAOGqG,CAAa,EAAEnF,MAAqB;;gCAPvClB;QAET0F,gCAAAA;;mBAAAA,KAAAA;;QAEAnF,gCAAAA;;mBAAAA,KAAAA;;QA8DAoF,gCAAAA;;mBAA+B;;QAqC/BC,gCAAAA;;mBAAY,SAACzE;gBACT,IAAI;;oBACA,gCAAKuE,IAAG,CAAC,GAAG,IAAIzF,yDAAOA,CAAEkB,MAAM,MAAM,CAAsB,KAAK;kFAC3D2E,qEAAL,2BAAY,YAAY,CAAC,MAAM,gCAAKJ,IAAG,CAAC,CAAC,QAAQ;oBACjD,gCAAKnF,SAAQ,UAAU;gBAC3B,EACA,UAAM;gBACF,4BAA4B;gBAChC;YACJ;;QAEAsF,gCAAAA;;mBAAY,SAAC1E;gBACT,IAAI;;oBACA,gCAAKuE,IAAG,CAAC,GAAG,IAAIzF,yDAAOA,CAAEkB,MAAM,MAAM,CAAsB,KAAK;kFAC3D2E,qEAAL,2BAAY,YAAY,CAAC,MAAM,gCAAKJ,IAAG,CAAC,CAAC,QAAQ;oBACjD,gCAAKnF,SAAQ,UAAU;gBAC3B,EACA,UAAM;gBACF,4BAA4B;gBAChC;YACJ;;QAMAuF,gCAAAA;;mBAAiC;;QAwCjCC,gCAAAA;;mBAAmB;;QACnBC,gCAAAA;;mBAAmB;;QACnBC,gCAAAA;;mBAAyB;gBAAE,GAAG,IAAIhG,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;;QAEhEiG,gCAAAA;;mBAAkB,SAAC/E;gBACf,gCAAK2E,OAAO,KAAK,CAAC,MAAM,GAAG;gBAC3B,gCAAKA,OAAO,iBAAiB,CAAC3E,MAAM,SAAS;gDAExC4E,kBAAmB5E,MAAM,OAAO;gBACrC,gCAAK8E,YAAW,CAAC,GAAG,gCAAKP,IAAG,CAAC;gDACxBM,kBAAmB7E,MAAM,OAAO;gBACrC,gCAAK8E,YAAW,CAAC,GAAG,gCAAKP,IAAG,CAAC;gBAE7B,gCAAKI,OAAO,aAAa,mCAAQK;gBACjC,gCAAKL,OAAO,WAAW,mCAAQM;YACnC;;QAEAD,gCAAAA;;mBAAkB,SAAChF;gBACf,IAAMmF,KAAKnF,MAAM,OAAO,mCAAQ4E;gBAChC,IAAMQ,KAAKpF,MAAM,OAAO,mCAAQ6E;gBAEhC,gCAAKN,IAAG,CAAC,GAAG,gCAAKO,YAAW,CAAC,CAAC,IAAI,CAAC,IAAIhG,yDAAOA,CAACqG,KAAK,gCAAK/F,SAAQ,GAAG,CAAC,WAAW,GAAG,gCAAKA,SAAQ,YAAY,GAAG,eAAe,CAAC,gCAAKA,SAAQ,WAAW,GAAG;gBAC1J,gCAAKmF,IAAG,CAAC,GAAG,gCAAKO,YAAW,CAAC,CAAC,IAAI,CAAC,IAAIhG,yDAAOA,CAACsG,KAAK,gCAAKhG,SAAQ,GAAG,CAAC,YAAY,GAAG,gCAAKA,SAAQ,aAAa,GAAG,eAAe,CAAC,gCAAKA,SAAQ,WAAW,GAAG;gBAE5J,gCAAKuF,OAAO,YAAY,CAAC,MAAM,gCAAKJ,IAAG,CAAC,CAAC,QAAQ;gBACjD,gCAAKI,OAAO,YAAY,CAAC,MAAM,gCAAKJ,IAAG,CAAC,CAAC,QAAQ;gBAChD,gCAAKC,OAAO,UAAU,CAAsB,KAAK,GAAG,gCAAKD,IAAG,CAAC,CAAC,QAAQ;gBACtE,gCAAKC,OAAO,SAAS,CAAsB,KAAK,GAAG,gCAAKD,IAAG,CAAC,CAAC,QAAQ;gBACtE,gCAAKnF,SAAQ,UAAU;YAC3B;;QAEA6F,gCAAAA;;mBAAgB,SAACjF;gBACb,gCAAK2E,OAAO,KAAK,CAAC,MAAM,GAAG;gBAC3B,gCAAKA,OAAO,qBAAqB,CAAC3E,MAAM,SAAS;gBAEjD,gCAAK2E,OAAO,aAAa,GAAG;gBAC5B,gCAAKA,OAAO,WAAW,GAAG;YAC9B;;uCAtMSJ,IAAKW;uCACL9F,SAAUW;;kBATVlB;;YAYL;iBAAJ;gBAAmB,OAAO,6BAAI,EAAC0F,IAAG,CAAC;YAAE;;;YAEjC;iBAAJ;gBAAmB,OAAO,6BAAI,EAACA,IAAG,CAAC;YAAE;;;YAGrCc,KAAAA;mBAAAA,SAAAA;;gBACI,6BAAI,EAACd,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,eAAe,CAAC,6BAAI,EAACnF,SAAQ,WAAW,GAAG;gBAChE,6BAAI,EAACoF,OAAO,UAAU,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;uEACvE,IAAI,EAACI,qEAAL,2BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;gBACjD,6BAAI,EAACA,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,eAAe,CAAC,6BAAI,EAACnF,SAAQ,WAAW,GAAG;gBAChE,6BAAI,EAACoF,OAAO,SAAS,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;wEACtE,IAAI,EAACI,sEAAL,4BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;YACrD;;;YAGAtE,KAAAA;mBAAAA,SAAAA,UAAUC,CAAU,EAAEC,CAAU;;gBAC5B,6BAAI,EAACoE,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,IAAI,CAACrE;gBAC3B,6BAAI,EAACqE,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,IAAI,CAACpE;gBAE1B,6BAAI,EAACqE,OAAO,UAAU,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;gBACtE,6BAAI,EAACC,OAAO,SAAS,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;uEAEtE,IAAI,EAACI,qEAAL,2BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;wEACjD,IAAI,EAACI,sEAAL,4BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;YACrD;;;YAEAnE,KAAAA;mBAAAA,SAAAA,OAAOC,GAAY,EAAEC,GAAY;;gBAC7B,IAAMJ,IAAIG,IAAI,GAAG,CAAC,6BAAI,EAACkE,IAAG,CAAC,EAAE,KAAK,CAACjE,IAAI,GAAG,CAAC,6BAAI,EAACiE,IAAG,CAAC,GAAG,eAAe,CAAC,6BAAI,EAACnF,SAAQ,WAAW,GAAG;gBAClG,IAAMe,IAAIG,IAAI,GAAG,CAAC,6BAAI,EAACiE,IAAG,CAAC,EAAE,IAAI,CAAClE,IAAI,GAAG,CAAC,6BAAI,EAACkE,IAAG,CAAC,GAAG,eAAe,CAAC,6BAAI,EAACnF,SAAQ,WAAW,GAAG;gBACjG,6BAAI,EAACmF,IAAG,CAAC,GAAGrE;gBACZ,6BAAI,EAACqE,IAAG,CAAC,GAAGpE;gBAEX,6BAAI,EAACqE,OAAO,UAAU,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;gBACtE,6BAAI,EAACC,OAAO,SAAS,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;uEAEtE,IAAI,EAACI,qEAAL,2BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;wEACjD,IAAI,EAACI,sEAAL,4BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;YACrD;;;YAEAhE,KAAAA;mBAAAA,SAAAA,MAAML,CAAU,EAAEC,CAAU;;gBACxB,6BAAI,EAACoE,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,GAAG,CAACrE;gBAC1B,6BAAI,EAACqE,IAAG,CAAC,GAAG,6BAAI,EAACA,IAAG,CAAC,CAAC,GAAG,CAACpE;gBAEzB,6BAAI,EAACqE,OAAO,UAAU,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;gBACtE,6BAAI,EAACC,OAAO,SAAS,CAAsB,KAAK,GAAG,6BAAI,EAACD,IAAG,CAAC,CAAC,QAAQ;uEAEtE,IAAI,EAACI,qEAAL,2BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;wEACjD,IAAI,EAACI,sEAAL,4BAAY,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;YACrD;;;YASA;;;;;KAKC,GACDe,KAAAA;mBAAAA,SAAAA,gBAAgBzD,WAA2B;+CAClC2C,OAAQ1C,SAAS,aAAa,CAAC;gBACpC;oBACI,IAAMyD,SAASzD,SAAS,aAAa,CAAC;oBACtC;wBACIyD,OAAO,KAAK,GAAG,6BAAI,EAAChB,IAAG,CAAC,CAAC,QAAQ;wBACjCgB,OAAO,OAAO,4BAAG,IAAI,EAACd;oBAC1B;oBACA,6BAAI,EAACD,OAAM,WAAW,CAACe;oBAEvB,IAAMC,SAAS1D,SAAS,aAAa,CAAC;oBACtC;wBACI0D,OAAO,KAAK,GAAG,6BAAI,EAACjB,IAAG,CAAC,CAAC,QAAQ;wBACjCiB,OAAO,OAAO,4BAAG,IAAI,EAACd;oBAC1B;oBACA,6BAAI,EAACF,OAAM,WAAW,CAACgB;gBAC3B;gBACA3D,YAAY,WAAW,0BAAC,IAAI,EAAC2C;YACjC;;;YAEA,IAAI,GACJiB,KAAAA;mBAAAA,SAAAA;gBACI,IAAMtD,YAAY,6BAAI,EAACqC,OAAO,aAAa;gBAC3CrC,UAAU,WAAW,CAACA,UAAU,SAAS;+CACpCqC,OAAQ;YACjB;;;YAgCA;;KAEC,GACDkB,KAAAA;mBAAAA,SAAAA,UAAUC,UAAkB;gBACxB,IAAMC,SAAS;oBAAC;oBAAQ;oBAAS;oBAAU;oBAAO;oBAAU;iBAAQ;gBACpE,IAAMC,QAAQD,MAAM,CAACD,aAAaC,OAAO,MAAM,CAAC;+CAE3CjB,OAAQ7C,SAAS,eAAe,CAAC,8BAA8B;gBACpE;oBACI,6BAAI,EAAC6C,OAAM,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;oBAChD,6BAAI,EAACI,OAAM,YAAY,CAAC,MAAM,6BAAI,EAACJ,IAAG,CAAC,CAAC,QAAQ;oBAChD,6BAAI,EAACI,OAAM,YAAY,CAAC,KAAK,6BAAI,EAACvF,SAAQ,YAAY,CAAC,QAAQ;oBAE/D,6BAAI,EAACuF,OAAM,YAAY,CAAC,QAAQkB;oBAChC,6BAAI,EAAClB,OAAM,YAAY,CAAC,gBAAgB;oBACxC,6BAAI,EAACA,OAAM,KAAK,CAAC,MAAM,GAAG;oBAE1B,6BAAI,EAACA,OAAM,aAAa,4BAAG,IAAI,EAACI;gBACpC;gBACA,6BAAI,EAAC3F,SAAQ,GAAG,CAAC,WAAW,0BAAC,IAAI,EAACuF;YACtC;;;YAEAmB,KAAAA;mBAAAA,SAAAA;;uEACI,IAAI,EAACnB,qEAAL,2BAAY,YAAY,CAAC,KAAK,6BAAI,EAACvF,SAAQ,YAAY,CAAC,QAAQ;YACpE;;;YAEA2G,KAAAA;mBAAAA,SAAAA;gBACI,IAAI,6BAAI,EAACpB,WAAU,MACf;gBAEJ,IAAMqB,YAAY,6BAAI,EAACrB,OAAM,aAAa;gBAC1CqB,UAAU,WAAW,0BAAC,IAAI,EAACrB;+CAEtBA,OAAQ;YACjB;;;WAtKS9F;IA+MZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClNwC;AAES;AACA;AACoB;IAGlEoH,2CACAC,0CAGAC,4CACAC,6CACAC,kDAEAC,oDACAC,oDACAC,+CACAC,mDACAC,mDACAC,8CAEAC,8CACAC,8CACAC,kDACAC,mDAEAC,gDACAC,kDACAC,qDACAC,uDACAC,oDACAC,4DACAC,kDACAC,mDACAC,qDAEAC,6CACAC,+CACAC,gDACAC,kDAEAC,gDACAC,gDACAC,gDACAC,4CACAC,6CACAC,4CACAC,4CACAC,4CAeAC,6CAEAC,4CA+HAC,+CAYAC,0CAEAC,yCAqBAC,4CAsEAC,6CAwXAC,0DAIAC,0DAIAC,qDAKAC,2CASAC,2CASAC,+CASAC,gDAUAC,+CAYAC,iDAQAC,mDAQAC,wDAQAC,8CAKAC,iDASAC,2CAIAC,8CASAC,4CAeAC,yCA0BAC;AAtzBG,IAAMC,gBAAN,SAAMA;;;4BAAAA;IA4DTxB,iCAAAA;IA+HAC,iCAAAA;IAcAE,iCAAAA;IAqBAC,iCAAAA;IA7NAzC,gCAAAA;;eAAcnE,SAAS,cAAc,CAAC;;IACtCoE,gCAAAA;;eAAapE,SAAS,cAAc,CAAC;;IAGrCqE,gCAAAA;;eAAerE,SAAS,cAAc,CAAC;;IACvCsE,gCAAAA;;eAAgBtE,SAAS,cAAc,CAAC;;IACxCuE,gCAAAA;;eAAqBvE,SAAS,cAAc,CAAC;;IAE7CwE,gCAAAA;;eAAuBxE,SAAS,cAAc,CAAC;;IAC/CyE,gCAAAA;;eAAuBzE,SAAS,cAAc,CAAC;;IAC/C0E,gCAAAA;;eAAkB1E,SAAS,cAAc,CAAC;;IAC1C2E,gCAAAA;;eAAsB3E,SAAS,cAAc,CAAC;;IAC9C4E,gCAAAA;;eAAsB5E,SAAS,cAAc,CAAC;;IAC9C6E,gCAAAA;;eAAiB7E,SAAS,cAAc,CAAC;;IAEzC8E,gCAAAA;;eAAiB9E,SAAS,cAAc,CAAC;;IACzC+E,gCAAAA;;eAAiB/E,SAAS,cAAc,CAAC;;IACzCgF,gCAAAA;;eAAqBhF,SAAS,cAAc,CAAC;;IAC7CiF,gCAAAA;;eAAsBjF,SAAS,cAAc,CAAC;;IAE9CkF,gCAAAA;;eAAmBlF,SAAS,cAAc,CAAC;;IAC3CmF,gCAAAA;;eAAqBnF,SAAS,cAAc,CAAC;;IAC7CoF,gCAAAA;;eAAwBpF,SAAS,cAAc,CAAC;;IAChDqF,gCAAAA;;eAA0BrF,SAAS,cAAc,CAAC;;IAClDsF,gCAAAA;;eAAuBtF,SAAS,cAAc,CAAC;;IAC/CuF,gCAAAA;;eAA+BvF,SAAS,cAAc,CAAC;;IACvDwF,gCAAAA;;eAAqBxF,SAAS,cAAc,CAAC;;IAC7CyF,gCAAAA;;eAAsBzF,SAAS,cAAc,CAAC;;IAC9C0F,gCAAAA;;eAAwB1F,SAAS,cAAc,CAAC;;IAEhD2F,gCAAAA;;eAAgB3F,SAAS,cAAc,CAAC;;IACxC4F,gCAAAA;;eAAkB5F,SAAS,cAAc,CAAC;;IAC1C6F,gCAAAA;;eAAmB7F,SAAS,cAAc,CAAC;;IAC3C8F,gCAAAA;;eAAqB9F,SAAS,cAAc,CAAC;;IAE7C+F,gCAAAA;;eAAmB/F,SAAS,cAAc,CAAC;;IAC3CgG,gCAAAA;;eAAmBhG,SAAS,cAAc,CAAC;;IAC3CiG,gCAAAA;;eAAmBjG,SAAS,cAAc,CAAC;;IAC3CkG,gCAAAA;;eAAelG,SAAS,cAAc,CAAC;;IACvCmG,gCAAAA;;eAAgBnG,SAAS,cAAc,CAAC;;IACxCoG,gCAAAA;;eAAepG,SAAS,cAAc,CAAC;;IACvCqG,gCAAAA;;eAAerG,SAAS,cAAc,CAAC;;IACvCsG,gCAAAA;;eAAetG,SAAS,cAAc,CAAC;;IAEvC,8BAAMA,SAAS,cAAc,CAAC;IAC9B,kCAAUA,SAAS,cAAc,CAAC;IAGlC,mCAAW,CAAC;IACZ,mCAAW,CAAC;IACZ,uCAAe;IACf,wCAAgB;IAEhB,uCAAe,IAAIhD,yDAAOA,CAAC;IAC3B,sCAAc;IAGduJ,gCAAAA;;eAA4B,EAAE;;IA6I9BG,gCAAAA;;eAAgD,EAAE;;IA6FlDG,gCAAAA;;eAAgB;gBAgXHoB,cAAT,SAASA,YAAYC,YAAoB;gBACrC,IAAIC,yBAAAA,IAAG5D,oBAAmB,KAAK,CAAC,OAAO,KAAK,SACxC;gBACJ4D,yBAAAA,IAAG5D,oBAAmB,KAAK,CAAC,OAAO,GAAG;gBACtC4D,yBAAAA,IAAG5D,oBAAmB,WAAW,GAAG2D;YACxC;YApXA,gCAAK3D,oBAAmB,KAAK,CAAC,OAAO,GAAG;YACxC,gCAAKA,oBAAmB,WAAW,GAAG;YAEtC,IAAM4D;YACN,IAAMC,QAAQ,gCAAK/D,cAAa,KAAK;YACrC,IAAI+D,MAAM,MAAM,KAAK,GACjB;YAEJ,WAAW;YACX,IAAIA,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;YACvB,IAAIG,MAAM,MAAM,IAAI,GAChB,OAAOH,YAAY;YAEvB,cAAc;YACd,IAAII,aAAa;YACjB,IAAID,KAAK,CAAC,EAAE,KAAK,KAAK;gBAClB,IAAIA,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;gBACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;gBACvB,IAAIG,MAAM,MAAM,IAAI,KAAKA,KAAK,CAAC,EAAE,KAAK,KAClC,OAAOH,YAAY;gBAEvBI,aAAa;gBACb,GAAG;oBACC,IAAID,MAAM,MAAM,IAAIC,YAChB,OAAOJ,YAAa,eAA+B,OAAjBG,MAAM,MAAM,GAAG,GAAE;gBAC3D,QAASA,KAAK,CAACC,aAAa,KAAK,KAAK;gBAEtC,IAAID,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KACpD,OAAOJ,YAAa,eAA6B,OAAfI,aAAa,GAAE;gBACrDA;YACJ;YAEA,QAAQ;YACR,IAAID,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KACpD,OAAOJ,YAAa,eAA6B,OAAfI,aAAa,GAAE;YACrDA;YACA,IAAID,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KACpD,OAAOJ,YAAa,eAA6B,OAAfI,aAAa,GAAE;YACrDA;YACA,IAAID,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KACpD,OAAOJ,YAAa,eAA6B,OAAfI,aAAa,GAAE;YACrDA;YAGA,IAAIC,UAAU,IAAItL,yDAAOA,CAAC;YAC1B,IAAIuL,UAAU,IAAIvL,yDAAOA,CAAC;YAC1B,IAAIwL,SAAS,IAAIxL,yDAAOA,CAAC;YACzB,IAAIyL,SAAS,IAAIzL,yDAAOA,CAAC;YACzB,IAAI0L,eAAe;YACnB,IAAM5J,SAAqB,EAAE;YAE7B,MAAOsJ,MAAM,MAAM,GAAGC,cAAcD,KAAK,CAACC,WAAW,KAAK,IAAK;oBA+FlDM,UAAT,SAASA;oBACLL,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtB4L;gBACJ;oBACSA,UAAT,SAASA;oBACLN,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvBL,SAASF;oBACTG,SAASF;oBACTzJ,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC/F;oBAESW,UAAT,SAASA;oBACLR,UAAU,IAAItL,yDAAOA,CAAC;oBACtB+L;gBACJ;oBACSA,UAAT,SAASA;oBACLT,UAAUA,QAAQ,IAAI,CAACO;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC/F;oBAESa,UAAT,SAASA;oBACLT,UAAU,IAAIvL,yDAAOA,CAAC;oBACtBiM;gBACJ;oBACSA,UAAT,SAASA;oBACLV,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC/F;oBAESe,UAAT,SAASA;oBACLZ,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtBmM;gBACJ;oBACSA,UAAT,SAASA;oBACLb,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC/F;oBAESiB,UAAT,SAASA;oBACLd,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtBqM;gBACJ;oBACSA,UAAT,SAASA;oBACL,IAAMC,KAAKhB,QAAQ,IAAI,CAACO;oBACxB,IAAMU,KAAKhB,QAAQ,IAAI,CAACM;oBACxBP,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsM;wBAAK,GAAG,IAAItM,yDAAOA,CAACuM;oBAAI,GAAG;wBAAE,GAAG,IAAIvM,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC3I;oBAESqB,UAAT,SAASA;oBACLlB,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtByM;gBACJ;oBACSA,UAAT,SAASA;oBACLnB,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC/F;oBAESuB,UAAT,SAASA;oBACLpB,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtB2M;gBACJ;oBACSA,UAAT,SAASA;oBACL,IAAML,KAAKhB,QAAQ,IAAI,CAACO;oBACxB,IAAMU,KAAKhB,QAAQ,IAAI,CAACM;oBACxB,IAAMe,KAAKtB,QAAQ,IAAI,CAACO;oBACxB,IAAMgB,KAAKtB,QAAQ,IAAI,CAACM;oBACxBP,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsM;wBAAK,GAAG,IAAItM,yDAAOA,CAACuM;oBAAI,GAAG;wBAAE,GAAG,IAAIvM,yDAAOA,CAAC4M;wBAAK,GAAG,IAAI5M,yDAAOA,CAAC6M;oBAAI,GAAG;wBAAE,GAAG,IAAI7M,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBACvL;oBAES2B,UAAT,SAASA;oBACLxB,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtB+M;gBACJ;oBACSA,UAAT,SAASA;oBACL,IAAMT,KAAKhB,QAAQ,IAAI,CAACO;oBACxB,IAAMU,KAAKhB,QAAQ,IAAI,CAACM;oBACxBP,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAACgC,oFAAwB,CAAC;wBAAE,GAAG,IAAI9D,yDAAOA,CAACsM;wBAAK,GAAG,IAAItM,yDAAOA,CAACuM;oBAAI,GAAG;wBAAE,GAAG,IAAIvM,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBAC3I;oBAES6B,UAAT,SAASA;oBACL1B,UAAU,IAAItL,yDAAOA,CAAC;oBACtBuL,UAAU,IAAIvL,yDAAOA,CAAC;oBACtBiN;gBACJ;oBACSA,UAAT,SAASA;oBACL,IAAMC,UAAUrB;oBAChB,IAAMsB,UAAUtB;oBAChB,IAAMhL,gBAAgBgL;oBACtB,IAAM/K,eAAesM;oBACrB,IAAMrM,YAAYqM;oBAClB9B,UAAUA,QAAQ,IAAI,CAACO;oBACvBN,UAAUA,QAAQ,IAAI,CAACM;oBACvB/J,OAAO,IAAI,CAAC,IAAInB,2DAASA,CAAC;wBAAE,GAAGuM;wBAAS,GAAGC;oBAAQ,GAAGtM,eAAeC,cAAcC,WAAW;wBAAE,GAAG,IAAIf,yDAAOA,CAACsL;wBAAU,GAAG,IAAItL,yDAAOA,CAACuL;oBAAS,GAAGJ;gBACxJ;oBAGSU,cAAT,SAASA;oBACL,MAAO,KAAM;wBACT,IAAIT,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KAAK;4BACzDJ,YAAa,qCAAmD,OAAfI,aAAa;4BAC9D,OAAO,IAAIrL,yDAAOA,CAAC;wBACvB;wBACA,IAAIoL,KAAK,CAACC,WAAW,KAAK,OAAOD,KAAK,CAACC,WAAW,KAAK,KACnD;wBACJA;oBACJ;oBAEA,IAAMgC,aAAahC;oBACnB,IAAIiC,aAAa;oBACjB,IAAIlC,KAAK,CAACC,WAAW,KAAK,KACtBA;oBACJ,MAAO,KAAM;wBACT,IAAID,MAAM,MAAM,IAAIC,YAAY;4BAC5BJ,YAAa,qCAAwDI,OAApBgC,aAAa,GAAE,OAAoB,OAAfhC,aAAa;4BAClF,OAAO,IAAIrL,yDAAOA,CAAC;wBACvB;wBAEA,IAAIoL,KAAK,CAACC,WAAW,KAAK,KACtB,IAAI,CAACiC,YAAY;4BACbA,aAAa;4BACbjC;wBACJ,OAEI;6BACH,IAAID,KAAK,CAACC,WAAW,KAAK,KAAK;4BAChCiC,aAAa;4BACb,IAAIjC,aAAa,IAAID,MAAM,MAAM,IAAIA,KAAK,CAACC,aAAa,EAAE,KAAK,KAC3DA;wBACR,OAEI,IAAID,KAAK,CAACC,WAAW,KAAK,OACnBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,OACtBD,KAAK,CAACC,WAAW,KAAK,KACzB;wBACRA;oBACJ;oBAEA,IAAI;wBACA,OAAO,IAAIrL,yDAAOA,CAACoL,MAAM,SAAS,CAACiC,YAAYhC;oBACnD,EACA,UAAM;wBACFJ,YAAa,qCAAwDI,OAApBgC,aAAa,GAAE,OAAoB,OAAfhC,aAAa;wBAClF,OAAO,IAAIrL,yDAAOA,CAAC;oBACvB;gBACJ;oBAESoN,YAAT,SAASA;oBACL,MAAO,KAAM;wBACT,IAAIhC,MAAM,MAAM,IAAIC,cAAcD,KAAK,CAACC,WAAW,KAAK,KAAK;4BACzDJ,YAAa,qCAAmD,OAAfI,aAAa;4BAC9D,OAAO;wBACX;wBACA,IAAID,KAAK,CAACC,WAAW,KAAK,OAAOD,KAAK,CAACC,WAAW,KAAK,KACnD;wBACJA;oBACJ;oBAEA,IAAID,MAAM,MAAM,IAAIC,YAAY;wBAC5BJ,YAAa,eAAyB,OAAXI,YAAW;wBACtC,OAAO;oBACX;oBAEA,OAAQD,KAAK,CAACC,aAAa;wBACvB,KAAK;4BACD,OAAO;wBACX,KAAK;4BACD,OAAO;wBACX;4BACIJ,YAAa,eAAyB,OAAXI,YAAW;4BACtC,OAAO;oBACf;gBACJ;gBA/RA,OAAQD,KAAK,CAACC,aAAa;oBACvB,KAAK;oBACL,KAAK;wBACD;oBAEJ,KAAK;wBAAKM;wBAAWD,eAAe;wBAAK;oBACzC,KAAK;wBAAKE;wBAAWF,eAAe;wBAAK;oBAEzC,KAAK;wBAAKI;wBAAWJ,eAAe;wBAAK;oBACzC,KAAK;wBAAKK;wBAAWL,eAAe;wBAAK;oBAEzC,KAAK;wBAAKM;wBAAWN,eAAe;wBAAK;oBACzC,KAAK;wBAAKO;wBAAWP,eAAe;wBAAK;oBAEzC,KAAK;wBAAKQ;wBAAWR,eAAe;wBAAK;oBACzC,KAAK;wBAAKS;wBAAWT,eAAe;wBAAK;oBAEzC,KAAK;wBAAKU;wBAAWV,eAAe;wBAAK;oBACzC,KAAK;wBAAKW;wBAAWX,eAAe;wBAAK;oBAEzC,KAAK;wBAAKc;wBAAWd,eAAe;wBAAK;oBACzC,KAAK;wBAAKe;wBAAWf,eAAe;wBAAK;oBAEzC,KAAK;wBAAKgB;wBAAWhB,eAAe;wBAAK;oBACzC,KAAK;wBAAKiB;wBAAWjB,eAAe;wBAAK;oBAEzC,KAAK;wBAAKoB;wBAAWpB,eAAe;wBAAK;oBACzC,KAAK;wBAAKqB;wBAAWrB,eAAe;wBAAK;oBAEzC,KAAK;wBAAKsB;wBAAWtB,eAAe;wBAAK;oBACzC,KAAK;wBAAKuB;wBAAWvB,eAAe;wBAAK;oBAEzC,KAAK;oBACL,KAAK;wBACDJ,UAAUE;wBACVD,UAAUE;wBACV3J,OAAO,IAAI,CAAC,IAAI4B,2DAASA;wBACzBgI,eAAe;wBACf;oBAEJ,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;wBAAK;4BACNL;4BACA,OAAQK;gCACJ,KAAK;oCAAI,OAAOT,YAAa,eAAyCG,OAA3BC,YAAW,kBAAkC,OAAlBD,KAAK,CAACC,WAAW,EAAC;gCAExF,KAAK;oCAAKM;oCAAWD,eAAe;oCAAK;gCACzC,KAAK;oCAAKE;oCAAWF,eAAe;oCAAK;gCAEzC,KAAK;oCAAKI;oCAAWJ,eAAe;oCAAK;gCACzC,KAAK;oCAAKK;oCAAWL,eAAe;oCAAK;gCAEzC,KAAK;oCAAKM;oCAAWN,eAAe;oCAAK;gCACzC,KAAK;oCAAKO;oCAAWP,eAAe;oCAAK;gCAEzC,KAAK;oCAAKQ;oCAAWR,eAAe;oCAAK;gCACzC,KAAK;oCAAKS;oCAAWT,eAAe;oCAAK;gCAEzC,KAAK;oCAAKU;oCAAWV,eAAe;oCAAK;gCACzC,KAAK;oCAAKW;oCAAWX,eAAe;oCAAK;gCAEzC,KAAK;oCAAKc;oCAAWd,eAAe;oCAAK;gCACzC,KAAK;oCAAKe;oCAAWf,eAAe;oCAAK;gCAEzC,KAAK;oCAAKgB;oCAAWhB,eAAe;oCAAK;gCACzC,KAAK;oCAAKiB;oCAAWjB,eAAe;oCAAK;gCAEzC,KAAK;oCAAKoB;oCAAWpB,eAAe;oCAAK;gCACzC,KAAK;oCAAKqB;oCAAWrB,eAAe;oCAAK;gCAEzC,KAAK;oCAAKsB;oCAAWtB,eAAe;oCAAK;gCACzC,KAAK;oCAAKuB;oCAAWvB,eAAe;oCAAK;4BAC7C;4BACA;wBACJ;oBAEA;wBACI,OAAOT,YAAa,eAA6CG,OAA/BC,aAAa,GAAE,kBAAsC,OAAtBD,KAAK,CAACC,aAAa,EAAE,EAAC;gBAC/F;gBAEA,IAAI,gCAAK9D,oBAAmB,KAAK,CAAC,OAAO,KAAK,SAC1C;YAqMR;YAEA,IAAI6D,MAAM,MAAM,IAAIC,YAChB,OAAOJ,YAAa,eAA+B,OAAjBG,MAAM,MAAM,GAAG,GAAE;YAGvD,MAAO,gCAAK7B,eAAc,MAAM,GAAG,EAC/B,iCAAKE,iBAAAA;gBACJtF,kCAAAA,2BAAAA;;gBAAL,QAAKA,YAAkBrC,2BAAlBqC,SAAAA,6BAAAA,QAAAA,yBAAAA;oBAAAA,IAAMoJ,WAANpJ;oBACD,iCAAKqF,cAAAA,yBAAa+D;;;gBADjBpJ;gBAAAA;;;yBAAAA,6BAAAA;wBAAAA;;;wBAAAA;8BAAAA;;;;YAGL,MAAK,UAAU;QASnB;;IAEA2F,gCAAAA;;eAA6B;YACzB0D,UAAU,SAAS,CAAC,SAAS,CAAC,gCAAKhG,sBAAqB,WAAW;QACvE;;IAEAuC,gCAAAA;;eAA6B;YACzByD,UAAU,SAAS,CAAC,SAAS,CAAC,gCAAK/F,sBAAqB,WAAW;QACvE;;IAEAuC,gCAAAA;;eAAwB;YACpBwD,UAAU,SAAS,CAAC,SAAS,CAAC,gCAAK9F,iBAAgB,WAAW;QAClE;;IAGAuC,gCAAAA;;eAAc;YACV,IAAMwD,eAAeC,WAAW,gCAAK5F,gBAAe,KAAK;YACzD,IAAI6F,MAAMF,eACN;YAEJ,MAAK,QAAQ,GAAGA;YAChB,MAAK,gBAAgB;QACzB;;IAEAvD,gCAAAA;;eAAc;YACV,IAAMuD,eAAeC,WAAW,gCAAK3F,gBAAe,KAAK;YACzD,IAAI4F,MAAMF,eACN;YAEJ,MAAK,QAAQ,GAAGA;YAChB,MAAK,gBAAgB;QACzB;;IAEAtD,gCAAAA;;eAAkB;YACd,IAAMsD,eAAeC,WAAW,gCAAK1F,oBAAmB,KAAK;YAC7D,IAAI2F,MAAMF,eACN;YAEJ,MAAK,YAAY,GAAGA;YACpB,MAAK,gBAAgB;QACzB;;IAEArD,gCAAAA;;eAAmB;YACf,IAAMqD,eAAeC,WAAW,gCAAKzF,qBAAoB,KAAK;YAC9D,IAAI0F,MAAMF,eACN;YAEJ,MAAK,aAAa,GAAGA;YACrB,MAAK,gBAAgB;QACzB;;IAGApD,gCAAAA;;eAAkB;YACd,IAAI;gBACA,MAAK,YAAY,GAAG,IAAIrK,yDAAOA,CAAC,gCAAKmI,oBAAmB,KAAK;oBACxDhE,kCAAAA,2BAAAA;;oBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMoJ,WAANpJ;wBACDoJ,SAAS,gBAAgB;;;oBADxBpJ;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET,EACA,UAAM;YACF,4BAA4B;YAChC;QACJ;;IAGAmG,gCAAAA;;eAAoB;YAChB,IAAI,MAAK,WAAW,IAAI,GACpB;YAEJ,MAAK,WAAW;YAChB,gCAAKhC,sBAAqB,WAAW,GAAG,MAAK,WAAW,CAAC,QAAQ;QACrE;;IAEAiC,gCAAAA;;eAAsB;YAClB,IAAI,MAAK,WAAW,IAAI,GACpB;YAEJ,MAAK,WAAW;YAChB,gCAAKjC,sBAAqB,WAAW,GAAG,MAAK,WAAW,CAAC,QAAQ;QACrE;;IAEAkC,gCAAAA;;eAA2B;gBAClBrG,kCAAAA,2BAAAA;;gBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;oBAAAA,IAAMoJ,WAANpJ;oBACDoJ,SAAS,gBAAgB;;;gBADxBpJ;gBAAAA;;;yBAAAA,6BAAAA;wBAAAA;;;wBAAAA;8BAAAA;;;;YAGL,MAAK,UAAU;QACnB;;IAGAsG,gCAAAA;;eAAiB;YACb,iCAAKjB,cAAAA,yBAAa1F,oFAAwB,CAAC;gBAAE,GAAG,IAAI9D,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YAClF,MAAK,UAAU;QACnB;;IAEA0K,gCAAAA;;eAAoB;YAChB,IAAI,gCAAKnB,eAAc,MAAM,KAAK,GAC9B;YAEJ,iCAAKE,iBAAAA;YACL,MAAK,UAAU;QACnB;;IAGAkB,gCAAAA;;eAAc;YACV,iCAAKhB,WAAAA,sBAAU;gBAAE,KAAK;gBAAI,OAAO;YAAG;QACxC;;IAEAiB,gCAAAA;;eAAiB;YACb,IAAI,gCAAKlB,YAAW,MAAM,KAAK,GAC3B;YAEJ,iCAAKE,cAAAA;YACL,MAAK,UAAU;QACnB;;IAGAiB,gCAAAA;;eAAe;YACX,IAAI;gBACA,IAAMzJ,IAAI,IAAIpB,yDAAOA,CAAC,gCAAK+I,kBAAiB,KAAK;gBACjD,IAAM1H,IAAI,IAAIrB,yDAAOA,CAAC,gCAAKgJ,kBAAiB,KAAK;oBAE5C7E,kCAAAA,2BAAAA;;oBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMoJ,WAANpJ;wBACDoJ,SAAS,SAAS,CAACnM,GAAGC;;;oBADrB8C;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET,EACA,UAAM;YACF,4BAA4B;YAChC;YAEA,MAAK,UAAU;QACnB;;IAEA2G,gCAAAA;;eAAY;YACR,IAAM8C,WAAWF,WAAW,gCAAKxE,cAAa,KAAK;YACnD,IAAIyE,MAAMC,WACN;YAEJ;;;;;;;;;;UAUE,GACF,IAAMC,SAASD,WAAWE,KAAK,EAAE,GAAG;YACpC,IAAMvM,MAAM,IAAIvB,yDAAOA,CAAC8N,KAAK,GAAG,CAACD;YACjC,IAAMrM,MAAM,IAAIxB,yDAAOA,CAAC8N,KAAK,GAAG,CAACD;gBAE5B1J,kCAAAA,2BAAAA;;gBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;oBAAAA,IAAMoJ,WAANpJ;oBACDoJ,SAAS,MAAM,CAAChM,KAAKC;;;gBADpB2C;gBAAAA;;;yBAAAA,6BAAAA;wBAAAA;;;wBAAAA;8BAAAA;;;;YAGL,MAAK,UAAU;QACnB;;IAEA4G,gCAAAA;;eAAW;YACP,IAAI;gBACA,IAAM3J,IAAI,IAAIpB,yDAAOA,CAAC,gCAAKoJ,cAAa,KAAK;gBAC7C,IAAM/H,IAAI,IAAIrB,yDAAOA,CAAC,gCAAKqJ,cAAa,KAAK;oBAExClF,kCAAAA,2BAAAA;;oBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;wBAAAA,IAAMoJ,WAANpJ;wBACDoJ,SAAS,KAAK,CAACnM,GAAGC;;;oBADjB8C;oBAAAA;;;6BAAAA,6BAAAA;4BAAAA;;;4BAAAA;kCAAAA;;;;YAET,EACA,UAAM;YACF,4BAA4B;YAChC;YAEA,MAAK,UAAU;QACnB;;IAIA,yDAAyD,GACzD,2CAAmB;QACf,MAAK,GAAG,CAAC,YAAY,CAAC,WAAY,GAA8B,OAA5B,MAAK,QAAQ,CAAC,QAAQ,IAAG,KAA+B,OAA5B,MAAK,QAAQ,CAAC,QAAQ,IAAG,KAAmC,OAAhC,MAAK,YAAY,CAAC,QAAQ,IAAG,KAAiC,OAA9B,MAAK,aAAa,CAAC,QAAQ;IAC3J;IAEA,+EAA+E,GAC/E,qCAAa;QACT,IAAM4J,aAAa,SAACC;YAChB,IAAIC,OAAQ;gBAEP9J,kCAAAA,2BAAAA;;gBAAL,QAAKA,4CAAuBoF,mCAAvBpF,SAAAA,6BAAAA,QAAAA,yBAAAA;oBAAAA,IAAMoJ,WAANpJ;oBACD8J,QAAQD,iBAAiBT;;;gBADxBpJ;gBAAAA;;;yBAAAA,6BAAAA;wBAAAA;;;wBAAAA;8BAAAA;;;;YAEL,IAAI8J,IAAI,CAACA,KAAK,MAAM,GAAG,EAAE,KAAK,KAC1BA,OAAOA,KAAK,SAAS,CAAC,GAAGA,KAAK,MAAM,GAAG;YAE3CA,QAAS;gBAEJpJ,mCAAAA,4BAAAA;;gBAAL,QAAKA,6CAAoB6E,gCAApB7E,UAAAA,8BAAAA,SAAAA,0BAAAA;oBAAAA,IAAMqJ,QAANrJ;oBACD,IAAIqJ,MAAM,GAAG,KAAK,IACdD,QAAS,GAAgBC,OAAdA,MAAM,GAAG,EAAC,MAAgB,OAAZA,MAAM,KAAK,EAAC;;;gBAFxCrJ;gBAAAA;;;yBAAAA,8BAAAA;wBAAAA;;;wBAAAA;8BAAAA;;;;YAILoJ,QAAS;YAET,OAAOA;QACX;QAEA,gBAAgB;QAChB;YACI,IAAMtM,UAAU;gBAAE,GAAG,IAAI3B,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACvD,IAAM4B,QAAQ;gBAAE,GAAG,IAAI5B,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACrD,gCAAKwH,sBAAqB,WAAW,GAAGuG,WAAW,SAACR;uBAAaA,SAAS,qBAAqB,CAAC5L,SAASC;;QAC7G;QAEA,gBAAgB;QAChB;YACI,IAAMuM,WAAU;gBAAE,GAAG,IAAInO,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACvD,IAAMoO,SAAQ;gBAAE,GAAG,IAAIpO,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACrD,gCAAKyH,sBAAqB,WAAW,GAAGsG,WAAW,SAACR;uBAAaA,SAAS,qBAAqB,CAACY,UAASC;;QAC7G;QAEA,WAAW;QACX;YACI,IAAMC,WAAU;gBAAE,GAAG,IAAIrO,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACvD,IAAMsO,SAAQ;gBAAE,GAAG,IAAItO,yDAAOA,CAAC;gBAAI,GAAG,IAAIA,yDAAOA,CAAC;YAAG;YACrD,IAAMgC,OAAO;gBAAE,UAAU;gBAAI,QAAQ;YAAM;YAC3C,gCAAK0F,iBAAgB,WAAW,GAAGqG,WAAW,SAACR;uBAAaA,SAAS,gBAAgB,CAACc,UAASC,QAAOtM;;QAC1G;YAIKmC,kCAAAA,2BAAAA;;YADL,wBAAwB;YACxB,QAAKA,YAAmB,MAAK,OAAO,CAAC,UAAU,qBAA1CA,SAAAA,6BAAAA,QAAAA,yBAAAA;gBAAAA,IAAMoK,YAANpK;gBACD,MAAK,OAAO,CAAC,eAAe,CAACoK,UAAU,IAAI;;;YAD1CpK;YAAAA;;;qBAAAA,6BAAAA;oBAAAA;;;oBAAAA;0BAAAA;;;;QAEL,sCAAsC;QACtC,MAAK,OAAO,CAAC,YAAY,CAAC,KAAK,gCAAKqD,sBAAqB,WAAW,CAAC,SAAS,CAAC,GAAG,gCAAKA,sBAAqB,WAAW,CAAC,OAAO,CAAC,KAAK;YAEhI3C,mCAAAA,4BAAAA;;YADL,uBAAuB;YACvB,QAAKA,6CAAoB6E,gCAApB7E,UAAAA,8BAAAA,SAAAA,0BAAAA;gBAAAA,IAAMqJ,QAANrJ;gBACD,IAAIqJ,MAAM,GAAG,KAAK,IACd,MAAK,OAAO,CAAC,YAAY,CAACA,MAAM,GAAG,EAAEA,MAAM,KAAK;;;YAFnDrJ;YAAAA;;;qBAAAA,8BAAAA;oBAAAA;;;oBAAAA;0BAAAA;;;;IAGT;IAzpBI,IAAM2J,QAAQC,aAAa,OAAO,CAAC;IACnC,IAAID,UAAU,MACV,IAAIA,UAAU,SACV,6BAAI,EAACrH,aAAY,OAAO,GAAG;SAE3B,6BAAI,EAACC,YAAW,OAAO,GAAG;IAElC,6BAAI,EAACD,aAAY,OAAO,GAAG;eAAMsH,aAAa,OAAO,CAAC,SAAS;;IAC/D,6BAAI,EAACrH,YAAW,OAAO,GAAG;eAAMqH,aAAa,OAAO,CAAC,SAAS;;IAG9D,6BAAI,EAAC3G,gBAAe,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ;IAClD,6BAAI,EAACC,gBAAe,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ;IAClD,6BAAI,EAACC,oBAAmB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ;IAC1D,6BAAI,EAACC,qBAAoB,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ;IAC5D,6BAAI,EAACE,oBAAmB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ;IAC1D,6BAAI,EAACG,sBAAqB,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ;IAGjE,6BAAI,EAAChB,eAAc,OAAO,4BAAG,IAAI,EAACuC;IAClC,6BAAI,EAAClC,qBAAoB,OAAO,4BAAG,IAAI,EAACmC;IACxC,6BAAI,EAAClC,qBAAoB,OAAO,4BAAG,IAAI,EAACmC;IACxC,6BAAI,EAAClC,gBAAe,OAAO,4BAAG,IAAI,EAACmC;IAEnC,6BAAI,EAAClC,gBAAe,OAAO,4BAAG,IAAI,EAACmC;IACnC,6BAAI,EAAClC,gBAAe,OAAO,4BAAG,IAAI,EAACmC;IACnC,6BAAI,EAAClC,oBAAmB,OAAO,4BAAG,IAAI,EAACmC;IACvC,6BAAI,EAAClC,qBAAoB,OAAO,4BAAG,IAAI,EAACmC;IAExC,6BAAI,EAACjC,oBAAmB,OAAO,4BAAG,IAAI,EAACkC;IACvC,6BAAI,EAACjC,uBAAsB,OAAO,4BAAG,IAAI,EAACkC;IAC1C,6BAAI,EAACjC,yBAAwB,OAAO,4BAAG,IAAI,EAACkC;IAC5C,6BAAI,EAAChC,8BAA6B,OAAO,4BAAG,IAAI,EAACiC;IACjD,6BAAI,EAAChC,oBAAmB,OAAO,4BAAG,IAAI,EAACiC;IACvC,6BAAI,EAAC/B,uBAAsB,OAAO,4BAAG,IAAI,EAACgC;IAE1C,6BAAI,EAAC9B,iBAAgB,OAAO,4BAAG,IAAI,EAAC+B;IACpC,6BAAI,EAAC7B,oBAAmB,OAAO,4BAAG,IAAI,EAAC8B;IAEvC,6BAAI,EAAC3B,kBAAiB,OAAO,4BAAG,IAAI,EAAC4B;IACrC,6BAAI,EAAC1B,eAAc,OAAO,4BAAG,IAAI,EAAC2B;IAClC,6BAAI,EAACxB,cAAa,OAAO,4BAAG,IAAI,EAACyB;IAGjC,8BAAI,EAACvB,cAAAA,kBAAL,IAAI,EAAc1F,oFAAwB,CAAC;QAAE,GAAG,IAAI9D,yDAAOA,CAAC,CAAC;QAAI,GAAG,IAAIA,yDAAOA,CAAC,CAAC;IAAG,GAAG,IAAI;IAC3F,8BAAI,EAACwJ,cAAAA,kBAAL,IAAI,EAAc1F,oFAAwB,CAAC;QAAE,GAAG,IAAI9D,yDAAOA,CAAC;QAAI,GAAG,IAAIA,yDAAOA,CAAC,CAAC;IAAG,GAAG,IAAI;IAC1F,8BAAI,EAACwJ,cAAAA,kBAAL,IAAI,EAAc1F,oFAAwB,CAAC;QAAE,GAAG,IAAI9D,yDAAOA,CAAC;QAAI,GAAG,IAAIA,yDAAOA,CAAC;IAAG,GAAG;QAAE,GAAG,IAAIA,yDAAOA,CAAC,CAAC;QAAI,GAAG,IAAIA,yDAAOA,CAAC,CAAC;IAAG,GAAG,IAAI;IACrI,8BAAI,EAACwJ,cAAAA,kBAAL,IAAI,EAAc,IAAI9F,2DAASA;IAE/B,8BAAI,EAACiG,WAAAA,eAAL,IAAI,EAAW;QAAE,KAAK;QAAU,OAAO;IAAO;IAC9C,8BAAI,EAACA,WAAAA,eAAL,IAAI,EAAW;QAAE,KAAK;QAAgB,OAAO;IAAM;IACnD,8BAAI,EAACA,WAAAA,eAAL,IAAI,EAAW;QAAE,KAAK;QAAQ,OAAO;IAAO;IAG5C,IAAI,CAAC,gBAAgB;IACrB,IAAI,CAAC,UAAU;EAmmBtB;AAt0BGH,SAAAA,YAAa+D,QAAkB;;IAC3B,6BAAI,EAAChE,eAAc,IAAI,CAACgE;IACxB,6BAAI,EAAC9E,qBAAoB,WAAW,GAAG,6BAAI,EAACc,eAAc,MAAM,CAAC,QAAQ;IAEzE;;;;;;;;;;;;;;;;;;QAkBA,GACA,IAAMmF,MAAM1L,SAAS,aAAa,CAAC;IACnC;QACI,IAAM2L,SAAS3L,SAAS,aAAa,CAAC;QACtC;YACI,IAAM4L,UAAU5L,SAAS,aAAa,CAAC;YACvC;gBACI4L,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAD,OAAO,WAAW,CAACC;YAEnB,IAAMC,UAAU7L,SAAS,aAAa,CAAC;YACvC;gBACI6L,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAF,OAAO,WAAW,CAACE;YAEnB,IAAMC,UAAU9L,SAAS,aAAa,CAAC;YACvC;gBACI8L,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAH,OAAO,WAAW,CAACG;YAEnB,IAAMC,UAAU/L,SAAS,aAAa,CAAC;YACvC;gBACI+L,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAJ,OAAO,WAAW,CAACI;YAEnB,IAAMC,UAAUhM,SAAS,aAAa,CAAC;YACvC;gBACIgM,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAL,OAAO,WAAW,CAACK;YAEnB,IAAMC,UAAUjM,SAAS,aAAa,CAAC;YACvC;gBACIiM,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAN,OAAO,WAAW,CAACM;YAEnB,IAAMC,UAAUlM,SAAS,aAAa,CAAC;YACvC;gBACIkM,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAP,OAAO,WAAW,CAACO;YAEnB,IAAMC,UAAUnM,SAAS,aAAa,CAAC;YACvC;gBACImM,QAAQ,IAAI,GAAG;gBACfA,QAAQ,KAAK,GAAG;YACpB;YACAR,OAAO,WAAW,CAACQ;YAEnBR,OAAO,KAAK,GAAGpB,SAAS,aAAa;YAErCoB,OAAO,QAAQ,GAAG;gBACd,IAAMS,QAAQ,gCAAK7F,eAAc,OAAO,CAACgE;gBAEzC,gCAAKhE,cAAa,CAAC6F,MAAM,CAAC,UAAU;gBACpC,gCAAK7F,cAAa,CAAC6F,MAAM,CAAC,YAAY;gBACtChE,MAAM,OAAO,GAAG;gBAEhB,OAAQuD,OAAO,KAAK;oBAChB,KAAK;wBAAKpB,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBAC/F,KAAK;wBAAKuN,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBAC/F,KAAK;wBAAKuN,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG,GAAG;4BAAE,GAAG,IAAIA,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBACzI,KAAK;wBAAKuN,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBAC/F,KAAK;wBAAKuN,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG,GAAG;4BAAE,GAAG,IAAIA,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG,GAAG;4BAAE,GAAG,IAAIA,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBACnL,KAAK;wBAAKuN,WAAWzJ,oFAAwB,CAAC;4BAAE,GAAG,IAAI9D,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG,GAAG;4BAAE,GAAG,IAAIA,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBACzI,KAAK;wBAAKuN,WAAW,IAAI5M,2DAASA,CAAC;4BAAE,GAAG,IAAIX,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG,GAAG,IAAIA,yDAAOA,CAAC,IAAI,OAAO,OAAO;4BAAE,GAAG,IAAIA,yDAAOA,CAAC;4BAAI,GAAG,IAAIA,yDAAOA,CAAC;wBAAG;wBAAU;oBAC5J,KAAK;wBAAKuN,WAAW,IAAI7J,2DAASA;wBAAI;gBAC1C;;gBACA6J,SAAS,YAAY,CAACmB;gBAEtB,gCAAKnF,cAAa,CAAC6F,MAAM,GAAG7B;gBAC5B,MAAK,UAAU;YACnB;QACJ;QACAmB,IAAI,WAAW,CAACC;QAEhB,IAAMvD,QAAQpI,SAAS,aAAa,CAAC;QACrC;YACIoI,MAAM,YAAY,CAAC,QAAQ;YAC3BA,MAAM,QAAQ,GAAG;gBACb,IAAIA,MAAM,OAAO,EACbmC,SAAS,UAAU;qBAEnBA,SAAS,UAAU;YAC3B;QACJ;QACAmB,IAAI,WAAW,CAACtD;QAEhBmC,SAAS,YAAY,CAACmB;IAC1B;IACA,6BAAI,EAACxG,kBAAiB,WAAW,CAACwG;AACtC;AAEAjF,SAAAA;IACI,IAAI,6BAAI,EAACF,eAAc,MAAM,KAAK,GAC9B;IAEJ,IAAMgE,WAAW,6BAAI,EAAChE,eAAc,GAAG;IACvC,6BAAI,EAACd,qBAAoB,WAAW,GAAG,6BAAI,EAACc,eAAc,MAAM,CAAC,QAAQ;IAEzE,6BAAI,EAACrB,kBAAiB,WAAW,CAAC,6BAAI,EAACA,kBAAiB,SAAS;IACjEqF,SAAS,UAAU;AACvB;AAKA5D,SAAAA,SAAUuE,KAAsC;;IAC5C,6BAAI,EAACxE,YAAW,IAAI,CAACwE;IACrB,6BAAI,EAACrF,kBAAiB,WAAW,GAAG,6BAAI,EAACa,YAAW,MAAM,CAAC,QAAQ;IAEnE,IAAM2F,WAAWrM,SAAS,aAAa,CAAC;IACxCqM,SAAS,KAAK,GAAGnB,MAAM,GAAG;IAC1BmB,SAAS,OAAO,GAAG,SAACnO;QAChBgN,MAAM,GAAG,GAAIhN,MAAM,MAAM,CAAsB,KAAK;QACpD,MAAK,UAAU;IACnB;IACA,6BAAI,EAACyH,eAAc,WAAW,CAAC0G;IAE/B,IAAMC,aAAatM,SAAS,aAAa,CAAC;IAC1CsM,WAAW,KAAK,GAAGpB,MAAM,KAAK;IAC9BoB,WAAW,OAAO,GAAG,SAACpO;QAClBgN,MAAM,KAAK,GAAIhN,MAAM,MAAM,CAAsB,KAAK;QACtD,MAAK,UAAU;IACnB;IACA,6BAAI,EAACyH,eAAc,WAAW,CAAC2G;AACnC;AAEA1F,SAAAA;IACI,6BAAI,EAACF,YAAW,GAAG;IACnB,6BAAI,EAACb,kBAAiB,WAAW,GAAG,6BAAI,EAACa,YAAW,MAAM,CAAC,QAAQ;IAEnE,IAAK,IAAI1E,IAAI,GAAGA,IAAI,GAAGA,IACnB,6BAAI,EAAC2D,eAAc,WAAW,CAAC,6BAAI,EAACA,eAAc,SAAS;AACnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1O0D;AAE9D,IAAIqC,uEAAaA"}